<?xml version='1.0'?>

<!--
  Overview.xml
  Web IDL

  This is written in XHTML 1.0 Strict with an inline <options> element that
  helps the WebIDL.xsl stylesheet process the document (generating a table
  of contents, section numbers, certain processing instructions).
  -->

<?xml-stylesheet href='WebIDL.xsl' type='text/xsl'?>

<html xmlns='http://www.w3.org/1999/xhtml' xmlns:x='http://mcc.id.au/ns/local' xml:lang='en'>
  <head>
    <meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/>
    <title>Web IDL</title>
    <meta name='revision' content='$Id: Overview.xml,v 1.136 2008-12-04 11:12:56 cmccorma Exp $'/>
    <link rel='stylesheet' href='WebIDL.css' type='text/css'/>

    <options xmlns='http://mcc.id.au/ns/local'>
      <versions>
        <cvs href='http://dev.w3.org/2006/webapi/WebIDL/'/>
        <this href='http://www.w3.org/TR/2008/WD-WebIDL-20080829/'/>
        <latest href='http://www.w3.org/TR/WebIDL/'/>
        <previous href='http://www.w3.org/TR/2008/WD-DOM-Bindings-20080410/'/>
      </versions>
      <editors>
        <person homepage='http://mcc.id.au/' email='cam@mcc.id.au'>
          <name>Cameron McCormack</name>
          <affiliation>Invited Expert</affiliation>
        </person>
      </editors>
      <maturity>ED</maturity>
    </options>
  </head>

  <body>
    <?top?>

    <div class='section'>
      <h2>Abstract</h2>
      <p>
        This document defines an interface definition language, Web IDL,
        that can be used to describe interfaces that are intended to be
        implemented in web browsers.  Web IDL is an IDL variant with a
        number of features that allow the behavior of common script objects in
        the web platform to be specified more readily.  How interfaces
        described with Web IDL correspond to constructs within ECMAScript and
        Java execution environments is also detailed.
      </p>

      <?revision-note?>
    </div>

    <div class='section'>
      <h2>Status of this Document</h2>
      <?sotd-top public-webapps@w3.org http://lists.w3.org/Archives/Public/public-webapps/ [WebIDL]?>
      <p>
        <cite>Web IDL</cite> is intended to specify in detail the interface definition
        language used by W3C specifications to define interfaces, and to
        provide precise conformance requirements for ECMAScript and
        Java bindings of such interfaces.  It is expected that this document acts
        as a guide to implementors of already-published specifications,
        and that newly published specifications reference this
        document to ensure conforming implementations of interfaces
        are interoperable.
      </p>
      <p>
        Previous working drafts of this document were called <cite>Language
          Bindings for DOM Specifications</cite>.  Also note that this document
        unrelated to
        <cite><a href='http://www.w3.org/TR/NOTE-widl-970922'>Web Interface
            Definition Language</a></cite>, a W3C Member submission from
        some time ago <a href='#ref-WIDLNOTE'>[WIDLNOTE]</a>.
      </p>
      <p>
        This document is produced by the
        <a href='http://www.w3.org/2008/webapps/'>Web Applications Working Group</a>, part of the
        <a href='http://www.w3.org/2006/rwc/Activity'>Rich Web Clients Activity</a>
        in the W3C <a href='http://www.w3.org/Interaction/'>Interaction Domain</a>.
        Changes made to this document can be found in the
        <a href='http://dev.w3.org/cvsweb/2006/webapi/WebIDL/Overview.xml'>W3C
          public CVS server</a>.
      </p>
      <?sotd-bottom http://www.w3.org/2004/01/pp-impl/42538/status?>
    </div>

    <div id='toc'>
      <h2>Table of Contents</h2>
      <?toc sections appendices?>
    </div>

    <div id='sections'>
      <div id='introduction' class='section'>
        <h2>Introduction</h2>

        <p class='norm'>This section is informative.</p>

        <p>
          Technical reports published by the W3C that include programming
          language interfaces have typically been described using the
          Object Management Group’s Interface Definition Language (IDL)
          <a href='#ref-OMGIDL'>[OMGIDL]</a>.  The IDL provides a means to
          describe these interfaces in a language independent manner.  Usually,
          additional language binding appendices are included in such
          documents which detail how the interfaces described with the IDL
          correspond to constructs in the given language.
        </p>
        <p>
          However, the bindings in these specifications for the language most
          commonly used on the web, ECMAScript, are consistently specified with
          low enough precision as to result in interoperability issues.  In
          addition, each specification must describe the same basic information,
          such as DOM interfaces described in IDL corresponding to properties
          on the ECMAScript global object, or the <a class='idltype' href='#idl-unsigned-long'>unsigned
            long</a> IDL type mapping to the <span class='estype'>Number</span>
          type in ECMAScript.
        </p>
        <p>
          This specification defines an IDL language that is a syntactic subset
          of OMG IDL version 3.0 (with some small deviations) for use by
          specifications that define interfaces.  A number of extensions are
          given to the IDL to support common functionality that previously must
          have been written in prose.  In addition, precise language bindings
          for ECMAScript 3rd Edition and Java 5 are given.
        </p>
      </div>

      <div id='conformance' class='section'>
        <h2>Conformance</h2>

        <p>
          Everything in this specification is normative except for diagrams,
          examples, notes and sections marked as being informative.
        </p>
        <p>
          The keywords “<span class='rfc2119'>MUST</span>”,
          “<span class='rfc2119'>MUST NOT</span>”,
          “<span class='rfc2119'>REQUIRED</span>”,
          “<span class='rfc2119'>SHALL</span>”,
          “<span class='rfc2119'>SHALL NOT</span>”,
          “<span class='rfc2119'>RECOMMENDED</span>”,
          “<span class='rfc2119'>MAY</span>” and
          “<span class='rfc2119'>OPTIONAL</span>” in this document are to be
          interpreted as described in
          <cite><a href='http://www.ietf.org/rfc/rfc2119'>Key words for use in RFCs to
              Indicate Requirement Levels</a></cite>
          <a href='#ref-RFC2119'>[RFC2119]</a>.
        </p>
        <p>
          The following conformance classes are defined by this specification:
        </p>
        <dl>
          <dt><dfn id='dfn-conforming-idl-fragment'>conforming IDL fragment</dfn></dt>
          <dd>
            <p>
              An <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> is considered
              to be a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
                IDL fragment</a> if it satisfies all of the
              <span class='rfc2119'>MUST</span>-,
              <span class='rfc2119'>REQUIRED</span>- and <span class='rfc2119'>SHALL</span>-level
              criteria in this specification that apply to IDL fragments.
            </p>
          </dd>
          <dt><dfn id='dfn-conforming-implementation'>conforming implementation</dfn></dt>
          <dd>
            <p>
              A user agent is considered to be a
              <a class='dfnref' href='#dfn-conforming-implementation'>conforming implementation</a>
              with respect to a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
                IDL fragment</a>  if it satisfies all of the <span class='rfc2119'>MUST</span>-,
              <span class='rfc2119'>REQUIRED</span>- and <span class='rfc2119'>SHALL</span>-level
              criteria in this specification that apply to implementations for all language
              bindings that the user agent supports.
            </p>
          </dd>
          <dt><dfn id='dfn-conforming-ecmascript-implementation'>conforming ECMAScript implementation</dfn></dt>
          <dd>
            <p>
              A user agent is considered to be a
              <a class='dfnref' href='#dfn-conforming-ecmascript-implementation'>conforming ECMAScript implementation</a>
              with respect to a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
                IDL fragment</a>  if it satisfies all of the <span class='rfc2119'>MUST</span>-,
              <span class='rfc2119'>REQUIRED</span>- and <span class='rfc2119'>SHALL</span>-level
              criteria in this specification that apply to implementations for the ECMAScript
              language binding.
            </p>
          </dd>
          <dt><dfn id='dfn-conforming-java-implementation'>conforming Java implementation</dfn></dt>
          <dd>
            <p>
              A user agent is considered to be a
              <a class='dfnref' href='#dfn-conforming-java-implementation'>conforming Java implementation</a>
              with respect to a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
                IDL fragment</a> if it satisfies all of the <span class='rfc2119'>MUST</span>-,
              <span class='rfc2119'>REQUIRED</span>- and <span class='rfc2119'>SHALL</span>-level
              criteria in this specification that apply to implementations for the Java
              language binding.
            </p>
          </dd>
        </dl>
      </div>

      <div id='idl' class='section'>
        <h2>Interface definition language</h2>

        <p>
          This section describes a language with which interfaces can be defined
          in a language independent manner.  This language is based on the
          Object Management Group’s Interface Definition Language
          <a href='#ref-OMGIDL'>[OMGIDL]</a>, and its syntax closely matches
          that of OMG IDL.
        </p>

        <p>
          An <dfn id='dfn-idl-fragment'>IDL fragment</dfn> is a sequence of definitions that matches the
          <a class='nt' href='#prod-Definitions'>Definitions</a> non-terminal
          in the grammar.  See <a href='#idl-grammar'>Appendix <?sref idl-grammar?></a>
          for the complete grammar and an explanation of the notation used.
        </p>

        <p>
          Each definition (matching <a class='nt' href='#prod-Definition'>Definition</a>)
          can be preceded by a list of <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a> (matching
          <a class='nt' href='#prod-ExtendedAttributeList'>ExtendedAttributeList</a>),
          which can control how the definition will be handled in language bindings.
          The extended attributes defined by this specification that are language binding
          agnostic are discussed in <a href='#idl-extended-attributes'>section <?sref idl-extended-attributes?></a>,
          while those specific to the ECMAScript language binding are discussed
          in <a href='#es-extended-attributes'>section <?sref es-extended-attributes?></a>.
        </p>

        <p>
          A definition is said to be <dfn id='dfn-outermost-scope'>declared at the outermost
            scope</dfn> if there is no <a class='nt' href='#prod-Module'>Module</a> ancestor
          of the non-terminal representing the definition in the parse tree for the
          <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>.
          <a class='dfnref' href='#dfn-conforming-idl-fragment'>Conforming IDL fragments</a>
          <span class='rfc2119'>SHOULD NOT</span> have any non-<a class='dfnref' href='#dfn-module'>module</a>
          definitions declared at the outermost scope.
        </p>

        <p>
          A definition has been <dfn id='dfn-declared-previously'>declared previously</dfn>,
          relative to a given <a class='dfnref' href='#dfn-scoped-name'>scoped name</a> that
          <a class='dfnref' href='#dfn-resolve'>resolved</a> to the definition, if:
        </p>
        <ul>
          <li>
            the scoped name resolves to a definition other than an
            <a class='dfnref' href='#dfn-interface'>interface</a>, and
            the first terminal symbol of the <a class='nt' href='#prod-Definition'>Definition</a>
            for the interface occurs before the scoped name; or,
          </li>
          <li>
            the scoped name resolves to an
            <a class='dfnref' href='#dfn-interface'>interface</a>, and
            the first terminal symbol of the <a class='nt' href='#prod-Definition'>Definition</a>
            for the interface or a <a class='dfnref' href='#dfn-interface-forward-declaration'>forward declaration</a>
            for the interface occurs before scoped name.
          </li>
        </ul>

        <?productions grammar Definitions Definition?>

        <div id='idl-names' class='section'>
          <h3>Names</h3>

          <p>
            The first <a class='nt' href='#prod-identifier'>identifier</a> terminal
            in a derivation of a <a class='nt' href='#prod-Definition'>Definition</a>,
            <a class='nt' href='#prod-InterfaceMember'>InterfaceMember</a> or
            <a class='nt' href='#prod-ExceptionMember'>ExceptionMember</a>
            determines the <dfn id='dfn-identifier'>identifier</dfn> of that definition,
            <a class='dfnref' href='#dfn-interface-member'>interface member</a> or
            <a class='dfnref' href='#dfn-exception-member'>exception member</a>
            (respectively) as follows:
          </p>
          <ul>
            <li>
              If the value of the <a class='nt' href='#prod-identifier'>identifier</a>
              terminal begins with a <span class='char'>U+005F LOW LINE ("_")</span> character,
              then the identifier of the
              definition, interface member or exception member
              is the value of the <a class='nt' href='#prod-identifier'>identifier</a>
              terminal without that leading <span class='char'>U+005F LOW LINE ("_")</span> character.
            </li>
            <li>
              Otherwise, the value of the <a class='nt' href='#prod-identifier'>identifier</a>
              terminal does not begin with a <span class='char'>U+005F LOW LINE ("_")</span> character.
              The identifier of the definition, interface member or exception member is the value of the
              <a class='nt' href='#prod-identifier'>identifier</a> terminal.
            </li>
          </ul>
          <p>
            The identifier of a definition <span class='rfc2119'>MUST</span>
            be locally unique to the <a class='dfnref' href='#dfn-module'>module</a> in
            which the definition occurred.
          </p>
          <p>
            Every definition also has a <dfn id='dfn-qualified-name'>qualified name</dfn>,
            which <span class='rfc2119'>MUST</span> be globally unique to the
            <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> in which it is defined.
            The qualified name of a definition is defined as follows:
          </p>
          <ul>
            <li>
              If the definition is
              <a class='dfnref' href='#dfn-outermost-scope'>declared at the outermost scope</a>,
              then the qualified name
              of the definition is two consecutive <span class='char'>U+003A COLON (":")</span>
              characters followed by the <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of the definition.
            </li>
            <li>
              Otherwise, the definition is not declared at the outermost scope.  The qualified name
              of the definition is the qualified name
              of the definition’s <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              followed by two consecutive <span class='char'>U+003A COLON (":")</span>
              characters followed by the identifier of the definition.
            </li>
          </ul>
          <p>
            A <dfn id='dfn-scoped-name'>scoped name</dfn> is a string formed from the
            concatenation of the terminal values (removing any leading
            <span class='char'>U+005F LOW LINE ("_")</span> characters from the value
            of <a class='nt' href='#prod-identifier'>identifier</a> terminals, as in
            the rules for <a class='dfnref' href='#dfn-identifier'>identifiers</a>)
            in the derivation of a <a class='nt' href='#prod-ScopedName'>ScopedName</a>
            non-terminal.  The scoped name
            is an <dfn id='dfn-absolute-scoped-name'>absolute scoped name</dfn>
            if it begins with two consecutive <span class='char'>U+003A COLON (":")</span>
            characters, or a <dfn id='dfn-relative-scoped-name'>relative scoped name</dfn>
            if it does not.
          </p>
          <p>
            A scoped name can be <dfn id='dfn-resolve'>resolved</dfn>, with respect to a given
            module, to a definition as follows:
          </p>
          <ul>
            <li>
              If the scoped name has “::DOMString” as a suffix, then the scoped
              name does not resolve to a definition.  (This is for compatibility with
              already-published OMG IDL fragments — see
              <a href='#idl-typedefs'>section <?sref idl-typedefs?></a> and
              <a href='#idl-valuetypes'>section <?sref idl-valuetypes?></a>.)
            </li>
            <li>
              Otherwise, if the scoped name is a
              <a class='dfnref' href='#dfn-relative-scoped-name'>relative scoped name</a>, then
              the following steps gives the definition it resolves to:
              <ol class='algorithm'>
                <li>
                  Let <var>n</var> be the <a class='dfnref' href='#dfn-qualified-name'>qualified name</a>
                  of the <a class='dfnref' href='#dfn-module'>module</a>.
                </li>
                <li>
                  While <var>n</var> is not the empty string:
                  <ol>
                    <li>
                      If there exists a definition whose
                      <a class='dfnref' href='#dfn-qualified-name'>qualified name</a> is
                      equal to the concatenation of <var>n</var>, two
                      <span class='char'>U+003A COLON (":")</span> characters and
                      the scoped name, then the scoped name resolves to that definition;
                      end these steps.
                    </li>
                    <li>
                      Remove the last name component from <var>n</var> (that is, from
                      the second last <span class='char'>U+003A COLON (":")</span>
                      character to the end of the string, inclusive).
                    </li>
                  </ol>
                </li>
                <li>
                  The scoped name does not resolve to a definition.
                </li>
              </ol>
            </li>
            <li>
              Otherwise, the scoped name is an
              <a href='#dfn-absolute-scoped-name'>absolute scoped name</a>:
              <ul>
                <li>
                  If there exists a definition whose
                  qualified name is
                  equal to the scoped name, then the scoped name resolves to that definition.
                </li>
                <li>
                  Otherwise, the scoped name does not resolve to a definition.
                </li>
              </ul>
            </li>
          </ul>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates how <a class='dfnref' href='#dfn-identifier'>identifiers</a>
              and <a class='dfnref' href='#dfn-qualified-name'>qualified names</a> are given
              to definitions, <a class='dfnref' href='#dfn-interface-member'>interface members</a>
              and <a class='dfnref' href='#dfn-exception-member'>exception members</a>.
            </p>
            <x:codeblock language='idl'>// Module identifier: "framework"
// Qualified name:    "::framework"
module framework {

  // Typedef identifier: "string"
  // Qualified name:    "::framework::string"
  typedef DOMString string;

  // Constant identifier: "ERR_NOT_FOUND"
  // Qualified name:      "::framework::ERR_NOT_FOUND"
  const long ERR_NOT_FOUND = 1;

  // Exception identifier: "FrameworkException"
  // Qualified name:       "::framework::FrameworkException"
  exception FrameworkException {

    // Exception member identifier: "code"
    long code;
  };

  // Interface identifier: "System"
  // Qualified name:       "::framework::System"
  interface System {

    // Operation identifier:          "createObject"
    // Operation argument identifier: "interface"
    Object createObject(in string _interface);
  };

  // Module identifier: "gui"
  // Qualified name:    "::framework::gui"
  module gui {
    
    // Interface identifier: "TextField"
    // Qualified name:       "::framework::gui::TextField"
    interface TextField {

      // Attribute identifier: "const"
      attribute boolean _const;

      // Attribute identifier: "value"
      attribute string _value;
    };
  };
};</x:codeblock>
            <p>
              Note that while the second <a class='dfnref' href='#dfn-attribute'>attribute</a>
              on the <span class='idltype'>TextField</span> <a class='dfnref' href='#dfn-interface'>interface</a>
              need not have been escaped with an underscore (because “value” is
              not a quoted terminal symbol in the IDL grammar), it is still unescaped
              to obtain the attribute’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </p>
          </div>

          <?productions grammar ScopedName ScopedNameAfterColon ScopedNameParts ScopedNamePartsAfterColon?>
        </div>

        <div id='idl-modules' class='section'>
          <h3>Modules</h3>

          <p>
            A <dfn id='dfn-module'>module</dfn> is a definition that matches the
            <a class='nt' href='#prod-Module'>Module</a> non-terminal, and serves
            as a container for grouping together related definitions.
          </p>
          <p>
            The <dfn id='dfn-enclosing-module'>enclosing module</dfn> of a definition
            is defined as follows:
          </p>
          <ul>
            <li>
              If the definition is
              <a class='dfnref' href='#dfn-outermost-scope'>declared at the outermost scope</a>,
              then the definition has no enclosing module.
            </li>
            <li>
              Otherwise, the definition is not declared at the outermost scope.
              The enclosing module of the definition is the closest <a class='nt' href='#prod-Module'>Module</a>
              ancestor of the non-terminal representing the definition
              in the <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>’s parse tree.
            </li>
          </ul>
          <p>
            The relevant language binding determines how modules affect the naming
            of constructs that correspond to definitions in the language.  If the language
            supports some form of namespacing mechanism, then a module will correspond
            to a namespace.  The name of that namespace is based on the module’s
            <dfn id='dfn-prefixed-name'>prefixed name</dfn>, which is defined as
            follows:
          </p>
          <ul>
            <li>
              If the <a class='dfnref' href='#dfn-module'>module</a> has a
              <a class='xattr' href='#Prefix'>[Prefix]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              whose argument starts with the string “::”, then the
              <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> of
              the module is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              constructed by concatenating the <a class='xattr' href='#Prefix'>[Prefix]</a>
              argument, the string “::” and the module’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </li>
            <li>
              Otherwise, if the <a class='dfnref' href='#dfn-module'>module</a> has a
              <a class='xattr' href='#Prefix'>[Prefix]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              whose argument does not start with the string “::”, then the
              <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> of
              the module is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              constructed by concatenating the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a>
              of the module’s <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              (or “::” if there is no enclosing module), the string “::”, the
              <a class='xattr' href='#Prefix'>[Prefix]</a> argument, the string
              “::” and the module’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </li>
            <li>
              Otherwise, if the <a class='dfnref' href='#dfn-qualified-name'>qualified name</a>
              of the <a class='dfnref' href='#dfn-module'>module</a> is “::dom”, then
              the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> of the
              module is the <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              “::org::w3c::dom”.
            </li>
            <li>
              Otherwise, if the <a class='dfnref' href='#dfn-module'>module</a> has
              no <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>,
              then the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> of the
              module is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              constructed by concatenating the string “::org::w3c::dom::” and the
              module’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </li>
            <li>
              Otherwise, the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a>
              of the module is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              constructed by concatenating the prefixed name of the module’s
              <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              and the module’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </li>
          </ul>
          <p>
            In the Java language binding, the name of the Java package is
            derived by taking the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a>
            and replacing occurrences of “::” with “.” (see <a href='#java-modules'>section <?sref java-modules?></a>).
            The ECMAScript language binding does not have a namespacing mechanism, and
            thus does not use a <a class='dfnref' href='#dfn-module'>module</a>’s
            prefixed name.
          </p>
          <p>
            The following <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            are applicable to <a class='dfnref' href='#dfn-module'>modules</a>:
            <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a>,
            <a class='xattr' href='#Prefix'>[Prefix]</a>.
          </p>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              illustrates how related <a class='dfnref' href='#dfn-interface'>interfaces</a>
              can be grouped together in <a class='dfnref' href='#dfn-module'>modules</a>:
            </p>
            <x:codeblock language='idl'>module gfx {

  module geom {
    interface Shape { … };
    interface Rectangle : Shape { … };
    interface Path : Shape { … };
  };

  interface GraphicsContext {
    void fillShape(in geom::Shape s);
    void strokeShape(in geom::Shape s);
  };
};

module gui {

  interface Widget { … };

  interface Window : Widget {
    gfx::GraphicsContext getGraphicsContext();
  };

  interface Button : Widget { … };
};</x:codeblock>
          </div>

          <?productions grammar Module?>
        </div>

        <div id='idl-interfaces' class='section'>
          <h3>Interfaces</h3>

          <p>
            An <dfn id='dfn-interface'>interface</dfn> is a definition that matches the
            <a class='nt' href='#prod-Interface'>Interface</a> non-terminal whose
            <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a> is not empty
            (that is, it is not the case that <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a> ⇒ ε).
            An interface is a specification of a set of
            <dfn id='dfn-interface-member'>interface members</dfn>, which are the
            <a class='dfnref' href='#dfn-constant'>constants</a>,
            <a class='dfnref' href='#dfn-attribute'>attributes</a> and
            <a class='dfnref' href='#dfn-operation'>operations</a>
            given by the <a class='nt' href='#prod-InterfaceMembers'>InterfaceMembers</a>
            part of the <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a>.
            Objects implementing the interface will have members that correspond
            to each of the interface’s members.
          </p>
          <p>
            An interface <dfn id='dfn-inherit'>inherits</dfn> from another if there is a
            <a class='dfnref' href='#dfn-scoped-name'>scoped name</a> in the
            <a class='nt' href='#prod-ScopedNameList'>ScopedNameList</a> that,
            with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
            of the interface, <a class='dfnref' href='#dfn-resolve'>resolves</a> to that inherited
            interface.  Every scoped name in the <a class='nt' href='#prod-ScopedNameList'>ScopedNameList</a>
            <span class='rfc2119'>MUST</span> resolve to an interface whose definition
            occurs before the definition of the inheriting interface.
            An object that implements an interface that inherits from another
            also implements that inherited interface.  The object therefore will also
            have members that correspond to the
            interface members from the inherited interface.
          </p>
          <p>
            Each interface member
            can be preceded by a list of <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a> (matching
            <a class='nt' href='#prod-ExtendedAttributeList'>ExtendedAttributeList</a>),
            which can control how the interface member will be handled in language bindings.
          </p>

          <p>
            The relevant language binding determines how interfaces correspond to constructs
            in the language.  Many object-oriented languages support interfaces, in which
            case the mapping of IDL interfaces to language interfaces is simple.
          </p>
          <p>
            An <dfn id='dfn-interface-forward-declaration'>interface forward declaration</dfn>
            is a definition that matches the <a class='nt' href='#prod-Interface'>Interface</a> non-terminal
            whose <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a> is empty
            (that is, <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a> ⇒ ε).  A forward declaration
            is used to introduce an interface name to allow for the definition of mutually
            recursive interfaces, since scoped names
            need to resolve to types that have been
            <a class='dfnref' href='#dfn-declared-previously'>declared previously</a>.
          </p>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates the use of an
              <a class='dfnref' href='#dfn-interface-forward-declaration'>interface forward declaration</a>
              to allow the definition of mutually referential <a class='dfnref' href='#dfn-interface'>interfaces</a>.
              Both <span class='idltype'>Human</span> and <span class='idltype'>Dog</span>
              inherit from <span class='idltype'>Animal</span>.  Objects that implement
              either of those two interfaces will thus have a <code>name</code> attribute.
            </p>
            <x:codeblock language='idl'>interface Animal {
  attribute DOMString name;
};

interface Dog;

interface Human : Animal {
  attribute Dog pet;
};

interface Dog : Animal {
  attribute Human owner;
};</x:codeblock>
          </div>

          <p>
            The following extended attributes are applicable to interfaces:
            <a class='xattr' href='#Callable'>[Callable]</a>,
            <a class='xattr' href='#Callback'>[Callback]</a>,
            <a class='xattr' href='#Constructor'>[Constructor]</a>,
            <a class='xattr' href='#ImplementedOn'>[ImplementedOn]</a>,
            <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>,
            <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>,
            <a class='xattr' href='#IndexGetter'>[IndexGetter]</a>,
            <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>,
            <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>,
            <a class='xattr' href='#NameCreator'>[NameCreator]</a>,
            <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>,
            <a class='xattr' href='#NameGetter'>[NameGetter]</a>,
            <a class='xattr' href='#NameSetter'>[NameSetter]</a>,
            <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>,
            <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>,
            <a class='xattr' href='#Stringifies'>[Stringifies]</a>.
          </p>

          <?productions grammar Interface InterfaceInheritance InterfaceBody InterfaceMembers InterfaceMember ScopedNameList ScopedNames?>

          <div id='idl-constants' class='section'>
            <h4>Constants</h4>

            <p>
              A <dfn id='dfn-constant'>constant</dfn> is a definition that matches the
              <a class='nt' href='#prod-Const'>Const</a> non-terminal, and is used to
              bind a constant value to a name.  Constants can appear on
              <a class='dfnref' href='#dfn-interface'>interfaces</a>
              and also at the <a class='dfnref' href='#dfn-module'>module</a> or
              <a class='dfnref' href='#dfn-outermost-scope'>outermost scope</a>.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-identifier'>identifier</a> of a
              <a class='dfnref' href='#dfn-constant'>constant</a>
              <span class='rfc2119'>MUST NOT</span> be the same as the identifier
              of another <a class='dfnref' href='#dfn-interface-member'>interface member</a>
              defined on the same <a class='dfnref' href='#dfn-interface'>interface</a>.
            </p>
            <p>
              The <a class='nt' href='#prod-ConstExpr'>ConstExpr</a> part of a
              constant definition gives the value of the constant, which can be
              one of the two boolean literal terminals (<span class='terminal'>"TRUE"</span>
              and <span class='terminal'>"FALSE"</span>), an
              <a class='nt' href='#prod-integer'>integer</a> terminal or a
              <a class='nt' href='#prod-float'>float</a> terminal.
            </p>
            <p>
              The value of the boolean literal terminals are as follows:
            </p>
            <ul>
              <li>
                The value of the <span class='terminal'>"TRUE"</span> terminal
                is the <a class='idltype' href='#idl-boolean'>boolean</a> value
                <span class='idlvalue'>true</span>.
              </li>
              <li>
                The value of the <span class='terminal'>"FALSE"</span> terminal
                is the <a class='idltype' href='#idl-boolean'>boolean</a> value
                <span class='idlvalue'>false</span>.
              </li>
            </ul>
            <p>
              The value of an <a class='nt' href='#prod-integer'>integer</a> terminal
              is an integer, and is determined as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>S</var> be the string value of the <a class='nt' href='#prod-integer'>integer</a> terminal.</li>
              <li>Let <var>n</var> be the length of <var>S</var>.</li>
              <li>Initialize <var>mag</var> to 0.</li>
              <li>Initialize <var>sign</var> to 1.</li>
              <li>Initialize <var>base</var> to 10.</li>
              <li>Initialize <var>i</var> to 0.</li>
              <li>
                If the first character of <var>S</var> is not <span class='char'>U+002D HYPHEN-MINUS ("-")</span>,
                then go to step <?stepref a?>.
              </li>
              <li>Set <var>sign</var> to −1.</li>
              <li>Set <var>i</var> to 1.</li>
              <li x:step='a'>
                If the <var>i</var>th zero-based character of <var>S</var> is not
                <span class='char'>U+0030 DIGIT ZERO ("0")</span>, then go to step <?stepref b?>.
              </li>
              <li>Set <var>base</var> to 8.</li>
              <li>Set <var>i</var> to <var>i</var> + 1.</li>
              <li>
                If the <var>i</var>th zero-based character of <var>S</var> is not
                <span class='char'>U+0058 LATIN CAPITAL LETTER X ("X")</span> or
                <span class='char'>U+0078 LATIN SMALL LETTER X ("x")</span>, then go to step <?stepref b?>.
              </li>
              <li>Set <var>base</var> to 16.</li>
              <li>Set <var>i</var> to <var>i</var> + 1.</li>
              <li x:step='b'>
                Let <var>digit</var> be the value obtained by looking up the <var>i</var>th
                zero-based character of <var>S</var> in the table below:
                <table class='vert'>
                  <tr><th>Character</th><th>Value of <var>digit</var></th></tr>
                  <tr><td><span class='char'>U+0030 DIGIT ZERO ("0")</span></td><td>0</td></tr>
                  <tr><td><span class='char'>U+0031 DIGIT ONE ("1")</span></td><td>1</td></tr>
                  <tr><td><span class='char'>U+0032 DIGIT TWO ("2")</span></td><td>2</td></tr>
                  <tr><td><span class='char'>U+0033 DIGIT THREE ("3")</span></td><td>3</td></tr>
                  <tr><td><span class='char'>U+0034 DIGIT FOUR ("4")</span></td><td>4</td></tr>
                  <tr><td><span class='char'>U+0035 DIGIT FIVE ("5")</span></td><td>5</td></tr>
                  <tr><td><span class='char'>U+0036 DIGIT SIX ("6")</span></td><td>6</td></tr>
                  <tr><td><span class='char'>U+0037 DIGIT SEVEN ("7")</span></td><td>7</td></tr>
                  <tr><td><span class='char'>U+0038 DIGIT EIGHT ("8")</span></td><td>8</td></tr>
                  <tr><td><span class='char'>U+0039 DIGIT NINE ("9")</span></td><td>9</td></tr>
                  <tr><td><span class='char'>U+0041 LATIN CAPITAL LETTER A ("A")</span></td><td>10</td></tr>
                  <tr><td><span class='char'>U+0042 LATIN CAPITAL LETTER B ("B")</span></td><td>11</td></tr>
                  <tr><td><span class='char'>U+0043 LATIN CAPITAL LETTER C ("C")</span></td><td>12</td></tr>
                  <tr><td><span class='char'>U+0044 LATIN CAPITAL LETTER D ("D")</span></td><td>13</td></tr>
                  <tr><td><span class='char'>U+0045 LATIN CAPITAL LETTER E ("E")</span></td><td>14</td></tr>
                  <tr><td><span class='char'>U+0046 LATIN CAPITAL LETTER F ("F")</span></td><td>15</td></tr>
                  <tr><td><span class='char'>U+0061 LATIN SMALL LETTER A ("a")</span></td><td>10</td></tr>
                  <tr><td><span class='char'>U+0062 LATIN SMALL LETTER B ("b")</span></td><td>11</td></tr>
                  <tr><td><span class='char'>U+0063 LATIN SMALL LETTER C ("c")</span></td><td>12</td></tr>
                  <tr><td><span class='char'>U+0064 LATIN SMALL LETTER D ("d")</span></td><td>13</td></tr>
                  <tr><td><span class='char'>U+0065 LATIN SMALL LETTER E ("e")</span></td><td>14</td></tr>
                  <tr><td><span class='char'>U+0066 LATIN SMALL LETTER F ("f")</span></td><td>15</td></tr>
                </table>
              </li>
              <li>Set <var>mag</var> to <var>mag</var> * <var>base</var> + <var>digit</var>.</li>
              <li>Set <var>i</var> to <var>i</var> + 1.</li>
              <li>If <var>i</var> &lt; <var>n</var>, go to step <?stepref b?>.</li>
              <li>
                The value of the <a class='nt' href='#prod-integer'>integer</a> terminal
                is <var>sign</var> * <var>mag</var>.
              </li>
            </ol>
            <div class='note'>
              <p>
                The algorithm above specifies nothing unexpected.  It interprets
                strings that match the regular expressions <span class='regex'>^-?0[Xx][0-9A-Fa-f]+$</span>,
                <span class='regex'>^-?0[0-7]+$</span> and <span class='regex'>^-?[0-9]+$</span>
                as hexadecimal, octal and decimal integers, respectively.  It
                differs from the Java <code>java.lang.Long.parseLong(String)</code>
                method only in that it can parse integers outside the range
                of a Java <span class='javatype'>long</span>.
              </p>
            </div>
            <p>
              The type of an <a class='nt' href='#prod-integer'>integer</a> terminal is the same
              as the type of the constant it is being used as the value of.  The value of the
              <a class='nt' href='#prod-integer'>integer</a> terminal <span class='rfc2119'>MUST NOT</span>
              lie outside the valid range of values for its type, as given in
              <a href='#idl-types'>section <?sref idl-types?></a> <?sdir idl-types?>.
            </p>
            <p>
              The type of a <a class='nt' href='#prod-float'>float</a> terminal
              is <a class='idltype' href='#idl-float'>float</a>, and its value
              is the IEEE 754 single-precision floating pointer number determined
              as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>S</var> be the string value of the <a class='nt' href='#prod-float'>float</a> terminal.</li>
              <li>Let <var>n</var> be the length of <var>S</var>.</li>
              <li>Initialize <var>mant</var> to 0.</li>
              <li>Initialize <var>sign</var> to 1.</li>
              <li>Initialize <var>exp1</var> to 0.</li>
              <li>Initialize <var>exp2</var> to 0.</li>
              <li>Initialize <var>expSign</var> to 1.</li>
              <li>Initialize <var>afterDot</var> to <b>false</b>.</li>
              <li>Initialize <var>i</var> to 0.</li>
              <li>
                If the first character of <var>S</var> is not <span class='char'>U+002D HYPHEN-MINUS ("-")</span>,
                then go to step <?stepref a?>.
              </li>
              <li>Set <var>sign</var> to −1.</li>
              <li>Set <var>i</var> to 1.</li>
              <li x:step='b'>
                If the <var>i</var>th zero-based character of <var>S</var> is
                <span class='char'>U+0045 LATIN CAPITAL LETTER E ("E")</span> or
                <span class='char'>U+0045 LATIN SMALL LETTER E ("e")</span>, then go to step <?stepref c?>.
              </li>
              <li x:step='a'>
                If the <var>i</var>th zero-based character of <var>S</var> is not
                <span class='char'>U+002E FULL STOP (".")</span>, then go to step <?stepref d?>.
              </li>
              <li>Set <var>afterDot</var> to <b>true</b>.</li>
              <li>Go to step <?stepref e?>.</li>
              <li x:step='d'>
                Let <var>digit</var> be the Unicode codepoint of the <var>i</var>th
                zero-based character of <var>S</var> minus 48.
              </li>
              <li>Set <var>mant</var> to <var>mant</var> * 10 + <var>digit</var>.</li>
              <li>If <var>afterDot</var> is <b>true</b>, set <var>exp1</var> to <var>exp1</var> − 1.</li>
              <li x:step='e'>Set <var>i</var> to <var>i</var> + 1.</li>
              <li>If <var>i</var> &lt; <var>n</var>, go to step <?stepref b?>.</li>
              <li>Go to step <?stepref f?>.</li>
              <li x:step='c'>Set <var>i</var> to <var>i</var> + 1.</li>
              <li>
                If the <var>i</var>th zero-based character of <var>S</var> is not
                <span class='char'>U+002D HYPHEN-MINUS ("-")</span>, then go to step <?stepref g?>.
              </li>
              <li>Set <var>expSign</var> to −1.</li>
              <li>Set <var>i</var> to <var>i</var> + 1.</li>
              <li x:step='g'>
                If the <var>i</var>th zero-based character of <var>S</var> is
                <span class='char'>U+002B PLUS SIGN ("+")</span>, then set
                <var>i</var> to <var>i</var> + 1.
              </li>
              <li x:step='h'>
                Let <var>digit</var> be the Unicode codepoint of the <var>i</var>th
                zero-based character of <var>S</var> minus 48.
              </li>
              <li>Set <var>exp2</var> to <var>exp2</var> * 10 + <var>digit</var>.</li>
              <li>Set <var>i</var> to <var>i</var> + 1.</li>
              <li>If <var>i</var> &lt; <var>n</var>, go to step <?stepref h?>.</li>
              <li x:step='f'>
                The value of the <a class='nt' href='#prod-float'>float</a> terminal
                is the IEEE 754 single-precision floating point number closest to
                <var>sign</var> * <var>mant</var> * 10<sup><var>expSign</var> * <var>exp2</var> + <var>exp1</var></sup>.
                <a href='#ref-IEEE-754'>[IEEE-754]</a>
                <div class='ednote'>
                  <p>This should probably do some extra trickery like the definition for the “number value” in ECMA-262.</p>
                </div>
              </li>
            </ol>
            <p>
              The value assigned to a constant <span class='rfc2119'>MUST</span>
              have the same type as the type that the constant is declared to be.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                demonstrates how <a class='dfnref' href='#dfn-constant'>constants</a>
                of the above types can be defined.
              </p>
              <x:codeblock language='idl'>const boolean DEBUG = FALSE;
const octet LF = 10;
const short DELTA = -1;
const unsigned long BIT_MASK = 0x0000fc00;
const float AVOGADRO = 6.022e23;</x:codeblock>
            </div>
            <p>
              No <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              are applicable to constants.
            </p>

            <?productions grammar Const ConstExpr BooleanLiteral?>
          </div>

          <div id='idl-attributes' class='section'>
            <h4>Attributes</h4>

            <p>
              An <dfn id='dfn-attribute'>attribute</dfn> is an <a class='dfnref' href='#dfn-interface-member'>interface member</a>
              that matches the <a class='nt' href='#prod-Attribute'>Attribute</a> non-terminal, and is used to declare that
              objects implementing the <a class='dfnref' href='#dfn-interface'>interface</a> will have an attribute with the given
              <a class='dfnref' href='#dfn-identifier'>identifier</a> whose value can
              be retrieved and (in some cases) changed.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-identifier'>identifier</a> of an
              <a class='dfnref' href='#dfn-attribute'>attribute</a>
              <span class='rfc2119'>MUST NOT</span> be the same as the identifier
              of another <a class='dfnref' href='#dfn-interface-member'>interface member</a>
              defined on the same <a class='dfnref' href='#dfn-interface'>interface</a>.
            </p>
            <p>
              The type of the attribute is given by the <a class='nt' href='#prod-DeclarationType'>DeclarationType</a>
              non-terminal.  If the <a class='nt' href='#prod-DeclarationType'>DeclarationType</a> is a
              <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>, then it <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-resolve'>resolve</a>,
              with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              of the interface on which the attribute
              is defined, to an interface, <a class='dfnref' href='#dfn-typedef'>typedef</a>
              or <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> that has
              been <a class='dfnref' href='#dfn-declared-previously'>declared previously</a>.
            </p>
            <p>
              The attribute is <dfn id='dfn-read-only'>read only</dfn> if the
              <span class='terminal'>"readonly"</span> terminal is used in the definition.
              An object that implements the interface on which a read only attribute
              is defined will not allow assignment to that attribute.  It is language
              binding specific whether assignment is simply disallowed by the language,
              ignored or an exception is thrown.
            </p>
            <p>
              The <a class='nt' href='#prod-GetRaises'>GetRaises</a> and
              <a class='nt' href='#prod-SetRaises'>SetRaises</a> clauses are used
              to declare the possible exceptions that can be thrown when retrieving
              the value of and assigning a value to the attribute, respectively.
              Each scoped name in the 
              <a class='nt' href='#prod-GetRaises'>GetRaises</a> and
              <a class='nt' href='#prod-SetRaises'>SetRaises</a> clauses
              <span class='rfc2119'>MUST</span> resolve,
              with respect to the enclosing module
              of the interface on which the attribute
              is defined, to an <a class='dfnref' href='#dfn-exception'>exception</a> that
              has been <a class='dfnref' href='#dfn-declared-previously'>declared previously</a>.
            </p>
            <p>
              The following <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              are applicable to attributes:
              <a class='xattr' href='#Null'>[Null]</a>,
              <a class='xattr' href='#PutForwards'>[PutForwards]</a>,
              <a class='xattr' href='#Undefined'>[Undefined]</a>.
            </p>

            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                demonstrates how <a class='dfnref' href='#dfn-attribute'>attributes</a>
                can be declared on an <a class='dfnref' href='#dfn-interface'>interface</a>:
              </p>
              <x:codeblock language='idl'>exception InvalidName {
  DOMString reason;
};

exception NoSuchPet { };

interface Person {

  // A simple attribute that can be set to any value in the range an unsigned
  // short can take.
  attribute unsigned short age;

  // An attribute that can raise an exception if it is set to an invalid value.
  attribute DOMString name setraises (InvalidName);

  // An attribute whose value cannot be assigned to, and which can raise an
  // exception in some circumstances.
  readonly attribute DOMString petName getraises (NoSuchPet);
};</x:codeblock>
            </div>

            <?productions grammar Attribute ReadOnly GetRaises SetRaises ExceptionList?>
          </div>

          <div id='idl-operations' class='section'>
            <h4>Operations</h4>

            <p>
              An <dfn id='dfn-operation'>operation</dfn> is an <a class='dfnref' href='#dfn-interface-member'>interface member</a> that matches the
              <a class='nt' href='#prod-Operation'>Operation</a> non-terminal, and is used
              to declare that objects implementing the <a class='dfnref' href='#dfn-interface'>interface</a> will have a method with 
              the given <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-identifier'>identifier</a> of an
              <a class='dfnref' href='#dfn-operation'>operation</a>
              <span class='rfc2119'>MUST NOT</span> be the same as the identifier
              of a <a class='dfnref' href='#dfn-constant'>constant</a> or
              <a class='dfnref' href='#dfn-attribute'>attribute</a>
              defined on the same <a class='dfnref' href='#dfn-interface'>interface</a>.
            </p>
            <p>
              The <dfn id='dfn-return-type'>return type</dfn> of the operation is given
              by the <a class='nt' href='#prod-ReturnType'>ReturnType</a> non-terminal.
              A return type of <span id='idl-void' class='terminal'>"void"</span> indicates that the operation returns no value.
              If the <a class='nt' href='#prod-DeclarationType'>DeclarationType</a> is a
              <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>, then it <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-resolve'>resolve</a>,
              with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              of the interface on which the operation
              is defined, to an interface, <a class='dfnref' href='#dfn-typedef'>typedef</a>
              or <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> that has
              been <a class='dfnref' href='#dfn-declared-previously'>declared previously</a>.
            </p>
            <p>
              The <a class='nt' href='#prod-ArgumentList'>ArgumentList</a> non-terminal gives
              the list of arguments for the operation.  The identifier
              of an argument is given by the <a class='nt' href='#prod-identifier'>identifier</a>
              terminal in the <a class='nt' href='#prod-Argument'>Argument</a>, and the type
              of the argument is given by the <a class='nt' href='#prod-DeclarationType'>DeclarationType</a>.
              If the <a class='nt' href='#prod-DeclarationType'>DeclarationType</a> is a
              scoped name, then it <span class='rfc2119'>MUST</span>
              resolve,
              with respect to the enclosing module
              of the <a class='dfnref' href='#dfn-interface'>interface</a> on which the operation
              is defined, to an interface, <a class='dfnref' href='#dfn-typedef'>typedef</a>
              or <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> that has
              been declared previously.
            </p>
            <p>
              Each argument can be preceded by a list of
              <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a> (matching
              <a class='nt' href='#prod-ExtendedAttributeList'>ExtendedAttributeList</a>),
              which can control how a value passed as the argument will be handled in
              language bindings.
            </p>
            <p>
              The <a class='nt' href='#prod-Raises'>Raises</a> clause is used
              to declare the possible <a class='dfnref' href='#dfn-exception'>exceptions</a> that can be thrown when invoking
              the operation.
              Each scoped name in the 
              <a class='nt' href='#prod-Raises'>Raises</a> clause
              <span class='rfc2119'>MUST</span> resolve,
              with respect to the enclosing module
              of the interface on which the operation
              is defined, to an exception that
              has been declared previously.
            </p>
            <p>
              If an <a class='dfnref' href='#dfn-operation'>operation</a>
              defined on an <a class='dfnref' href='#dfn-interface'>interface</a>
              has an <a class='dfnref' href='#dfn-identifier'>identifier</a>
              that is the same as the identifier of another operation on that
              interface, then the operation is said to be
              <dfn id='dfn-overloaded'>overloaded</dfn>.  When the identifier
              of an overloaded operation is used to invoke one of the
              operations on an object that implements the interface, the
              number and types of the arguments passed to the operation
              determine which of the overloaded operations is actually
              invoked.  There are some restrictions on the arguments that
              overloaded operations can be specified to take, and in
              order to describe these restrictions, the notion of an
              <em>effective overload set</em> is used.
            </p>
            <p>
              An <dfn id='dfn-effective-overload-set'>effective overload set</dfn>
              for a given 
              <a class='dfnref' href='#dfn-identifier'>identifier</a>
              and <a class='dfnref' href='#dfn-interface'>interface</a> represents
              the allowable invocations of operations or constructors
              (specified with <a class='xattr' href='#Constructor'>[Constructor]</a>
              and <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>)
              that have the specified identifier on that interface.  The
              set is used to determine whether there are ambiguities in the 
              overloaded operations or constructors specified on the interface.
              The effective overload set is stated to be either
              “for operations” or “for constructors”, to distinguish between
              these two uses.
            </p>
            <p>
              The elements of an effective overload set are pairs of the form
              &lt;<var>f</var>, <var>types</var>>.  If the effective overload
              set is for operations, then <var>f</var> is an operation,
              and if it is for constructors, then <var>f</var> is an
              extended attribute.  In either case, <var>types</var> is a list
              of IDL types.
              Each pair represents an allowable invocation of the operation
              or constructor with an argument value list of the given types.
              Due to the use of optional arguments and variadic operations 
              and constructors (see the definitions of
              <a class='xattr' href='#Optional'>[Optional]</a> and
              <a class='xattr' href='#Variadic'>[Variadic]</a>), there may
              be multiple entries in an effective overload set identifying
              the same operation or constructor.
            </p>
            <p>
              The effective overload set for identifier <var>A</var> and
              interface <var>X</var> is derived as follows.  Whenever
              an argument of an extended attribute is mentioned, it is
              referring to an argument of the extended attribute’s
              <a class='dfnref' href='#dfn-xattr-named-argument-list'>named argument list</a>.
            </p>
            <ol class='algorithm'>
              <li>Initialize <var>S</var> to ∅.</li>
              <li>Let <var>F</var> be a set with elements as follows, according to the kind of effective overload set:
                <dl class='switch'>
                  <dt>For operations</dt>
                  <dd>
                    The elements of <var>F</var> are the operations with
                    identifier <var>A</var> defined on interface <var>I</var>.
                  </dd>
                  <dt>For constructors</dt>
                  <dd>
                    The elements of <var>F</var> are the
                    <a class='nt' href='#NamedConstructor'>[NamedConstructor]</a>
                    extended attributes on interface <var>I</var> whose
                    <a class='dfnref' href='#dfn-xattr-named-argument-list'>named argument lists’</a>
                    identifiers are <var>A</var>.  If <var>A</var> is the same as the identifier of
                    interface <var>I</var>, then <var>F</var> also includes the
                    <a class='nt' href='#Constructor'>[Constructor]</a> extended
                    attributes on <var>I</var>.
                  </dd>
                </dl>
              </li>
              <li>Let <var>m</var> be the maximum number of arguments the operations or constructor extended attributes in <var>F</var> are declared to take.</li>
              <li>For each operation or extended attribute <var>X</var> in <var>F</var>:
                <ol class='algorithm'>
                  <li>Let <var>n</var> be the number of arguments <var>X</var> is declared to take.</li>
                  <li>Let <var>t</var><sub>0‥<var>n</var>−1</sub> be the types of the arguments <var>X</var> is defined to take.</li>
                  <li>Add to <var>S</var> the pair &lt;<var>X</var>, <var>t</var><sub>0‥<var>n</var>−1</sub>>.</li>
                  <li>If <var>n</var> > 0 and the final argument of <var>X</var> is annotated with the <a class='xattr' href='#Variadic'>[Variadic]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>, then:
                    <ol class='algorithm'>
                      <li>Add to <var>S</var> the pair &lt;<var>X</var>, <var>t</var><sub>0‥<var>n</var>−2</sub>>.</li>
                      <li>For every integer <var>i</var>, such that <var>n</var> ≤ <var>i</var> ≤ <var>m</var>−1:
                        <ol class='algorithm'>
                          <li>Let <var>u</var><sub>0‥<var>i</var></sub> be a list of types, where <var>u</var><sub>j</sub> = <var>t</var><sub>j</sub> (for <var>j</var> &lt; <var>n</var>) and <var>u</var><sub>j</sub> = <var>t</var><sub><var>n</var>−1</sub> (for <var>j</var> ≥ <var>n</var>).</li>
                          <li>Add to <var>S</var> the pair &lt;<var>X</var>, <var>u</var><sub>0‥<var>i</var></sub>>.</li>
                        </ol>
                      </li>
                    </ol>
                  </li>
                  <li>For every integer <var>i</var>, such that 0 &lt; <var>i</var> &lt; <var>n</var>:
                    <ol class='algorithm'>
                      <li>If argument <var>i</var> of <var>X</var> is annotated with the <a class='xattr' href='#Optional'>[Optional]</a> extended attribute, then add to <var>S</var> the pair &lt;<var>X</var>, <var>t</var><sub>0‥<var>i−1</var></sub>>.</li>
                    </ol>
                  </li>
                  <li>If <var>n</var> > 0 and the first argument of <var>X</var> is annotated with the <a class='xattr' href='#Optional'>[Optional]</a> extended attribute, then add to <var>S</var> the pair &lt;<var>X</var>, ()> (where “()” represents the empty list).</li>
                </ol>
              </li>
              <li>
                The effective overload set for identifier <var>A</var> and interface <var>X</var> is <var>S</var>.
              </li>
            </ol>
            <p>
              For each pair of entries in an
              <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
              at least one of the following <span class='rfc2119'>MUST</span> be true:
            </p>
            <ul>
              <li>the type list lengths of the two entries are different, or</li>
              <li>there is an index <var>i</var> such that the types in the two length lists at index <var>i</var> are <a class='dfnref' href='#dfn-distinguishable'>distinguishable</a>.</li>
            </ul>
            <p>
              Two types, <var>t</var> and <var>u</var>, are
              <dfn id='dfn-distinguishable'>distinguishable</dfn> if
              both are <a class='dfnref' href='#idl-interface'>objects implementing an interface</a>
              (where two different <a class='dfnref' href='#dfn-interface'>interfaces</a>
              are identified) or if one is an <a class='dfnref' href='#idl-interface'>object implementing an interface</a>
              and the other is a <a class='dfnref' href='#dfn-primitive-type'>primitive type</a>.
            </p>
            <div class='note'>
              <p>
                These restrictions on argument types reduce 
                the possibility of resolution ambiguity in
                <a class='dfnref' href='#dfn-overloaded'>overloaded</a> operations
                and constructors, but do not
                eliminate it.  In the ECMAScript language binding, the
                restrictions still can result in overloaded operation and constructor invocations
                that cannot be distinguished solely based on the values passed to
                the corresponding function.  For example, with the following
                <a class='dfnref' href='#dfn-interface'>interfaces</a>:
              </p>
              <x:codeblock language='idl'>interface A {
  // …
};

interface B {
  // …
};

interface C {
  void f(in A x);
  void f(in B x);
};</x:codeblock>
              <p>
                it is possible to pass an object that implements both <span class='idlvalue'>A</span>
                and <span class='idlvalue'>B</span> to <code>f</code>.  Similarly,
                passing <span class='esvalue'>null</span> to <code>f</code>
                would also be ambiguous.  Since the ECMAScript
                language binding provides no way to disambiguate such calls,
                the interface description will need to
                describe which operation is invoked in these cases.  (It is
                acceptable not to describe this if there is no observable
                difference in behavior for a particular choice of operation
                or constructor to disambiguate the call, or if no object will
                actually implement the two interfaces, for example.)
              </p>
            </div>
            <div class='example'>
              <p>
               For the following interface:
              </p>
              <x:codeblock language='idl'>interface A {
  /* f1 */ void f(in DOMString a);
  /* f2 */ void f(in DOMString a, in DOMString b, [Variadic] in float c);
  /* f3 */ void f([Optional] in long a, in DOMString b,
                  [Optional] in DOMString c, [Variadic] in float d);
};</x:codeblock>
              <p>
                the <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                for identifier <code>f</code> is:
              </p>
              <div class='set'>
                { &lt;f1, (DOMString)>,<br/>
                  &lt;f2, (DOMString, DOMString)>,<br/>
                  &lt;f2, (DOMString, DOMString, float)>,<br/>
                  &lt;f2, (DOMString, DOMString, float, float)>,<br/>
                  &lt;f3, ()>,<br/>
                  &lt;f3, (long, DOMString)>,<br/>
                  &lt;f3, (long, DOMString, DOMString)>,<br/>
                  &lt;f3, (long, DOMString, DOMString, float)> }
              </div>
              <p>
                There are thus no overloaded operation resolution ambiguities
                for the interface.
              </p>
            </div>
            <p>
              The following extended attributes
              are applicable to operations:
              <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>,
              <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>,
              <a class='xattr' href='#IndexGetter'>[IndexGetter]</a>,
              <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>,
              <a class='xattr' href='#NameCreator'>[NameCreator]</a>,
              <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>,
              <a class='xattr' href='#NameGetter'>[NameGetter]</a>,
              <a class='xattr' href='#NameSetter'>[NameSetter]</a>.
              <!--<a class='xattr' href='#Overloads'>[Overloads]</a>-->
            </p>
            <p>
              The following extended attributes are applicable to operation arguments:
              <a class='xattr' href='#Null'>[Null]</a>,
              <a class='xattr' href='#Optional'>[Optional]</a>,
              <a class='xattr' href='#Undefined'>[Undefined]</a>,
              <a class='xattr' href='#Variadic'>[Variadic]</a>.
            </p>

            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                demonstrates how <a class='dfnref' href='#dfn-operation'>operations</a>
                can be declared on an <a class='dfnref' href='#dfn-interface'>interface</a>:
              </p>
              <x:codeblock language='idl'>interface Dimensions {
  attribute unsigned long width;
  attribute unsigned long height;
};

exeption NoPointerDevice { };

interface Button {

  // An operation that takes no arguments, returns a boolean, and could possibly
  // raise an exception.
  boolean isMouseOver() raises (NoPointerDevice);

  // Overloaded operations.
  void setDimensions(in Dimensions size);
  void setDimensions(in unsigned long width, in unsigned long height);
};</x:codeblock>
            </div>

            <?productions grammar Operation ReturnType ArgumentList Arguments Argument Raises?>
          </div>
        </div>

        <div id='idl-exceptions' class='section'>
          <h3>Exceptions</h3>

          <p>
            An <dfn id='dfn-exception'>exception</dfn> is a definition that matches the
            <a class='nt' href='#prod-Exception'>Exception</a> non-terminal, and is used
            to declare a type of exception that can be thrown by implementations.
            The <a class='dfnref' href='#dfn-identifier'>identifier</a> of the exception
            is given by the <a class='nt' href='#prod-identifier'>identifier</a> terminal.
          </p>
          <p>
            Exceptions are different from <a class='dfnref' href='#dfn-interface'>interfaces</a>
            in that they can have only <dfn id='dfn-exception-member'>exception members</dfn> (matching
            <a class='nt' href='#prod-ExceptionMember'>ExceptionMember</a>) declared on them,
            rather than the three types of <a class='dfnref' href='#dfn-interface-member'>interface members</a>.
            An exception member’s type
            is given by the <a class='nt' href='#prod-DeclarationType'>DeclarationType</a>
            non-terminal of the <a class='nt' href='#prod-ExceptionMember'>ExceptionMember</a>.
            If the <a class='nt' href='#prod-DeclarationType'>DeclarationType</a>
            is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>, then it
            <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-resolve'>resolve</a>,
            with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
            of the exception on which the exception member is declared, to an
            interface,
            <a class='dfnref' href='#dfn-typedef'>typedef</a> or
            <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> that has been
            <a class='dfnref' href='#dfn-declared-previously'>declared previously</a>.
          </p>
          <p>
            The identifier of an exception member <span class='rfc2119'>MUST</span> be
            unique within the exception on which it is defined.
          </p>
          <p>
            Exception members are
            similar to <a class='dfnref' href='#dfn-attribute'>attributes</a> in that they
            will correspond to attributes of the same name and type on exception objects
            that are thrown by implementations.
          </p>
          <p>
            The following extended attributes are applicable to exceptions:
            <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>.
          </p>
          <p>
            No <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            are applicable to exception members.
          </p>
          <div class='example'>
            <p>
              See <a href='#idl-attributes'>section <?sref idl-attributes?></a>
              <?sdir idl-attributes?> for an example of an
              <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> that
              declares <a class='dfnref' href='#dfn-exception'>exceptions</a>.
            </p>
          </div>
          <?productions grammar Exception ExceptionMembers ExceptionMember?>
        </div>

        <div id='idl-typedefs' class='section'>
          <h3>Typedefs</h3>

          <p>
            A <dfn id='dfn-typedef'>typedef</dfn> is a definition that matches the
            <a class='nt' href='#prod-Typedef'>Typedef</a> non-terminal, and is
            used to declare a new name for a type.
          </p>
          <p>
            The type is given by the <a class='nt' href='#prod-Type'>Type</a>
            non-terminal, and the new name for the type is
            the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the
            typedef, as given by the <a class='nt' href='#prod-identifier'>identifier</a>
            terminal.
          </p>
          <p>
            Using a typedef is the only way to utilize the
            <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> type, since
            <a class='dfnref' href='#dfn-interface-member'>interface members</a>,
            <a class='dfnref' href='#dfn-exception-member'>exception members</a>
            and <a class='dfnref' href='#dfn-operation'>operation</a>
            <a class='dfnref' href='#dfn-return-type'>return types</a> and
            argument types must be specified with a
            <a class='nt' href='#prod-DeclarationType'>DeclarationType</a>,
            which does not allow a <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>.
          </p>
          <p>
            For backwards compatibility with already published
            <a class='dfnref' href='#dfn-idl-fragment'>IDL fragments</a>, a
            typedef definition whose derivation has
            <span class='terminal'>"DOMString"</span> as its third-last or
            second-last terminal symbol is ignored and does not declare a new
            name for a type.  This allows definitions such as the following to
            be ignored:
          </p>
          <x:codeblock language='idl'>typedef dom::DOMString DOMString;</x:codeblock>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates the use of <a class='dfnref' href='#dfn-typedef'>typedefs</a>
              for two purposes: to allow the use of a short
              <a class='dfnref' href='#dfn-identifier'>identifier</a> instead of a long
              <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>, and to give
              a name to a sequence type so that it can be used as an
              <a class='dfnref' href='#dfn-operation'>operation</a> argument type.
            </p>
            <x:codeblock language='idl'><![CDATA[module gfx {
  module geom {
    module geom2d {

      interface Point {
        attribute float x;
        attribute float y;
      };

      typedef sequence<Point> PointSequence;

      interface Rect {
        attribute Point topleft;
        attribute Point bottomright;
      };
    };
  };
};

module gui {

  typedef gfx::geom::geom2d::Point Point;
  typedef gfx::geom::geom2d::PointSequence PointSequence;
  typedef gfx::geom::geom2d::Rect Rect;

  interface Widget {

    readonly attribute Rect bounds;

    boolean pointWithinBounds(in Point p);
    boolean allPointsWithinBounds(in PointSequence ps);
  };
};]]></x:codeblock>
          </div>

          <?productions grammar Typedef TypedefRest?>
        </div>

        <div id='idl-valuetypes' class='section'>
          <h3>Valuetypes</h3>

          <p>
            Valuetypes in OMG IDL are used to define types similar to structs in C.
            That is, they define composite types that can have zero or more
            member variables that are passed by value.  OMG IDL valuetypes have the
            additional feature of allowing <span class='idlvalue'>null</span> to
            be passed in place of an object with those member variables.  An
            OMG IDL boxed valuetype is a special case, where the valuetype has
            a single member.
          </p>
          <p>
            The IDL defined in this specification supports only
            <dfn id='dfn-boxed-valuetype'>boxed valuetypes</dfn>, which are definitions
            that match the <a class='nt' href='#prod-Valuetype'>Valuetype</a> non-terminal.
            The <a class='dfnref' href='#dfn-identifier'>identifier</a> of the valuetype
            is given by the <a class='nt' href='#prod-identifier'>identifier</a> terminal,
            and the type being boxed is given by the
            <a class='nt' href='#prod-BoxedType'>BoxedType</a> non-terminal.  If the
            <a class='nt' href='#prod-BoxedType'>BoxedType</a> is a
            <a class='nt' href='#prod-ScopedName'>ScopedName</a>, then it
            <span class='rfc2119'>MUST</span> refer to a type that does not allow
            <span class='idlvalue'>null</span> as a value (i.e.,
            <a class='idltype' href='#idl-boolean'>boolean</a>,
            <a class='idltype' href='#idl-octet'>octet</a>,
            <a class='idltype' href='#idl-short'>short</a>,
            <a class='idltype' href='#idl-unsigned-short'>unsigned short</a>,
            <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>,
            <a class='idltype' href='#idl-long-long'>long long</a>,
            <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a>,
            <a class='idltype' href='#idl-float'>float</a> or
            <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>.
          </p>
          <p>
            Boxed valuetypes are essentially used just for allowing a <span class='idlvalue'>null</span>
            value to be used where normally a non-null value could only be used.
          </p>
          <p>
            For backwards compatibility with already published IDL fragments, a
            valuetype definition whose derivation has
            <span class='terminal'>"DOMString"</span> as its second terminal symbol
            is ignored and does not define a new boxed valuetype with the identifier "DOMString".
            This allows the following definition to be included in an IDL fragment and ignored:
          </p>
          <x:codeblock language='idl'>valuetype DOMString sequence&lt;unsigned short>;</x:codeblock>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates the use of <a class='dfnref' href='#dfn-valuetype'>valuetypes</a>:
            </p>
            <x:codeblock language='idl'>valuetype OptionalFloat float;

interface Person {

  // This attribute can be a float or null.  In this case, null might be used
  // to represent the case where the height of the person is unknown.
  readonly attribute OptionalFloat height;
};</x:codeblock>
          </div>

          <?productions grammar Valuetype ValuetypeRest?>
        </div>

        <div id='idl-types' class='section'>
          <h3>Types</h3>

          <p>
            This section lists the types supported by the IDL, the set of values
            each type correspond to, and how <a class='dfnref' href='#dfn-constant'>constants</a>
            of that type are represented.
          </p>
          <p>
            The following types are known as <dfn id='dfn-primitive-type'>primitive types</dfn>:
            <a class='idltype' href='#idl-boolean'>boolean</a>,
            <a class='idltype' href='#idl-octet'>octet</a>,
            <a class='idltype' href='#idl-short'>short</a>,
            <a class='idltype' href='#idl-unsigned-short'>unsigned short</a>,
            <a class='idltype' href='#idl-long'>long</a>,
            <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>,
            <a class='idltype' href='#idl-long-long'>long long</a>,
            <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a>,
            <a class='idltype' href='#idl-float'>float</a> and
            <a class='idltype' href='#idl-DOMString'>DOMString</a>.
          </p>

          <?productions grammar DeclarationType BoxedType Type UnsignedIntegerType IntegerType OptionalLong?>

          <div id='idl-any' class='section'>
            <h4>any</h4>

            <p>
              The <a class='idltype' href='#idl-any'>any</a> type is the union of all other possible types.
            </p>
          </div>

          <div id='idl-boolean' class='section'>
            <h4>boolean</h4>

            <p>
              The <a class='idltype' href='#idl-boolean'>boolean</a> type has two values:
              <span class='idlvalue'>true</span> and <span class='idlvalue'>false</span>.
            </p>
            <p>
              <a class='idltype' href='#idl-boolean'>boolean</a> constant values in IDL are
              represented with the <span class='terminal'>"TRUE"</span> and
              <span class='terminal'>"FALSE"</span> terminals.
            </p>
          </div>

          <div id='idl-octet' class='section'>
            <h4>octet</h4>

            <p>
              The <a class='idltype' href='#idl-octet'>octet</a> type is an unsigned integer
              type that has values in the range [0, 255].
            </p>
            <p>
              <a class='idltype' href='#idl-octet'>octet</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
          </div>

          <div id='idl-short' class='section'>
            <h4>short</h4>

            <p>
              The <a class='idltype' href='#idl-short'>short</a> type is a signed integer
              type that has values in the range [−32768, 32767].
            </p>
            <p>
              <a class='idltype' href='#idl-short'>short</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
          </div>

          <div id='idl-unsigned-short' class='section'>
            <h4>unsigned short</h4>

            <p>
              The <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> type is an unsigned integer
              type that has values in the range [0, 65535].
            </p>
            <p>
              <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
          </div>

          <div id='idl-long' class='section'>
            <h4>long</h4>

            <p>
              The <a class='idltype' href='#idl-long'>long</a> type is a signed integer
              type that has values in the range [−2147483648, 2147483647].
            </p>
            <p>
              <a class='idltype' href='#idl-long'>long</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
          </div>

          <div id='idl-unsigned-long' class='section'>
            <h4>unsigned long</h4>

            <p>
              The <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> type is an unsigned integer
              type that has values in the range [0, 4294967295].
            </p>
            <p>
              <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
          </div>

          <div id='idl-long-long' class='section'>
            <h4>long long</h4>

            <p>
              The <a class='idltype' href='#idl-long-long'>long long</a> type is a signed integer
              type that has values in the range [−9223372036854775808, 9223372036854775807].
            </p>
            <p>
              <a class='idltype' href='#idl-long-long'>long long</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
          </div>

          <div id='idl-unsigned-long-long' class='section'>
            <h4>unsigned long long</h4>

            <p>
              The <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> type is an unsigned integer
              type that has values in the range [0, 18446744073709551615].
            </p>
            <p>
              <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
          </div>

          <div id='idl-float' class='section'>
            <h4>float</h4>

            <p>
              The <a class='idltype' href='#idl-float'>float</a> type is a floating point numeric
              type that corresponds to the set of possible single-precision 32 bit
              IEEE 754 floating point numbers.  <a href='#ref-IEEE-754'>[IEEE-754]</a>
            </p>
            <p>
              <a class='idltype' href='#idl-float'>float</a> constant values in IDL are
              represented with <a class='nt' href='#prod-float'>float</a>
              terminals.
            </p>
          </div>

          <div id='idl-DOMString' class='section'>
            <h4>DOMString</h4>

            <p>
              The <a class='idltype' href='#idl-DOMString'>DOMString</a> type
              corresponds to the set of all possible sequences of
              16 bit unsigned integer code units (to be interpreted as UTF-16 encoded strings <a href='#ref-RFC2781'>[RFC2781]</a>)
              plus the special value <span class='idlvalue'>null</span>, which
              indicates no string.  While <span class='idltype'>DOMString</span>
              is defined to be an OMG IDL boxed
              <a class='idltype' href='#idl-sequence'>sequence&lt;unsigned short></a>
              valuetype in <cite><a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-C74D1578'>DOM Level 3 Core</a></cite>
              (<a href='#ref-DOM3CORE'>[DOM3CORE]</a>, section 1.2.1),
              this document defines it to be an intrinsic type so as to avoid
              special casing that sequence type in various situations where a
              string is required.
            </p>
            <p>
              There is no way to represent a
              <a class='idltype' href='#idl-DOMString'>DOMString</a> constant
              value in IDL.
            </p>
          </div>

          <div id='idl-sequence' class='section'>
            <h4>sequence&lt;<var>T</var>></h4>

            <p>
              The <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>
              type is a parameterized type whose values are (possibly zero-length) sequences of
              values of type <var>T</var>.  Sequences can have an arbitrary length
              that is immutable.  However, sequence element values are mutable.
            </p>
            <!-- XXX Make T resolve to a type eventually, if it is a scoped name. -->
            <div class='ednote'>
              <p>
                Should sequences really be immutable?  Is there any advantage to disallowing
                resizing sequences here, rather than selectively by the interface designer?
                The sequence section in the ECMAScript bindings below assume it is mutable.
              </p>
            </div>
            <p>
              There is no way to represent a sequence constant value in IDL.
            </p>
          </div>

          <div id='idl-Object' class='section'>
            <h4>Object</h4>

            <p>
              The <a class='idltype' href='#idl-Object'>Object</a> type corresponds to the set of
              all possible object references, plus the special value <span class='idlvalue'>null</span>,
              which indicates no object reference.
            </p>
            <p>
              There is no way to represent an <a class='idltype' href='#idl-Object'>Object</a>
              constant value in IDL.
            </p>
          </div>

          <div id='idl-interface' class='section'>
            <h4>Object implementing an interface</h4>

            <p>
              A <a class='dfnref' href='#dfn-scoped-name'>scoped name</a> that
              <a class='dfnref' href='#dfn-resolve'>resolves</a> to an
              <a class='dfnref' href='#dfn-interface'>interface</a> is used to refer to
              a type that corresponds to the set of all possible references to objects that
              implement that interface, plus the special value <span class='idlvalue'>null</span>,
              which indicates no object reference.
            </p>
            <p>
              There is no way to represent an <a class='idltype' href='#idl-Object'>Object</a>
              constant value in IDL.
            </p>
          </div>

          <div id='idl-boxed-valuetype' class='section'>
            <h4>Boxed valuetype</h4>

            <p>
              A <a class='dfnref' href='#dfn-scoped-name'>scoped name</a> that
              <a class='dfnref' href='#dfn-resolve'>resolves</a> to a
              <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> is used to refer to
              a type that corresponds to the set of values for the type being boxed,
              plus the special value <span class='idlvalue'>null</span>, which indicates no value.
            </p>
            <p>
              There is no way to represent a boxed valuetype constant value in IDL.
            </p>
          </div>
        </div>

        <div id='idl-extended-attributes' class='section'>
          <h3>Extended attributes</h3>

          <p>
            An <dfn id='dfn-extended-attribute'>extended attribute</dfn> is an annotation
            that can appear on
            <!--a class='dfnref' href='#dfn-definition'-->definitions<!--/a-->,
            <a class='dfnref' href='#dfn-interface-member'>interface members</a>,
            <a class='dfnref' href='#dfn-exception-member'>exception members</a> and
            <a class='dfnref' href='#dfn-operation'>operation</a> arguments, and
            are used to control how language bindings will handle those constructs.
            Extended attributes are specified with an
            <a class='nt' href='#prod-ExtendedAttributeList'>ExtendedAttributeList</a>,
            which is a square bracket enclosed, comma separated list of
            <a class='nt' href='#prod-ExtendedAttribute'>ExtendedAttribute</a>s.
          </p>
          <p>
            The <a class='nt' href='#prod-ExtendedAttribute'>ExtendedAttribute</a>
            non-terminal matches nearly any sequence of tokens, however the
            <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            defined in this document only accept a more restricted syntax.
            Any extended attribute encountered in an
            <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> is
            matched against the following five non-terminals to determine
            what form (or forms) it is in:
          </p>
          <table class='vert'>
            <tr>
              <th>Non-terminal</th>
              <th>Form</th>
              <th>Example</th>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeNoArg'>ExtendedAttributeNoArg</a>
              </td>
              <td>
                <dfn id='dfn-xattr-no-argument'>takes no argument</dfn>
              </td>
              <td>
                <code>[Optional]</code>
              </td>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeArgList'>ExtendedAttributeArgList</a>
              </td>
              <td>
                <dfn id='dfn-xattr-argument-list'>takes an argument list</dfn>
              </td>
              <td>
                <code>[Constructor(in float x, in float y)]</code>
              </td>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeNamedArgList'>ExtendedAttributeNamedArgList</a>
              </td>
              <td>
                <dfn id='dfn-xattr-named-argument-list'>takes a named argument list</dfn>
              </td>
              <td>
                <code>[NamedConstructor=Image(in DOMString src)]</code>
              </td>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeIdent'>ExtendedAttributeIdent</a>
              </td>
              <td>
                <dfn id='dfn-xattr-identifier'>takes an identifier</dfn>
              </td>
              <td>
                <code>[Stringifies=name]</code>
              </td>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeScopedName'>ExtendedAttributeScopedName</a>
              </td>
              <td>
                <dfn id='dfn-xattr-scoped-name'>takes a scoped name</dfn>
              </td>
              <td>
                <code>[Prefix=org::example]</code>
              </td>
            </tr>
          </table>

          <p>
            This specification defines a number of extended attributes that
            are applicable to all language bindings, which are described in the
            sub-sections below.  In addition, ECMAScript language binding
            specific extended attributes are defined in
            <a href='#es-extended-attributes'>section <?sref es-extended-attributes?></a>.
            Each extended attribute definition will state which of the above
            five forms are allowed.  Although
            <a class='nt' href='#prod-ExtendedAttributeIdent'>ExtendedAttributeIdent</a> and
            <a class='nt' href='#prod-ExtendedAttributeScopedName'>ExtendedAttributeScopedName</a>
            are ambiguous, no extended attribute defined in this document
            can take both of those forms.
          </p>

          <?productions grammar ExtendedAttributeList ExtendedAttribute ExtendedAttributes ExtendedAttributeRest ExtendedAttributeInner Other OtherOrComma ExtendedAttributeNoArg ExtendedAttributeArgList ExtendedAttributeIdent ExtendedAttributeScopedName ExtendedAttributeNamedArgList?>

          <div id='Callable' class='section'>
            <h4>[Callable]</h4>

            <p>
              If the <a class='xattr' href='#Callable'>[Callable]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates that objects that implement this interface can be called
              as if they were a function, for languages that support such
              object calling.
            </p>
            <p>
              The <a class='xattr' href='#Callable'>[Callable]</a>
              extended attribute <span class='rfc2119'>MUST</span> take
              <!-- <a class='dfnref' href='#dfn-xattr-no-argument'>no argument</a> -->
              <a class='dfnref' href='#dfn-xattr-identifier'>an identifier</a>. <!-- or
              <a class='dfnref' href='#dfn-xattr-argument-list'>an argument list</a>.-->
              The <a class='dfnref' href='#dfn-identifier'>identifier</a>
              <span class='rfc2119'>MUST</span> be the identifier of a
              <a class='dfnref' href='#dfn-overloaded'>non-overloaded</a>
              <a class='dfnref' href='#dfn-operation'>operation</a> defined
              on the <a class='dfnref' href='#dfn-interface'>interface</a>.
              Calling the object as a function will result in the same
              behavior as invoking the operation.
            </p>
            <p>
              If an object implements more than one
              <a class='xattr' href='#Callable'>[Callable]</a>-annotated
              <a class='dfnref' href='#dfn-interface'>interface</a>,
              then it is undefined which (if any) <a class='dfnref' href='#dfn-operation'>operation</a>
              determines the behavior when calling the object as a function.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines an <a class='dfnref' href='#dfn-interface'>interface</a>
                with a <a class='xattr' href='#Callable'>[Callable]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
              </p>
              <x:codeblock language='idl'>[Callable=compute]
interface NumberQuadrupler {
  // This operation simply returns four times the given number x.
  float compute(in float x);
};</x:codeblock>
              <p>
                An ECMAScript implementation supporting this interface would
                allow a host object that implements <span class='idltype'>NumberQuadrupler</span>
                to be called as a function:
              </p>
              <x:codeblock language='es'>
var f = getNumberQuadrupler();  // Obtain an instance of NumberQuadrupler.

f.compute(3);                   // This evaluates to 12.
f(3);                           // This also evaluates to 12.</x:codeblock>
            </div>
          </div>

          <div id='Constructor' class='section'>
            <h4>[Constructor]</h4>

            <p>
              If the <a class='xattr' href='#Constructor'>[Constructor]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>, it indicates that
              there will be a way to construct objects that implement this interface.
              How such objects can be constructed is specific to the language binding.
              Multiple <a class='xattr' href='#Constructor'>[Constructor]</a> extended
              attributes may appear on a given interface.
            </p>
            <p>
              The <a class='xattr' href='#Constructor'>[Constructor]</a>
              extended attribute <span class='rfc2119'>MUST</span> either
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a> or
              <a class='dfnref' href='#dfn-xattr-argument-list'>take an argument list</a>.
              The bare form, <code>[Constructor]</code>, has the same meaning as
              using an empty argument list, <code>[Constructor()]</code>.  For each
              <a class='xattr' href='#Constructor'>[Constructor]</a> extended attribute
              on the interface, there will be a way to construct an object that implements
              the interface by passing the specified arguments.
            </p>
            <div class='example'>
              <p>
                The following IDL defines two interfaces.  The second has the
                <a class='xattr' href='#Constructor'>[Constructor]</a> extended
                attribute, while the first does not.
              </p>
              <x:codeblock language='idl'>interface NodeList {
  Node item(in unsigned long index);
  readonly attribute unsigned long length;
};

[Constructor,
 Constructor(in float radius)]
interface Circle {
  attribute float r;
  attribute float cx;
  attribute float cy;
  readonly attribute float circumference;
};</x:codeblock>
              <p>
                An ECMAScript implementation supporting these interfaces would
                have a <span class='prop'>[[Construct]]</span> property on the
                <span class='idltype'>Circle</span> interface object which would
                return a new object that implements the interface.  It would take
                either zero or one argument.  The
                <span class='idltype'>NodeList</span> interface object would not
                have a <span class='prop'>[[Construct]]</span> property.
              </p>
              <x:codeblock language='es'>var x = new Circle();      // The uses the zero-argument constructor to create a
                           // reference to a host object that implements the
                           // Circle interface.

var y = new Circle(1.25);  // This also creates a Circle object, this time using
                           // the one-argument constructor.

var z = new NodeList();    // This would throw a TypeError, since no
                           // [Constructor] is declared.</x:codeblock>
            </div>
          </div>

          <div id='ExceptionConsts' class='section'>
            <h4>[ExceptionConsts]</h4>

            <p>
              If the <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-module'>module</a>, it indicates that any
              <a class='dfnref' href='#dfn-constant'>constants</a> declared on that module are intended to
              exist on the language construct that corresponds to the <a class='dfnref' href='#dfn-exception'>exception</a>
              given by the extended attribute’s argument (for languages that
              support constants on exceptions).  Exactly how these constants
              are exposed is language binding specific.
            </p>
            <p>
              The <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a> extended attribute
              <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a>
              that is the <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of an exception defined in that module, on which the constants declared at the
              module scope should live.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> declares an exception and a number of constants
                at the module scope:
              </p>
              <x:codeblock language='idl'>[ExceptionConsts=FileIOException]
module fileio {

  exception FileIOException {
    unsigned short code;
  };

  const unsigned short FILE_NOT_FOUND = 1;
  const unsigned short READ_ERROR = 2;
  const unsigned short WRITE_ERROR = 3;
};</x:codeblock>
              <p>
                In the ECMAScript binding, this will result in properties on the
                <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a> for each of the constants:
              </p>
              <x:codeblock language='es'>typeof FileIOException;          // evaluates to "object"
FileIOException.FILE_NOT_FOUND;  // evaluates to 1</x:codeblock>
            </div>
          </div>

          <div id='ImplementedOn' class='section'>
            <h4>[ImplementedOn]</h4>

            <p>
              If the <a class='xattr' href='#ImplementedOn'>[ImplementedOn]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>, it
              indicates that the interface is implemented by all objects that
              implement certain other interfaces.
            </p>
            <p>
              The <a class='xattr' href='#ImplementedOn'>[ImplementedOn]</a>
              extended attribute <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-xattr-scoped-name'>take a scoped name</a>,
              where the <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-resolve'>resolve</a>,
              with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              of the <a class='dfnref' href='#dfn-interface'>interface</a> that it appears on, to an
              interface that has been <a class='dfnref' href='#dfn-declared-previously'>declared previously</a>.
              Any object that implements the interfaces identified by
              the scoped name argument will implement the interface the
              <a class='xattr' href='#ImplementedOn'>[ImplementedOn]</a>
              extended attribute appears on.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines two interfaces, and uses the <a class='xattr' href='#ImplementedOn'>[ImplementedOn]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                to require that any object implementing the first must also
                implement the second.
              </p>
              <x:codeblock language='idl'>interface Node {
  // …
};

[ImplementedOn=Node]
interface EventTarget {
  void addEventListener(in DOMString type, in EventListener l, in bool capture);
  // …
};</x:codeblock>
              <p>
                An ECMAScript implementation would thus have an
                <span class='prop'>addEventListener</span> property in the
                prototype chain of every <span class='estype'>Node</span>:
              </p>
              <x:codeblock language='es'>var n = getNode();          // Obtain an instance of Node.
typeof n.addEventListener;  // Evaluates to "function".</x:codeblock>
              <p>
                Similarly, in Java, any <span class='javatype'>Node</span>
                object could be cast to <span class='javatype'>EventTarget</span>:
              </p>
              <x:codeblock language='java'>Node n = getNode();               // Obtain an instance of Node.
EventTarget et = (EventTarget) n; // This should never throw ClassCastException.</x:codeblock>
            </div>
          </div>

          <div id='indexed-property-xattrs' class='section'>
            <h4><span id='IndexCreator'>[IndexCreator]</span>, <span id='IndexDeleter'>[IndexDeleter]</span>, <span id='IndexGetter'>[IndexGetter]</span> and <span id='IndexSetter'>[IndexSetter]</span></h4>

            <p>
              The <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>,
              <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>,
              <a class='xattr' href='#IndexGetter'>[IndexGetter]</a> and
              <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              are used to specify that objects implementing an
              <a class='dfnref' href='#dfn-interface'>interface</a>
              can be indexed with an <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>
              to (depending on which extended attribute is used) get, set,
              create or delete an indexed property,
              if the particular language binding supports indexing objects in
              this manner.  Such an interface is said to
              <dfn id='dfn-support-indexed-properties'>support indexed properties</dfn>.
            </p>
            <p>
              The four indexed property
              <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              <span class='rfc2119'>MUST</span> all
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <p>
              If an object implements more than one
              <a class='dfnref' href='#dfn-interface'>interface</a> with a given
              indexed property <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
              then it is undefined which (if any) indexing behavior is
              invoked.
            </p>
            <p>
              If an <a class='dfnref' href='#dfn-interface'>interface</a>
              <a class='dfnref' href='#dfn-support-indexed-properties'>supports indexed properties</a>,
              then the interface definition <span class='rfc2119'>MUST</span>
              be accompanied by a description of what indices the
              object can be indexed with at any given time.  These indices
              are called the
              <dfn id='dfn-indices-of-the-supported-indexed-properties'>indices of the supported indexed properties</dfn>.
            </p>
            <p>
              If any of <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>,
              <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a> or
              <a class='xattr' href='#IndexSetter'>[IndexSetter]</a> are used,
              then <a class='xattr' href='#IndexGetter'>[IndexGetter]</a>
              <span class='rfc2119'>MUST</span> appear on the
              <a class='dfnref' href='#dfn-interface'>interface</a> or one of
              its <a class='dfnref' href='#dfn-operation'>operations</a>.
            </p>
            <p>
              The <a class='xattr' href='#IndexGetter'>[IndexGetter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              indicates that an object implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> can
              be indexed to retrieve the value of an existing indexed property.
              If it appears on the interface itself, then the interface
              definition <span class='rfc2119'>MUST</span> be accompanied
              by a description of what value will be returned when the
              object is indexed for property retrieval.
              If instead the extended
              attribute appears on an <a class='dfnref' href='#dfn-operation'>operation</a>,
              then the value returned will be the value that is returned
              by invoking the operation, passing the index as its only argument.
              Such an operation <span class='rfc2119'>MUST</span> be declared to
              take a single argument of type <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>.
            </p>
            <p>
              The <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              indicates that an object implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> can
              be indexed to set the value of an existing indexed property.
              If it appears on the interface itself, then the interface
              definition <span class='rfc2119'>MUST</span> be accompanied
              by a description of what behavior occurs when the object
              is indexed for property modification.  If instead the extended
              attribute appears on an <a class='dfnref' href='#dfn-operation'>operation</a>,
              then the behavior that occurs is the invocation of that
              operation, passing the index as the first argument and the
              new indexed property value as the second.
              Such an operation <span class='rfc2119'>MUST</span> be declared to
              take a two arguments, the first of type <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>.
            </p>
            <p>
              The <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              indicates that an object implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> can
              be indexed to create a new indexed property with a particular value.
              If it appears on the interface itself, then the interface
              definition <span class='rfc2119'>MUST</span> be accompanied
              by a description of what behavior occurs when the object
              is indexed for property creation.  If instead the extended
              attribute appears on an <a class='dfnref' href='#dfn-operation'>operation</a>,
              then the behavior that occurs is the invocation of that
              operation, passing the new property’s index as the first argument and the
              value as the second.
              Such an operation <span class='rfc2119'>MUST</span> be declared to
              take a two arguments, the first of type <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>.
            </p>
            <p>
              The <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              indicates that an object implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> can
              be indexed to delete an existing indexed property.
              If it appears on the interface itself, then the interface
              definition <span class='rfc2119'>MUST</span> be accompanied
              by a description of what behavior occurs when the object
              is indexed for property deletion.  If instead the extended
              attribute appears on an <a class='dfnref' href='#dfn-operation'>operation</a>,
              then the behavior that occurs is the invocation of that
              operation, passing the property’s index as the only argument.
              Such an operation <span class='rfc2119'>MUST</span> be declared to
              take a single argument of type <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface
                <span class='idltype'>OrderedMap</span> which allows
                retrieving and setting values by name or by index number:
              </p>
              <x:codeblock language='idl'>interface OrderedMap {
  readonly attribute unsigned long size;

  [IndexGetter] any getByIndex(in unsigned long index);
  [IndexSetter] void setByIndex(in unsigned long index, in any value);
  [IndexDeleter] void removeByIndex(in unsigned long index);

  [NameGetter] any get(in DOMString name);
  [NameSetter, NameCreator] void set(in DOMString name, in any value);
  [NameDeleter] void remove(in DOMString name);
};</x:codeblock>
              <p>
                Since none of the name or index property set
                <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
                are placed directly on the interface, the only additional prose
                that is necessary is that which describes what keys those sets
                have.  Assuming that the <code>get()</code> operation is
                defined to return <span class='idlvalue'>null</span> if an
                attempt is made to look up a non-existing entry in the
                <span class='idlvalue'>OrderedMap</span>, then the following
                two sentences would suffice:
              </p>
              <blockquote>
                <p>
                  Objects implementing <span class='idlvalue'>OrderedMap</span>
                  support index properties with indices in the range
                  0 ≤ <var>key</var> &lt; <code>OrderedMap::length</code>.
                </p>
                <p>
                  Such objects also support a named property for every name that,
                  if passed to <code>get()</code>, would return a non-null value.
                </p>
              </blockquote>
              <p>
                As described in <a href='#host-objects'>section <?sref indexed-and-named-properties?></a>,
                an ECMAScript implementation would create
                properties on a host object implementing
                <span class='idltype'>OrderedMap</span> that correspond to
                entries in both the named and indexed property sets.
                These properties can then be used to interact
                with the object in the same way as invoking the object’s
                methods, as demonstrated below:
              </p>
              <x:codeblock language='es'>// Assume map is a host object implementing the OrderedMap interface.
var map = getOrderedMap();
var x, y;

x = map[0];       // If map.length > 0, then this is equivalent to:
                  //
                  //   x = map.getByIndex(0)
                  //
                  // since a property named "0" will have been placed on map.
                  // Otherwise, x will be set to undefined, since there will be
                  // no property named "0" on map.

map[1] = false;   // If map.length > 1, then this will set the property named
                  // "1" on map to false, and then will do the equivalent of:
                  //
                  //   map.setByIndex(1, false)
                  //
                  // Otherwise, if map.length ≤ 1, then it will set the
                  // property but have no other effect (since an [IndexCreator]
                  // was not specified).

y = map.apple;    // If there exists a named property named "apple", then this
                  // will be equivalent to:
                  //
                  //   y = map.get('apple')
                  //
                  // since a property named "apple" will have been placed on
                  // map.  Otherwise, y will be set to undefined, since there
                  // will be no property named "apple" on map.

map.berry = 123;  // Regardless of whether there exists a named property named
                  // "banana", this will set the "berry" property to 123, and
                  // then do the equivalent of:
                  // 
                  //   map.set('berry', 123)

delete map.cake;  // If a named property named "cake" exists, then the "cake"
                  // property will be deleted, and then the equivalent to the
                  // following will be performed:
                  //
                  //   map.remove("cake")
</x:codeblock>
            </div>
          </div>

          <div id='named-property-xattrs' class='section'>
            <h4><span id='NameCreator'>[NameCreator]</span>, <span id='NameDeleter'>[NameDeleter]</span>, <span id='NameGetter'>[NameGetter]</span> and <span id='NameSetter'>[NameSetter]</span></h4>

            <p>
              The <a class='xattr' href='#NameCreator'>[NameCreator]</a>,
              <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>,
              <a class='xattr' href='#NameGetter'>[NameGetter]</a> and
              <a class='xattr' href='#NameSetter'>[NameSetter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              are used to specify that objects implementing an
              <a class='dfnref' href='#dfn-interface'>interface</a>
              can be indexed with a <a class='idltype' href='#idl-DOMString'>DOMString</a>
              to (depending on which extended attribute is used) get, set,
              create or delete a named property,
              if the particular language binding supports indexing objects in
              this manner.  Such an interface is said to
              <dfn id='dfn-support-named-properties'>support named properties</dfn>.
            </p>
            <p>
              The four named property
              <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              <span class='rfc2119'>MUST</span> all
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <p>
              If an object implements more than one
              <a class='dfnref' href='#dfn-interface'>interface</a> with a given
              named property <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
              then it is undefined which (if any) indexing behavior is
              invoked.
            </p>
            <p>
              If an <a class='dfnref' href='#dfn-interface'>interface</a>
              <a class='dfnref' href='#dfn-support-named-properties'>supports named properties</a>,
              then the interface definition <span class='rfc2119'>MUST</span>
              be accompanied by a description of what names the
              object can be indexed with at any given time.  These names
              are called the
              <dfn id='dfn-names-of-the-supported-named-properties'>names of the supported named properties</dfn>.
            </p>
            <p>
              The <a class='xattr' href='#NameGetter'>[NameGetter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              indicates that an object implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> can
              be indexed to retrieve the value of an existing named property.
              If it appears on the interface itself, then the interface
              definition <span class='rfc2119'>MUST</span> be accompanied
              by a description of what value will be returned when the
              object is indexed for property retrieval.
              If instead the extended
              attribute appears on an <a class='dfnref' href='#dfn-operation'>operation</a>,
              then the value returned will be the value that is returned
              by invoking the operation, passing the name as its only argument.
              Such an operation <span class='rfc2119'>MUST</span> be declared to
              take a single argument of type <a class='idltype' href='#idl-DOMString'>DOMString</a>.
            </p>
            <p>
              The <a class='xattr' href='#NameSetter'>[NameSetter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              indicates that an object implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> can
              be indexed to set the value of an existing named property.
              If it appears on the interface itself, then the interface
              definition <span class='rfc2119'>MUST</span> be accompanied
              by a description of what behavior occurs when the object
              is indexed for property modification.  If instead the extended
              attribute appears on an <a class='dfnref' href='#dfn-operation'>operation</a>,
              then the behavior that occurs is the invocation of that
              operation, passing the name as the first argument and the
              new named property value as the second.
              Such an operation <span class='rfc2119'>MUST</span> be declared to
              take a two arguments, the first of type <a class='idltype' href='#idl-DOMString'>DOMString</a>.
            </p>
            <p>
              The <a class='xattr' href='#NameCreator'>[NameCreator]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              indicates that an object implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> can
              be indexed to create a new named property with a particular value.
              If it appears on the interface itself, then the interface
              definition <span class='rfc2119'>MUST</span> be accompanied
              by a description of what behavior occurs when the object
              is indexed for property creation.  If instead the extended
              attribute appears on an <a class='dfnref' href='#dfn-operation'>operation</a>,
              then the behavior that occurs is the invocation of that
              operation, passing the new property’s name as the first argument and the
              value as the second.
              Such an operation <span class='rfc2119'>MUST</span> be declared to
              take a two arguments, the first of type <a class='idltype' href='#idl-DOMString'>DOMString</a>.
            </p>
            <p>
              The <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              indicates that an object implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> can
              be indexed to delete an existing named property.
              If it appears on the interface itself, then the interface
              definition <span class='rfc2119'>MUST</span> be accompanied
              by a description of what behavior occurs when the object
              is indexed for property deletion.  If instead the extended
              attribute appears on an <a class='dfnref' href='#dfn-operation'>operation</a>,
              then the behavior that occurs is the invocation of that
              operation, passing the property’s name as the only argument.
              Such an operation <span class='rfc2119'>MUST</span> be declared to
              take a single argument of type <a class='idltype' href='#idl-DOMString'>DOMString</a>.
            </p>
            <div class='example'>
              <p>
                See <a href='#indexed-property-xattrs'>section <?sref indexed-property-xattrs?></a> for an
                example of the use of the named property
                <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>.
              </p>
            </div>
          </div>

          <!--
          <div id='NoNull' class='section'>
            <h4>[NoNull]</h4>

            <p>
              If the <a class='xattr' href='#NoNull'>[NoNull]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-attribute'>attribute</a>,
              an <a class='dfnref' href='#dfn-operation'>operation</a> or an operation
              argument, whose type is a
              <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a>,
              it indicates that a <span class='idlvalue'>null</span> value is not
              expected and will never be returned.  How
              implementations treat the assignment of a <span class='idlvalue'>null</span>
              value to an attribute with the <a class='xattr' href='#NoNull'>[NoNull]</a>
              extended attribute, or passing a <span class='idlvalue'>null</span> value as a
              <a class='xattr' href='#NoNull'>[NoNull]</a> operation argument,
              is specific to the language binding.
            </p>
            <p>
              The <a class='xattr' href='#NoNull'>[NoNull]</a>
              extended attribute <span class='rfc2119'>MUST</span> take no argument.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface that has one
                attribute with the <a class='xattr' href='#NoNull'>[NoNull]</a>
                extended attribute, and one operation with an argument that has
                the extended attribute:
              </p>
              <x:codeblock language='idl'>interface Dog {
  [NoNull] attribute DOMString name;
  attribute DOMString shortName;

  boolean isMemberOfBreed([NoNull] in DOMString breedName);
};</x:codeblock>
              <p>
                An ECMAScript implementation implementing the <span class='idltype'>Dog</span>
                interface would not allow the <span class='esvalue'>null</span> value to
                be assigned to the <span class='prop'>name</span> property or passed as the
                argument to the <span class='prop'>isMemberOfBreed</span> function:
              </p>
              <x:codeblock language='es'>var d = getDog();         // Assume d is a host object implementing the Dog interface.

d.name = null;            // This assigns the string "null" to the .name property.
d.isMemberOfBreed(null);  // This passes the string "null" to the isMemberOfBreed function.</x:codeblock>
            </div>
          </div>
          -->

          <div id='Null' class='section'>
            <h4>[Null]</h4>

            <p>
              If the <a class='xattr' href='#Null'>[Null]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-attribute'>attribute</a>
              or <a class='dfnref' href='#dfn-operation'>operation</a> argument whose type is
              <a class='idltype' href='#idl-DOMString'>DOMString</a>,
              it indicates that a <span class='idlvalue'>null</span> value
              assigned to the attribute or passed as the operation argument will be
              handled differently from its default handling (which is to be stringified
              to <span class='idlstring'>"null"</span>).
            </p>
            <ul>
              <li>
                If the argument to <a class='xattr' href='#Null'>[Null]</a>
                is <span class='idlident'>Empty</span>, then the value assigned to the
                attribute or passed as the operation argument will be the empty string,
                <span class='idlstring'>""</span>.
              </li>
              <li>
                Otherwise, if the argument to <a class='xattr' href='#Null'>[Null]</a>
                is <span class='idlident'>Null</span>, then the value assigned to the
                attribute or passed as the operation argument will be the
                <span class='idlvalue'>null</span> value.
              </li>
            </ul>
            <p>
              However, if the <a class='xattr' href='#Null'>[Null]</a>
              extended attribute does not appear on an attribute
              or operation argument whose type is
              <a class='idltype' href='#idl-DOMString'>DOMString</a>, then a
              <span class='idlvalue'>null</span> value assigned to the attribute
              or passed as the operation argument will first be converted
              to the string <span class='idlstring'>"null"</span>.
            </p>
            <p>
              The <a class='xattr' href='#Null'>[Null]</a>
              extended attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a>:
              either <span class='idlident'>Empty</span> or <span class='idlident'>Null</span>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface that has one
                attribute with the <a class='xattr' href='#Null'>[Null]</a>
                extended attribute, and one operation with an argument that has
                the extended attribute:
              </p>
              <x:codeblock language='idl'>interface Dog {
  attribute DOMString name;
  [Null=Null] attribute DOMString owner;

  boolean isMemberOfBreed([Null=Empty] in DOMString breedName);
};</x:codeblock>
              <p>
                An ECMAScript implementation implementing the <span class='idltype'>Dog</span>
                interface would convert a <span class='esvalue'>null</span> value
                assigned to the <span class='prop'>name</span> property or passed as the
                argument to the <span class='prop'>isMemberOfBreed</span> function:
              </p>
              <x:codeblock language='es'>var d = getDog();         // Assume d is a host object implementing the Dog
                          // interface.

d.name = null;            // This assigns the string "null" to the .name
                          // property.

d.owner = null;           // This assigns the null value to the .owner property.

d.isMemberOfBreed(null);  // This passes the string "" to the isMemberOfBreed
                          // function.</x:codeblock>
            </div>
          </div>

          <div id='Optional' class='section'>
            <h4>[Optional]</h4>

            <p>
              If the <a class='xattr' href='#Optional'>[Optional]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-operation'>operation</a>
              argument, it indicates that the operation can be invoked
              by passing values only for the those arguments appearing
              before the <a class='xattr' href='#Optional'>[Optional]</a>-annotated
              argument in the operation’s argument list, for language
              bindings that support such invocation.  If the extended
              attribute appears on an operation’s first argument, then the
              operation can be invoked with zero arguments.
            </p>
            <p>
              Specifying <a class='xattr' href='#Optional'>[Optional]</a>
              on an <a class='dfnref' href='#dfn-operation'>operation argument</a>
              is equivalent to using <a class='dfnref' href='#dfn-overloaded'>operation overloading</a>
              to declare one operation that takes all of the arguments
              and another that takes only those preceding the
              <a class='xattr' href='#Optional'>[Optional]</a>-annotated argument.
            </p>
            <p>
              The <a class='xattr' href='#Optional'>[Optional]</a>
              extended attribute <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines an <a class='dfnref' href='#dfn-interface'>interface</a>
                with a single <a class='dfnref' href='#dfn-operation'>operation</a>
                that can be invoked with three different argument list lengths:
              </p>
              <x:codeblock language='idl'>interface ColorCreator {
  Object createColor(in float v1, [Optional] in float v2, in float v3,
                     [Optional] in float alpha);
};</x:codeblock>
              <p>
                It is equivalent to an <a class='dfnref' href='#dfn-interface'>interface</a>
                that has three <a class='dfnref' href='#dfn-overloaded'>overloaded</a>
                <a class='dfnref' href='#dfn-operation'>operations</a>:
              </p>
              <x:codeblock language='idl'>interface ColorCreator {

  Object createColor(in float v1);
  Object createColor(in float v1, in float v2, in float v3);
  Object createColor(in float v1, in float v2, in float v3, in float alpha);
};</x:codeblock>
            </div>
          </div>

          <!--
          <div id='Overloads' class='section'>
            <h4>[Overloads]</h4>

            <p>
              If the <a class='xattr' href='#Overloads'>[Overloads]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-operation'>operation</a>, it indicates that
              the operation is to be considered to overload the operation
              with the <a class='nt' href='#prod-identifier'>identifier</a>
              given as the extended attribute argument.
              The extent to which a language supports method overloading
              determines whether an object implementing an interface with
              overloaded operations must implement the operation using the
              overloaded name or the original name, and is specific to the
              language binding.
            </p>
            <p>
              The <a class='xattr' href='#Overloads'>[Overloads]</a>
              extended attribute <span class='rfc2119'>MUST</span> take a single argument,
              an <a class='terminal' href='#prod-identifier'>identifier</a>,
              which <span class='rfc2119'>MUST</span> be the <a class='nt' href='#prod-identifier'>identifier</a>
              of another operation defined on the <a class='dfnref' href='#dfn-interface'>interface</a>,
              which this operation overloads.  The
              <a class='terminal' href='#prod-identifier'>identifier</a> <span class='rfc2119'>MUST NOT</span>
              identify an operation that itself is declared with an
              <a class='xattr' href='#Overloads'>[Overloads]</a> extended
              attribute.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface with
                overloaded operations:
              </p>
              <x:codeblock language='idl'>interface Person;

interface PersonFactory {
  Person createPerson();
  [Overloads=createPerson] Person createPersonWithAge(in short age);
};</x:codeblock>
              <p>
                Since the ECMAScript binding allows overloading, a host object
                implementing the <span class='idltype'>PersonFactory</span>
                interface will have a single property <span class='prop'>createPerson</span>:
              </p>
              <x:codeblock language='es'>var f = getFactory();          // Assume f is a host object implementing the PersonFactory interface.

typeof f.createPerson;         // Evaluates to "function".
typeof f.createPersonWithAge;  // Evaluates to "undefined".

var p1 = f.createPerson();     // Corresponds to the createPerson operation.
var p2 = f.createPerson(26);   // Corresponds to the createPersonWithAge operation.</x:codeblock>
              <p>
                However, a hypothetical C language binding would not, since
                C does not support overloading.  Separate functions would likely
                be used for the two operations:
              </p>
              <x:codeblock language='c'>PersonFactory* f = getFactory();

Person* p1 = PersonFactory_createPerson(f);             // Corresponds to the createPerson operation.
Person* p2 = PersonFactory_createPersonWithAge(f, 26);  // Corresponds to the createPersonWithAge operation.</x:codeblock>
            </div>
          </div>
          -->

          <div id='Prefix' class='section'>
            <h4>[Prefix]</h4>

            <p>
              If the <a class='xattr' href='#Prefix'>[Prefix]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-module'>module</a>,
              it affects the name of the language binding specific namespacing
              construct the module will correspond to.  See the definition of a module’s
              <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> for
              details.
            </p>
            <p>
              The <a class='xattr' href='#Prefix'>[Prefix]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-scoped-name'>take a scoped name</a>.
            </p>

            <div class='example'>
              <p>
                See <a href='#java-modules'>section <?sref java-modules?></a> for an
                example of the use of <a class='xattr' href='#Prefix'>[Prefix]</a>.
              </p>
            </div>
          </div>

          <div id='PutForwards' class='section'>
            <h4>[PutForwards]</h4>

            <p>
              If the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-read-only'>read only</a>
              <a class='dfnref' href='#dfn-attribute'>attribute</a> declaration whose type is
              an <a href='#idl-interface'>object implementing an interface</a>,
              it indicates that assigning to the attribute will have specific behavior.
              Namely, the assignment is “forwarded” to the attribute (specified by
              the extended attribute argument) on the object that is currently
              referenced by the attribute being assigned to.
            </p>
            <p>
              It is language binding specific what behavior occurs when assigning
              to such an attribute whose value is <span class='idlvalue'>null</span>.
            </p>
            <p>
              The <a class='xattr' href='#PutForwards'>[PutForwards]</a> extended
              attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a>.
              Assuming that:
            </p>
            <ul>
              <li>
                <var>A</var> is the <a class='dfnref' href='#dfn-attribute'>attribute</a>
                on which the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
                extended attribute appears,
              </li>
              <li>
                <var>I</var> is the <a class='dfnref' href='#dfn-interface'>interface</a>
                on which <var>A</var> is declared,
              </li>
              <li>
                <var>J</var> is the <a href='#idl-interface'>interface type</a>
                that <var>A</var> is declared to be of, and
              </li>
              <li>
                <var>N</var> is the <a class='dfnref' href='#dfn-identifier'>identifier</a>
                argument of the extended attribute,
              </li>
            </ul>
            <p>
              then there <span class='rfc2119'>MUST</span> be another
              <a class='dfnref' href='#dfn-attribute'>attribute</a> <var>B</var>
              declared on <var>J</var> whose <a class='dfnref' href='#dfn-identifier'>identifier</a>
              is <var>N</var>.  Assignment of a value to the attribute <var>A</var>
              on an object implementing <var>I</var> will result in that value
              being assigned to attribute <var>B</var> of the object that <var>A</var>
              references, instead.
            </p>
            <p>
              Note that <a class='xattr' href='#PutForwards'>[PutForwards]</a>-annotated
              <a class='dfnref' href='#dfn-attribute'>attributes</a> can be
              chained.  That is, an attribute with the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              can refer to an attribute that itself has that extended attribute.
              There <span class='rfc2119'>MUST NOT</span> exist a cycle in a
              chain of forwarded assignments.  A cycle exists if, when following
              the chain of forwarded assignments, a particular attribute on
              an <a class='dfnref' href='#dfn-interface'>interface</a> is
              encountered more than once.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines interfaces for names and people.
                The <a class='xattr' href='#PutForwards'>[PutForwards]</a> extended
                attribute is used on the <span class='idlattr'>name</span> attribute
                of the <span class='idltype'>Person</span> interface to indicate
                that assignments to that attribute result in assignments to the
                <span class='idlattr'>full</span> attribute of the
                <span class='idltype'>Person</span> object:
              </p>
              <x:codeblock language='idl'>interface Name {
  attribute DOMString full;
  attribute DOMString family;
  attribute DOMString given;
};

interface Person {
  [PutForwards=full] readonly attribute Name name;
  attribute unsigned short age;
};</x:codeblock>
              <p>
                In the ECMAScript binding, this would allow assignments to the
                <span class='prop'>name</span> property:
              </p>
              <x:codeblock language='es'>var p = getPerson();           // Obtain an instance of Person.

p.name = 'John Citizen';       // This statement...
p.name.full = 'John Citizen';  // ...has the same behavior as this one.</x:codeblock>
            </div>
          </div>

          <div id='Stringifies' class='section'>
            <h4>[Stringifies]</h4>

            <p>
              If the <a class='xattr' href='#Stringifies'>[Stringifies]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates that, for language bindings that support object stringification,
              an object that implements the interface will stringify in a non-default
              manner.
            </p>
            <p>
              The <a class='xattr' href='#Stringifies'>[Stringifies]</a> extended
              attribute <span class='rfc2119'>MUST</span> either
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>
              or <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a>.
              If the <a class='terminal' href='#prod-identifier'>identifier</a>
              is present, it <span class='rfc2119'>MUST</span> be the identifier of
              an attribute of type <span class='idltype'>DOMString</span> on the interface, whose value will be used as the result
              of the stringification.  If the identifier is not supplied,
              the stringification behavior <span class='rfc2119'>MUST</span>
              be described in prose.
            </p>
            <p>
              The <a class='xattr' href='#Stringifies'>[Stringifies]</a> extended
              attribute <span class='rfc2119'>MUST NOT</span> appear on
              an <a class='dfnref' href='#dfn-interface'>interface</a> that
              has an <a class='dfnref' href='#dfn-operation'>operation</a>
              whose <a class='dfnref' href='#dfn-identifier'>identifier</a>
              is <span class='prop'>toString</span>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines an interface that will stringify to the value of its
                <a class='idlattr'>name</a> attribute:
              </p>
              <x:codeblock language='idl'>[Constructor, Stringifies=name]
interface Student {
  attribute unsigned long id;
  attribute DOMString name;
};</x:codeblock>
              <p>
                In the ECMAScript binding, using a <span class='idltype'>Student</span>
                object in a context where a string is expected will result in the
                value of the object’s <span class='prop'>name</span> property being
                used:
              </p>
              <x:codeblock language='es'>var s = new Student();
s.id = 12345678;
s.name = '周杰倫';

var greeting = 'Hello, ' + s + '!';  // Now greeting == 'Hello, 周杰倫!'.</x:codeblock>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines an interface that has custom stringification behavior that is
                not specified in the IDL itself.
              </p>
              <x:codeblock language='idl'>[Constructor, Stringifies]
interface Student {
  attribute unsigned long id;
  [Null=Null] attribute DOMString familyName;
  attribute DOMString givenName;
};</x:codeblock>
              <p>
                Thus, prose is required to explain the stringification behavior, such
                as the following paragraph:
              </p>
              <blockquote>
                <p>
                  Objects that implement the <span class='idltype'>Student</span>
                  interface must stringify as follows.  If the value of the
                  <span class='idlattr'>familyName</span> attribute is
                  <span class='idlvalue'>null</span>, the stringification of the
                  object is the value of the <span class='idlattr'>givenName</span>
                  attribute.  Otherwise, if the value of the
                  <span class='idlattr'>familyName</span> attribute is not <span class='idlvalue'>null</span>,
                  the stringification of the object is the concatenation of the
                  the value of the <span class='idlattr'>givenName</span> attribute,
                  the string <span class='idlvalue'>" "</span> and the value of
                  the <span class='idlattr'>familyName</span> attribute.
                </p>
              </blockquote>
              <p>
                An ECMAScript implementation of the IDL would behave as follows:
              </p>
              <x:codeblock language='es'>var s = new Student();
s.id = 12345679;
s.familyName = 'Smithee';
s.givenName = 'Alan';

var greeting = 'Hi ' + s;  // Now greeting == 'Hi Alan Smithee'.</x:codeblock>
            </div>
          </div>

          <div id='Variadic' class='section'>
            <h4>[Variadic]</h4>

            <p>
              If the <a class='xattr' href='#Variadic'>[Variadic]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on the final argument of an <a class='dfnref' href='#dfn-operation'>operation</a>,
              it indicates that the operation is variadic, and can be passed
              zero or more arguments after the regular arguments.  Each of
              these extra arguments will have to be of the type specified by that
              final argument.  How such arguments are passed is specific to the
              language binding.
            </p>
            <p>
              The <a class='xattr' href='#Variadic'>[Variadic]</a>
              extended attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface that has a
                variadic operation:
              </p>
              <x:codeblock language='idl'>interface IntegerSet {
  readonly unsigned long cardinality;

  void union([Variadic] in long ints);
  void intersection([Variadic] in long ints);
};</x:codeblock>
              <p>
                In the ECMAScript binding, variadic operations are implemented by
                functions that can accept the subsequent arguments:
              </p>
              <x:codeblock language='es'>var s = getIntegerSet();  // Obtain an instance of IntegerSet.

s.union();                // Passing no arguments corresponding to 'ints'.
s.union(1, 4, 7);         // Passing three arguments corresponding to 'ints'.</x:codeblock>
              <p>
                A binding for a language that does not support variadic functions
                may specify that an explicit array or list of integers be passed
                to such an operation.
              </p>
            </div>
            <!--
              The following isn’t the case any more.  The query arguments are now
              specified with a sequence<Object>.
            <div class='ednote'>
              <p>
                HTML 5 may want to use <a class='xattr' href='#Variadic'>[Variadic]</a>
                in the middle of the argument list, something like this:
              </p>
              <x:codeblock language='idl'>any executeSql(DOMString q, [Variadic] DOMString p, Callback c);
any executeSql(Array a, Callback f);</x:codeblock>
              <p>
                Having <a class='xattr' href='#Variadic'>[Variadic]</a> in the middle
                isn’t so common in languages, as it tends to cause ambiguities.
              </p>
            </div>
            -->
          </div>
        </div>
      </div>

      <div id='ecmascript-binding' class='section'>
        <h2>ECMAScript binding</h2>

        <p>
          This section describes how definitions written with the IDL in
          <a href='#idl'>section <?sref idl?></a> correspond to particular constructs
          in ECMAScript 3rd edition.
        </p>
        <p>
          Unless otherwise specified, every object described in this section
          has internal properties <span class='prop'>[[Get]]</span>,
          <span class='prop'>[[Put]]</span>,
          <span class='prop'>[[CanPut]]</span>,
          <span class='prop'>[[HasProperty]]</span>,
          <span class='prop'>[[Delete]]</span> and
          <span class='prop'>[[DefaultValue]]</span> with the same behavior as
          specified for native objects, as described in section 8.6.2 of the
          <cite>ECMAScript Language Specification, 3rd Edition</cite>
          <a href='#ref-ECMA-262'>[ECMA-262]</a>.
        </p>
        <p>
          If a value for the internal property
          <span class='prop'>[[Class]]</span> is not given for a particular
          object, its value is implementation specific.
        </p>
        <p>
          Algorithms in this section use the conventions described in
          section 5.2 of <cite>ECMAScript Language Specification, 3rd Edition</cite>,
          and the ToBoolean, ToNumber, ToUint16, ToInt32, ToUint32, ToString and
          ToObject operators referenced in this section are defined in section 9
          of that document <a href='#ref-ECMA-262'>[ECMA-262]</a>.
        </p>

        <div id='es-type-mapping' class='section'>
          <h3>ECMAScript type mapping</h3>

          <p>
            This section describes how types in the IDL map to types in ECMAScript.
          </p>
          <p>
            <dfn id='dfn-pass-to-host-object'>Passing a value to a host object expecting type <var>T</var></dfn>
            is used in this sub-section to describe passing an ECMAScript value as an argument to a function whose corresponding
            <a class='dfnref' href='#dfn-operation'>operation</a> in the IDL specifies that
            the argument is of type <var>T</var>, or assigning to a property whose corresponding
            <a class='dfnref' href='#dfn-attribute'>attribute</a> or
            <a class='dfnref' href='#dfn-exception-member'>exception member</a> in the IDL
            is of type <var>T</var>.  Conversely, <dfn id='dfn-return-from-host-object'>returning a value of type
              <var>T</var> from a host object</dfn> is used to describe obtaining the ECMAScript return value
            from a function whose corresponding operation in the IDL specifies a
            <a class='dfnref' href='#dfn-return-type'>return type</a> <var>T</var>,
            or retrieving a property whose corresponding attribute or exception member in the IDL is of type <var>T</var>.
          </p>
          <p>
            Each sub-section below describes how values of a given IDL type are represented
            in ECMAScript.  For each IDL type, it is described how ECMAScript values are
            <dfn id='dfn-convert-ecmascript-to-idl-value'>converted to an IDL value</dfn>
            when passed to a host object expecting that type, and how IDL values
            of that type are <dfn id='dfn-convert-idl-to-ecmascript-value'>converted to ECMAScript values</dfn>
            when returned from a host object.
          </p>

          <div id='es-any' class='section'>
            <h4>any</h4>

            <p>
              Since the IDL <a class='idltype' href='#idl-any'>any</a> type
              is the union of all other IDL types, it can correspond to any
              ECMAScript value type.
            </p>
            <p>
              How to <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>convert an ECMAScript value</a> to an IDL <span class='idltype'>any</span> value depends on the type of the
              ECMAScript value:
            </p>
            <dl class='switch'>
              <dt>The <span class='esvalue'>undefined</span> value</dt>
              <dd>
                The IDL value is an
                <a class='idltype' href='#idl-Object'>Object</a> reference
                to a special object that represents the ECMAScript
                <span class='esvalue'>undefined</span> value.
              </dd>
              <dt>The <span class='esvalue'>null</span> value</dt>
              <dd>
                The IDL value is the <span class='idlvalue'>null</span>
                <a class='idltype' href='#idl-Object'>Object</a> reference.
              </dd>
              <dt>A <span class='estype'>Boolean</span> value</dt>
              <dd>
                The IDL value is the
                <a class='idltype' href='#idl-boolean'>boolean</a>
                value that represents the same truth value.
              </dd>
              <dt>A <span class='estype'>Number</span> value</dt>
              <dd>
                The IDL value is that which is obtained
                by following the rules for converting the
                <span class='estype'>Number</span> to an IDL
                <a class='idltype' href='#idl-float'>float</a> value,
                as described in <a href='#es-float'>section <?sref es-float?></a>,
                <?sdir es-float?>.
              </dd>
              <dt>A <span class='estype'>String</span> value</dt>
              <dd>
                The IDL value is that which is obtained
                by following the rules for converting the
                <span class='estype'>String</span> to an IDL
                <a class='idltype' href='#idl-DOMString'>DOMString</a> value,
                as described in <a href='#es-DOMString'>section <?sref es-DOMString?></a>,
                <?sdir es-DOMString?>.
              </dd>
              <dt>An <span class='estype'>Object</span> value</dt>
              <dd>
                The IDL value is an
                <a class='idltype' href='#idl-Object'>Object</a> value that
                references the same object.
              </dd>
            </dl>
            <p>
              An IDL <a class='idltype' href='#idl-any'>any</a> value is
              <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converted to an ECMAScript value</a>
              as follows.  If the value is an <a class='idltype' href='#idl-Object'>Object</a>
              reference to a special object that represents an ECMAScript <span class='esvalue'>undefined</span>
              value, then it is converted to the ECMAScript
              <span class='esvalue'>undefined</span> value.  Otherwise,
              the rules for converting the specific type of the IDL value
              are performed.
            </p>
          </div>

          <div id='es-void' class='section'>
            <h4>void</h4>

            <p>
              The only place that the <a class='idltype' href='#idl-void'>void</a> type may appear
              in IDL is as the <a class='dfnref' href='#dfn-return-type'>return type</a> of an
              <a class='dfnref' href='#dfn-operation'>operation</a>.  Functions on host objects
              that implement an operation whose IDL specifies a
              <a class='idltype' href='#idl-void'>void</a> return type <span class='rfc2119'>MUST</span> return the
              <span class='esvalue'>undefined</span> value.
            </p>
            <p>
              ECMAScript functions that implement an operation whose IDL
              specifies a <a class='idltype' href='#idl-void'>void</a> return type
              <span class='rfc2119'>MAY</span> return any value, which will be discarded.
            </p>
          </div>

          <div id='es-boolean' class='section'>
            <h4>boolean</h4>

            <p>
              IDL <a class='idltype' href='#idl-boolean'>boolean</a> values are represented by
              ECMAScript <span class='estype'>Boolean</span> values.
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>boolean</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li>Compute ToBoolean(<var>V</var>).</li>
              <li>Return the IDL <a class='idltype' href='#idl-boolean'>boolean</a> value is the one that represents the same truth value as the ECMAScript <span class='estype'>Boolean</span> value Result(1).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting
                an IDL <span class='idltype'>boolean</span> value to an ECMAScript
                value</a> is a <span class='estype'>Boolean</span> that
              represents the same truth value as the IDL
              <span class='idltype'>boolean</span> value.
            </p>
          </div>

          <div id='es-octet' class='section'>
            <h4>octet</h4>

            <p>
              IDL <a class='idltype' href='#idl-octet'>octet</a> values are represented by
              integer ECMAScript <span class='estype'>Number</span> values in the range [0, 255].
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>octet</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToNumber(<var>V</var>).</li>
              <li>If Result(<?stepref a?>) is <span class='esvalue'>NaN</span>, +0, −0, +∞, or −∞, then return the IDL <span class='idltype'>octet</span> value that represents 0.</li>
              <li x:step='b'>Compute sign(Result(<?stepref a?>)) * floor(abs(Result(<?stepref a?>))).</li>
              <li x:step='c'>Compute Result(<?stepref b?>) modulo 2<sup>8</sup>.</li>
              <li>Return the IDL <span class='idltype'>octet</span> value that represents the same numeric value as Result(<?stepref c?>).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>octet</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that represents
              the same numeric value as the IDL
              <span class='idltype'>octet</span> value.
            </p>
          </div>

          <div id='es-short' class='section'>
            <h4>short</h4>

            <p>
              IDL <a class='idltype' href='#idl-short'>short</a> values are represented by integer
              ECMAScript <span class='estype'>Number</span> values in the range [−32768, 32767].
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>short</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToNumber(<var>V</var>).</li>
              <li>If Result(<?stepref a?>) is <span class='esvalue'>NaN</span>, +0, −0, +∞, or −∞, then return the IDL <span class='idltype'>short</span> value that represents 0.</li>
              <li x:step='b'>Compute sign(Result(<?stepref a?>)) * floor(abs(Result(<?stepref a?>))).</li>
              <li x:step='c'>Compute Result(<?stepref b?>) modulo 2<sup>16</sup>.</li>
              <li>If Result(<?stepref c?>) is greater than or equal to 2<sup>15</sup>, return the IDL <span class='idltype'>short</span> value that represents the same numeric value as Result(<?stepref c?>) − 2<sup>16</sup>.
                Otherwise, return the IDL <span class='idltype'>short</span> value that represents the same numeric value as Result(<?stepref c?>).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>short</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that represents the
              same numeric value as the IDL
              <span class='idltype'>short</span> value.
            </p>
          </div>

          <div id='es-unsigned-short' class='section'>
            <h4>unsigned short</h4>

            <p>
              IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> values are represented by integer
              ECMAScript <span class='estype'>Number</span> values in the range [0, 65535].
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>unsigned short</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToUint16(<var>V</var>).</li>
              <li>Return the IDL <span class='idltype'>unsigned short</span> value that represents the same numeric value as Result(<?stepref a?>).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>unsigned short</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>unsigned short</span> value.
            </p>
          </div>

          <div id='es-long' class='section'>
            <h4>long</h4>

            <p>
              IDL <a class='idltype' href='#idl-long'>long</a> values are represented by integer
              ECMAScript <span class='estype'>Number</span> values in the range [−2147483648, 2147483647].
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>long</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToInt32(<var>V</var>).</li>
              <li>Return the IDL <span class='idltype'>long</span> value that represents the same numeric value as Result(<?stepref a?>).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>long</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>long</span> value.
            </p>
          </div>

          <div id='es-unsigned-long' class='section'>
            <h4>unsigned long</h4>

            <p>
              IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> values are represented by integer
              ECMAScript <span class='estype'>Number</span> values in the range [0, 4294967295].
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>unsigned long</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToUint32(<var>V</var>).</li>
              <li>Return the IDL <span class='idltype'>unsigned long</span> value that represents the same numeric value as Result(<?stepref a?>).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>unsigned long</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>unsigned long</span> value.
            </p>
          </div>

          <div id='es-long-long' class='section'>
            <h4>long long</h4>

            <p>
              IDL <a class='idltype' href='#idl-long-long'>long long</a> values are represented by
              ECMAScript <span class='estype'>Number</span> values.
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>long long</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToNumber(<var>V</var>).</li>
              <li>If Result(<?stepref a?>) is <span class='esvalue'>NaN</span>, +0, −0, +∞, or −∞, then return the IDL <span class='idltype'>long long</span> value that represents 0.</li>
              <li x:step='b'>Compute sign(Result(<?stepref a?>)) * floor(abs(Result(<?stepref a?>))).</li>
              <li x:step='c'>Compute Result(<?stepref b?>) modulo 2<sup>64</sup>.</li>
              <li>If Result(<?stepref c?>) is greater than or equal to 2<sup>63</sup>, return the IDL <span class='idltype'>long long</span> value that represents the same numeric value as Result(<?stepref c?>) − 2<sup>64</sup>.
                Otherwise, return the IDL <span class='idltype'>long long</span> value that represents the same numeric value as Result(<?stepref c?>).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>long long</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> value that
              represents the closest numeric value to the <span class='idltype'>long long</span>.
              If the <span class='idltype'>long long</span> is in the range
              (−(2<sup>53</sup> − 1), 2<sup>53</sup> − 1), then the <span class='estype'>Number</span>
              will be able to represent exactly the same value as the
              <span class='idltype'>long long</span>.
            </p>
          </div>

          <div id='es-unsigned-long-long' class='section'>
            <h4>unsigned long long</h4>

            <p>
              IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> values are represented by
              ECMAScript <span class='estype'>Number</span> values.
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>unsigned long long</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToNumber(<var>V</var>).</li>
              <li>If Result(<?stepref a?>) is <span class='esvalue'>NaN</span>, +0, −0, +∞, or −∞, then return the IDL <span class='idltype'>unsigned long long</span> value that represents 0.</li>
              <li x:step='b'>Compute sign(Result(<?stepref a?>)) * floor(abs(Result(<?stepref a?>))).</li>
              <li x:step='c'>Compute Result(<?stepref b?>) modulo 2<sup>64</sup>.</li>
              <li>Return the IDL <span class='idltype'>unsigned long long</span> value that represents the same numeric value as Result(<?stepref c?>).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>unsigned long long</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> value that
              represents the closest numeric value to the <span class='idltype'>unsigned long long</span>,
              choosing the numeric value with an <em>even significand</em> if there are
              two equally close values (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.5).
              If the <span class='idltype'>unsigned long long</span> is less than to 2<sup>53</sup> − 1,
              then the <span class='estype'>Number</span> will be able to
              represent exactly the same value as the
              <span class='idltype'>unsigned long long</span>.
            </p>
          </div>

          <div id='es-float' class='section'>
            <h4>float</h4>

            <p>
              IDL <a class='idltype' href='#idl-float'>float</a> values are represented by
              ECMAScript <span class='estype'>Number</span> values.
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>float</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToNumber(<var>V</var>).</li>
              <li>If Result(<?stepref a?>) is <span class='esvalue'>NaN</span>, then return the IDL <span class='idltype'>float</span> value that represents the IEEE 754 NaN value with the bit pattern 0x7fc00000 <a href='#ref-IEEE-754'>[IEEE-754]</a>.</li>
              <li>
                Let <var>S</var> be the set of finite IEEE 754 single-precision floating
                point values except −0, but with two special values added: 2<sup>128</sup> and
                −2<sup>128</sup>.
              </li>
              <li>
                Let <var>V</var> be the number in <var>S</var> that is closest
                to Result(<?stepref a?>), selecting the number with an
                <em>even significand</em> if there are two equally close values
                (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.5).
                (The two special values 2<sup>128</sup> and −2<sup>128</sup>
                are considered to have even significands for this purpose.)
              </li>
              <li>
                If <var>V</var> is 2<sup>128</sup>, return +∞.
              </li>
              <li>
                If <var>V</var> is −2<sup>128</sup>, return −∞.
              </li>
              <li>
                If <var>V</var> is +0 and Result(<?stepref a?>) is negative, return −0.
              </li>
              <li>
                Return <var>V</var>.
              </li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>float</span> value to an ECMAScript
              value is a <span class='estype'>Number</span>:
            </p>
            <ul>
              <li>
                If the IDL <span class='idltype'>float</span> value is a NaN,
                then the <span class='estype'>Number</span> value is <span class='esvalue'>NaN</span>.
              </li>
              <li>
                Otherwise, the <span class='estype'>Number</span> value is
                the one that represents the same numeric value as the IDL
                <span class='idltype'>float</span> value.
              </li>
            </ul>
          </div>

          <div id='es-DOMString' class='section'>
            <h4>DOMString</h4>

            <p>
              IDL <a class='idltype' href='#idl-DOMString'>DOMString</a> values
              are represented by ECMAScript <span class='estype'>String</span> values
              and the <span class='esvalue'>null</span> value.
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>DOMString</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li>If <var>V</var> is <span class='esvalue'>null</span>:
                <ol>
                  <li>
                    If the conversion to an IDL value is being performed due
                    to <var>V</var> being passed as an <a class='dfnref' href='#dfn-operation'>operation</a>
                    argument that is annotated with the <a class='xattr' href='#Null'>[Null]</a>
                    <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                    or due to <var>V</var> being assigned to an <a class='dfnref' href='#dfn-attribute'>attribute</a>
                    with <a class='xattr' href='#Null'>[Null]</a>:
                    <ol>
                      <li>
                        If the <a class='xattr' href='#Null'>[Null]</a>
                        <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                        <a class='dfnref' href='#dfn-xattr-identifier'>took an identifier argument</a>
                        <code>Empty</code>, then return the <span class='idltype'>DOMString</span>
                        value that represents the empty string (an empty sequence of 16 bit code units).
                      </li>
                      <li>
                        Otherwise, the <a class='xattr' href='#Null'>[Null]</a>
                        <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                        <a class='dfnref' href='#dfn-xattr-identifier'>took an identifier argument</a>
                        <code>Null</code>.  Return the <span class='idltype'>DOMString</span>
                        value <span class='idlvalue'>null</span>.
                      </li>
                    </ol>
                  </li>
                </ol>
              </li>
              <li>If <var>V</var> is <span class='esvalue'>undefined</span>:
                <ol>
                  <li>
                    If the conversion to an IDL value is being performed due
                    to <var>V</var> being passed as an <a class='dfnref' href='#dfn-operation'>operation</a>
                    argument that is annotated with the <a class='xattr' href='#Undefined'>[Undefined]</a>
                    <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                    or due to <var>V</var> being assigned to an <a class='dfnref' href='#dfn-attribute'>attribute</a>
                    with <a class='xattr' href='#Undefined'>[Undefined]</a>:
                    <ol>
                      <li>
                        If the <a class='xattr' href='#Undefined'>[Undefined]</a>
                        <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                        <a class='dfnref' href='#dfn-xattr-identifier'>took an identifier argument</a>
                        <code>Empty</code>, then return the <span class='idltype'>DOMString</span>
                        value that represents the empty string (an empty sequence of 16 bit code units).
                      </li>
                      <li>
                        Otherwise, the <a class='xattr' href='#Undefined'>[Undefined]</a>
                        <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                        <a class='dfnref' href='#dfn-xattr-identifier'>took an identifier argument</a>
                        <code>Null</code>.  Return the <span class='idltype'>DOMString</span>
                        value <span class='idlvalue'>null</span>.
                      </li>
                    </ol>
                  </li>
                </ol>
              </li>
              <li x:step='a'>Compute ToString(<var>V</var>).</li>
              <li>Return the IDL <a class='idltype' href='#idl-DOMString'>DOMString</a> value that represents the same sequence of characters as the one the ECMAScript <span class='estype'>String</span> value Result(<?stepref a?>) represents.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>DOMString</span> value to an ECMAScript
              value is:
            </p>
            <ul>
              <li>
                If the IDL <span class='idltype'>DOMString</span> value is
                <span class='idlvalue'>null</span>, then the ECMAScript value
                is the <span class='esvalue'>null</span> value.
              </li>
              <li>
                Otherwise, the ECMAScript value is the <span class='estype'>String</span>
                value that represents the same sequence of characters that the
                IDL <span class='idltype'>DOMString</span> represents.
              </li>
            </ul>
          </div>

          <div id='es-sequence' class='section'>
            <h4>sequence&lt;<var>T</var>&gt;</h4>

            <p>
              IDL <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> values are represented by
              ECMAScript <span class='estype'>Object</span> values with special properties.
            </p>
            <div class='ednote'>
              <p>This section needs to be rewritten to look like the sections above for other IDL types.</p>
            </div>
            <p>
              Values <a class='dfnref' href='#dfn-pass-to-host-object'>passed to a host object</a> expecting a
              <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>
              <span class='rfc2119'>MUST</span> be objects with a <span class='prop'>length</span> property whose
              value, after being converted to a <span class='estype'>Number</span> by the
              ToUint32 operator, is a non-negative integer that specifies the number
              of elements in the sequence.  This number <span class='rfc2119'>MUST</span> also be equal
              to the result of passing the original <span class='prop'>length</span> property value to the ToNumber algorithm.
              Assigning to the <span class='prop'>length</span> property a non-negative
              integer <span class='estype'>Number</span> <span class='rfc2119'>MUST</span> change the length of the sequence
              to be the given number.  If the sequence is lengthened, new elements <span class='rfc2119'>MUST</span> be given
              the value that the <span class='esvalue'>undefined</span> value is converted to
              when handling it according to the rules in this section for the type <var>T</var>.
              If the sequence is shortened, the values beyond the new length of the sequence
              are lost.
              The object representing the sequence <span class='rfc2119'>MUST</span> return the element in
              the sequence at position <var>n</var> when its
              <span class='prop'>[[Get]]</span> internal method is invoked with
              <var>n</var> as its argument.
            </p>
            <p>
              Note that an ECMAScript <span class='estype'>Array</span>
              is an object that matches this description.  Implementations are free,
              however, to use a host object to implement the sequence in the
              interests of efficiency.
            </p>
            <p>
              When the host object
              gets an element of the sequence using the <span class='prop'>[[Get]]</span> method,
              the returned value <span class='rfc2119'>MUST</span> first be handled according to
              the rules in this section for the type <var>T</var>.
            </p>
            <p>
              If a host object expecting a
              <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>
              is passed a value which is not an object that conforms to the above rules
              (for example, it does not have a <span class='prop'>length</span> property), then
              a <span class='estype'>TypeError</span> exception <span class='rfc2119'>MUST</span> be thrown.
            </p>
            <p>
              While sequences are passed by reference (being objects), it is
              of course up to the interface designer whether, for example,
              after assigning a sequence to a property on a host object
              that same seqence object is returned when getting the property.
              The behavior of storing sequences in the host object in this
              manner should be made clear in prose describing the interface.
            </p>
            <!--p>
              Sequences are passed by reference.  If a reference to a sequence
              passed to a host object is kept (whether internally or as the
              value of an attribute), and the passed sequence is not an ECMAScript
              <span class='estype'>Array</span> object, the kept reference must
              be a newly created ECMAScript <span class='estype'>Array</span> object
              whose contents is the elements of the sequence.
            </p>
            <div class='ednote'>
              <p>Change the above para according to comments in
                <a href='http://www.w3.org/mid/op.tumn9hy664w2qv@annevk-t60.oslo.opera.com'>this thread</a>.</p>
            </div-->
            <div class='ednote'>
              <p>
                Should there be a way to declare a sequence whose length cannot be changed
                from script?
              </p>
            </div>
            <div class='example'>
              <p>
                The following IDL defines an interface that has a
                <span class='idltype'>sequence&lt;unsigned short></span> attribute.
              </p>
              <x:codeblock language='idl'>typedef sequence&lt;unsigned short> Integers;

[Constructor]
interface LotteryResults {
  attribute Integers numbers;
};</x:codeblock>
              <p>
                The following paragraph is used to clarify the behavior of assigning
                a value to the numbers property:
              </p>
              <blockquote>
                <p>
                  In the ECMAScript language binding, assigning an array-like object
                  to the numbers property results in a copy of those values being
                  stored in the <span class='idltype'>LotteryResults</span> object.
                  The array-like object returned when the numbers property is retrieved,
                  however, will not change over the lifetime of the
                  <span class='idltype'>LotteryResults</span> object.
                </p>
              </blockquote>
              <p>
                The following ECMAScript code illustrates how the sequence
                attribute in the above interface would behave:
              </p>
              <x:codeblock language='es'>var results = new LotteryResults();  // results is a new host object
                                     // implementing the LotteryResults interface.

var a = [4, 8, 15, 16, 23, 42];      // An object that can serve as a
                                     // sequence&lt;unsigned short>.

results.numbers = a;                 // Assign the sequence, resulting in the
                                     // values being copied into the host
                                     // object.

a[0] = 5;                            // Change the array.
results.numbers[0];                  // Evaluates to 4, since results.numbers is
                                     // not a reference to 'a'.

results.numbers[0] = 5;              // Modifies the sequence stored in the host
                                     // object.
results.numbers[0];                  // Now evaluates to 5.

results.length = 7;                  // Increase the length of the sequence.
results.numbers[6];                  // Evaluates to 0, since that is how
                                     // 'undefined' is converted to an
                                     // 'unsigned short'.</x:codeblock>
            </div>
          </div>

          <div id='es-Object' class='section'>
            <h4>Object</h4>

            <p>
              IDL <a class='idltype' href='#idl-Object'>Object</a>
              values are represented by ECMAScript <span class='estype'>Object</span> values.
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>Object</span> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value):
            </p>
            <ol class='algorithm'>
              <li>If <var>V</var> is <span class='esvalue'>null</span>, then return the IDL <span class='idltype'>Object</span> value <span class='idlvalue'>null</span>.</li>
              <li x:step='a'>Compute ToObject(<var>V</var>).</li>
              <li>Return the IDL <span class='idltype'>Object</span> value that is a reference to the same object as Result(<?stepref a?>).</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>Object</span> value to an ECMAScript
              value is:
            </p>
            <ul>
              <li>
                If the IDL <span class='idltype'>Object</span> value is
                <span class='idlvalue'>null</span>, then the ECMAScript value
                is the <span class='esvalue'>null</span> value.
              </li>
              <li>
                Otherwise, the ECMAScript value is an <span class='estype'>Object</span>
                value that represents a reference to the same object that the
                IDL <span class='idltype'>Object</span> represents.
              </li>
            </ul>
          </div>

          <div id='es-interface' class='section'>
            <h4>Object implementing an interface</h4>

            <p>
              IDL <a href='#idl-interface'>object implementing an interface</a>
              values are represented by ECMAScript <span class='estype'>Object</span> values.
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <a href='#idl-interface'>object implementing an interface</a> value
              by running the following algorithm (where <var>V</var> is the
              ECMAScript value and <var>I</var> is the <a class='dfnref' href='#dfn-interface'>interface</a>):
            </p>
            <ol class='algorithm'>
              <li>If <var>V</var> is <span class='esvalue'>null</span>, then return the IDL <a href='#idl-interface'>object implementing an interface</a> value <span class='idlvalue'>null</span>.</li>
              <li>If <var>V</var> is a host object that implements <var>I</var>, then return the IDL <a href='#idl-interface'>object implementing an interface</a> value that represents a reference to that host object.</li>
              <li x:step='a'>Compute ToObject(<var>V</var>).</li>
              <li>If Result(<?stepref a?>) is a native object that is considered to implement <var>I</var> according to the rules in <a href='#native-objects'>section <?sref native-objects?></a>, then return the IDL <a href='#idl-interface'>object implementing an interface</a> value that represents a reference to that native object.</li>
              <li>Throw a <span class='esvalue'>TypeError</span>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <a href='#idl-interface'>object implementing an interface</a>
              value to an ECMAScript value is:
            </p>
            <ul>
              <li>
                If the IDL <a href='#idl-interface'>object implementing an interface</a> value is
                <span class='idlvalue'>null</span>, then the ECMAScript value
                is the <span class='esvalue'>null</span> value.
              </li>
              <li>
                Otherwise, the ECMAScript value is an <span class='estype'>Object</span>
                value that represents a reference to the same object that the
                IDL <a href='#idl-interface'>object implementing an interface</a> represents.
              </li>
            </ul>
          </div>

          <div id='es-boxed-valuetype' class='section'>
            <h4>Boxed valuetype</h4>

            <p>
              IDL <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> values are represented
              by values of either the ECMAScript type corresponding to the IDL type being boxed, or
              the ECMAScript <span class='esvalue'>null</span> value.
            </p>
            <p>
              An ECMAScript value is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> value as follows:
            </p>
            <ul>
              <li>
                If the ECMAScript value is <span class='esvalue'>null</span>,
                then the IDL <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> value is <span class='idlvalue'>null</span>.
              </li>
              <li>
                Otherwise, the ECMAScript value is not <span class='esvalue'>null</span>.
                The IDL <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> value is obtained by <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                the ECMAScript value to the IDL type being boxed.
              </li>
            </ul>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> value to an ECMAScript value is:
            </p>
            <ul>
              <li>
                If the IDL <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> value is <span class='idlvalue'>null</span>,
                then the ECMAScript value is <span class='esvalue'>null</span>.
              </li>
              <li>
                Otherwise, the IDL <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a> value is the result of
                <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                the ECMAScript value to the IDL type being boxed.
              </li>
            </ul>
          </div>

          <!--div id='es-array' class='section'>
            <h4>Arrays</h4>

            <div class='ednote'>
              <p>
                This definition of arrays is incompatible with OMG IDL in two ways.
                First, OMG IDL allows only fixed size arrays to be used (for dynamic
                sized arrays, you need to use sequences).  Omitting the array size
                is syntactically incompatible.  Second, OMG IDL uses pass-by-value
                semantics for arrays (and sequences).  Thus things like
              </p>
            </div>
            <p>

            </p>
          </div-->
        </div>

        <div id='es-extended-attributes' class='section'>
          <h3>ECMAScript-specific extended attributes</h3>

          <p>
            This section defines a number of
            <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            whose presence affects only the ECMAScript binding.
          </p>

          <div id='Callback' class='section'>
            <h4>[Callback]</h4>

            <p>
              If the <a class='xattr' href='#Callback'>[Callback]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates that the interface can be implemented by an ECMAScript native object
              (see <a href='#native-objects'>section <?sref native-objects?></a>
              <?sdir native-objects?>), and such an object can be
              <a class='dfnref' href='#dfn-pass-to-host-object'>passed to a host
                object</a> expecting an object that implements the interface.
              A native object implementing the interface is most often
              used to provide callback methods to a host object, hence
              the name of this extended attribute.
            </p>
            <p>
              The <a class='xattr' href='#Callback'>[Callback]</a> extended attribute
              <span class='rfc2119'>MUST</span> either <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>
              or <a class='dfnref' href='#dfn-xattr-identifier'>take the identifier</a> <span class='idlident'>FunctionOnly</span> or <span class='idlident'>PropertyOnly</span>.
              If no argument is given, then any native object is considered
              to implement the interface.  Otherwise, if the
              <span class='idlident'>FunctionOnly</span> argument is given,
              then only <span class='estype'>Function</span> objects can
              be considered to implement the interface.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL
                  fragment</a> defines a simple callback interface and an
                interface for an object that expects an object that
                implements that callback:
              </p>
              <x:codeblock language='idl'>[Callback] interface Listener {
  void eventOccurred();
};

interface Thing {
  void addListener(in Listener listener);
};</x:codeblock>
              <p>
                An ECMAScript implementation of the above two interfaces
                allows any native object to be passed to <span class='prop'>addListener</span>:
              </p>
              <x:codeblock language='es'>// Obtain an instance of Thing.
var t = getThing();

// The function is the implementation of the eventOccurred operation on the
// Listener interface.  If Listener had been declared with
// [Callback=PropertyOnly] this addListener() call would still succeed, but
// a TypeError would be thrown when the user agent attempts to invoke the
// callback.
t.addListener(function() { });

// This also works, but it is the function with /* 1 */ in it that is the
// implementation of eventOccurred.
var x = function() { /* 1 */ };                    
x.eventOccurred = function() { /* 2 */ };          
t.addListener(x);

// This works too, and the value of the eventOccurred property is the
// implementation of the operation.  If Listener had been declared with
// [Callback=FunctionOnly] however, this would have thrown a TypeError.
t.addListener({ eventOccurred: function() { } });</x:codeblock>
            </div>
          </div>

          <div id='NamedConstructor' class='section'>
            <h4>[NamedConstructor]</h4>
            <p>
              If the <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates the ECMAScript global object will have a property with the
              specified name whose value is a constructor function that can
              create objects that implement the interface.
              Multiple <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a> extended
              attributes may appear on a given interface.
            </p>
            <p>
              The <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              extended attribute <span class='rfc2119'>MUST</span> either
              <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a> or
              <a class='dfnref' href='#dfn-xattr-named-argument-list'>take a named argument list</a>.
              The first form, <code>[NamedConstructor=<a class='terminal' href='#prod-identifier'>identifier</a>]</code>, has the same meaning as
              using an empty argument list, <code>[NamedConstructor=<a class='terminal' href='#prod-identifier'>identifier</a>()]</code>.  For each
              <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a> extended attribute
              on the interface, there will be a way to construct an object that implements
              the interface by passing the specified arguments to the constructor function
              that is the value of the aforementioned property.
            </p>
            <p>
              The identifier used for the named constructor <span class='rfc2119'>MUST NOT</span>
              be the same as that used by an <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              extended attribute on another interface, and it <span class='rfc2119'>MUST NOT</span>
              be the same as an identifier of an interface (or <a class='dfnref' href='#dfn-exception'>exception</a>)
              that has an <a class='dfnref' href='#dfn-interface-object'>interface object</a>
              (or <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>).
            </p>
            <div class='example'>
              <p>
                The following IDL defines an interface that uses the
                <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a> extended
                attribute.
              </p>
              <x:codeblock language='idl'>[NamedConstructor=Audio,
 NamedConstructor=Audio(in DOMString src)]
interface HTMLAudioElement : HTMLMediaElement {
  …
};</x:codeblock>
              <p>
                An ECMAScript implementation that supports this interface will
                allow the construction of <span class='estype'>HTMLAudioElement</span>
                objects using the <span class='estype'>Audio</span> constructor.
              </p>
              <x:codeblock language='es'>typeof Audio;                   // Evaluates to 'function'.

var a1 = new Audio();           // Creates a new object that implements
                                // HTMLAudioElement, using the zero-argument
                                // constructor.

var a2 = new Audio('a.flac');   // Creates an HTMLAudioElement using the
                                // one-argument constructor.</x:codeblock>
            </div>
          </div>

          <div id='NoInterfaceObject' class='section'>
            <h4>[NoInterfaceObject]</h4>

            <p>
              If the <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates that an
              <a class='dfnref' href='#dfn-interface-object'>interface object</a>
              will not exist for the interface in the ECMAScript binding.  Similarly,
              if it appears on an <a class='dfnref' href='#dfn-exception'>exception</a>
              it indicates that an
              <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>
              will not exist for the exception in the ECMAScript binding.
            </p>
            <p>
              The <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a> extended attribute
              <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL
                  fragment</a> defines two interfaces, one whose interface object
                is exposed on the ECMAScript global object, and one whose isn’t:
              </p>
              <x:codeblock language='idl'>interface Storage {
  void addEntry(in unsigned long key, in any value);
};

[NoInterfaceObject]
interface Query {
  any lookupEntry(in unsigned long key);
};</x:codeblock>
              <p>
                An ECMAScript implementation of the above IDL would allow
                manipulation of <span class='idltype'>Storage</span>’s
                prototype, but not <span class='idltype'>Query</span>’s.
              </p>
              <x:codeblock language='es'>
typeof Storage;                        // evaluates to "object"

// Add some tracing alert() call to Storage.addEntry.
var fn = Storage.prototype.addEntry;
Storage.prototype.addEntry = function(key, value) {
  alert('Calling addEntry()');
  return fn.call(this, key, value);
};

typeof Query;                          // evaluates to "undefined"
var fn = Query.prototype.lookupEntry;  // exception, Query isn’t defined
</x:codeblock>
            </div>
          </div>

          <div id='PrototypeRoot' class='section'>
            <h4>[PrototypeRoot]</h4>

            <p>
              If the <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>
              <var>A</var>, it indicates that it serves as the root of a prototype
              ancestor hierarchy.  For any interface <var>B</var> that has
              <var>A</var> as an ancestor, each interface in the inheritance
              tree starting with an interface that <var>B</var> inherits from and
              ending with <var>A</var> will be a
              <a class='dfnref' href='#dfn-prototype-ancestor'>prototype ancestor</a>
              of <var>B</var>.  It also plays a role in determining the value
              of a host object’s internal <span class='prop'>[[Prototype]]</span>
              property value when the object implements more than one interface.
              See <a href='#interface-prototype-object'>section <?sref interface-prototype-object?></a>
              and <a href='#host-objects'>section <?sref host-objects?></a> for details.
            </p>
            <p>
              The <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
              extended attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>,
              and <span class='rfc2119'>MUST NOT</span> appear on an
              <a class='dfnref' href='#dfn-interface'>interface</a> that
              <a class='dfnref' href='#dfn-inherit'>inherits</a> from another
              interface.  An interface inheritance hierarchy
              <span class='rfc2119'>must not</span> have multiple paths from
              one interface to another that has the
              <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
              extended attribute.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines a hierarchy of <a class='dfnref' href='#dfn-interface'>interfaces</a>
                whose rootmost interface is annotated with the
                <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
                Other interfaces are defined to be implemented on objects that
                implement this prototype root interface, but properties for
                these other interfaces will be made available in the prototype
                chain through a <a class='dfnref' href='#dfn-mixin-prototype-object'>mixin prototype object</a>.
              </p>
              <x:codeblock language='idl'>[PrototypeRoot]
interface Node {
  readonly attribute unsigned short nodeType;
};

interface Element : Node {
  void appendChild(in Node n);
  // …
};

interface HTMLElement : Element {
  void focus();
  // …
};

[ImplementedOn=Node]
interface EventTarget {
  void addEventListener(…);
  // …
};</x:codeblock>
              <p>
                An ECMAScript implementation implementing these interfaces would
                have a prototype chain as follows, where <var>E</var> is an
                instance of <span class='idltype'>HTMLElement</span>:
              </p>
              <div class='diagram'>
                <iframe src='PrototypeRoot-example.svg' style='width: 37em; height: 45em'/>
                <object data='empty.svg' width='1' height='1'>
                  <img src='PrototypeRoot-example.png' width='500' height='608'
                    alt='The prototype of E is the mixin prototype object for E.
                         This mixin protoype object has an "addEventListener"
                         property.  The prototype of the mixin prototype object
                         is the HTMLElement prototype object, whose prototype is
                         the Element prototype object, whose prototype is the
                         Node prototype object, whose prototype is the Object
                         prototype object.'/>
                </object>
              </div>
            </div>
          </div>

          <div id='Replaceable' class='section'>
            <h4>[Replaceable]</h4>

            <p>
              If the <a class='xattr' href='#Replaceable'>[Replaceable]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-read-only'>read only</a>
              <a class='dfnref' href='#dfn-attribute'>attribute</a>,
              it indicates that setting the corresponding property on the
              host object will result in that property being removed
              and a new one created that is unrelated to the attribute,
              and which has the value being assigned.
            </p>
            <p>
              The <a class='xattr' href='#Replaceable'>[Replaceable]</a>
              extended attribute <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines an <a class='dfnref' href='#dfn-interface'>interface</a>
                with an <a class='dfnref' href='#dfn-operation'>operation</a>
                that increments a counter, and an <a class='dfnref' href='#dfn-attribute'>attribute</a>
                that exposes the counter’s value, which is initially 0:
              </p>
              <x:codeblock language='idl'>interface Counter {
  [Replaceable] readonly attribute unsigned value;
  void increment();
};</x:codeblock>
              <p>
                Assigning to the <span class='prop'>value</span> property
                on a host object implementing <span class='idltype'>Counter</span>
                will sever the link between the property and the IDL
                <a class='dfnref' href='#dfn-attribute'>attribute</a> it
                initially corresponds to:
              </p>
              <x:codeblock language='es'>var counter = getCounter();  // Obtain an instance of Counter.
counter.value;               // Evaluates to 0.

counter.increment();
counter.increment();
counter.value;               // Evaluates to 2.

counter.value = 'a';         // Replaces the property with one that is unrelated
                             // to Counter::value.

counter.increment();
counter.value;               // Evaluates to 'a'.</x:codeblock>
            </div>
          </div>

          <div id='Undefined' class='section'>
            <h4>[Undefined]</h4>

            <p>
              If the <a class='xattr' href='#Undefined'>[Undefined]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-attribute'>attribute</a>
              or <a class='dfnref' href='#dfn-operation'>operation</a> argument whose type is
              <a class='idltype' href='#idl-DOMString'>DOMString</a>,
              it indicates that an <span class='esvalue'>undefined</span> value
              assigned to the corresponding property or passed as an argument to the corresponding function will first be
              converted to a non-null string.  The argument to the extended attribute
              determines what string to use:
            </p>
            <ul>
              <li>
                If the argument to <a class='xattr' href='#Undefined'>[Undefined]</a>
                is <span class='idlident'>Empty</span>, then the value assigned to the
                attribute or passed as the operation argument will be the empty string,
                <span class='idlstring'>""</span>.
              </li>
              <li>
                Otherwise, if the argument to <a class='xattr' href='#Undefined'>[Undefined]</a>
                is <span class='idlident'>Null</span>, then the value assigned to the
                attribute or passed as the operation argument will be the
                <span class='idlvalue'>null</span> value.
              </li>
            </ul>
            <p>
              However, if the <a class='xattr' href='#Undefined'>[Undefined]</a>
              extended attribute does not appear on an attribute
              or operation argument whose type is
              <a class='idltype' href='#idl-DOMString'>DOMString</a>, then an
              <span class='esvalue'>undefined</span> value assigned to the
              corresponding property or passed as an argument to the corresponding function will first be converted to
              the string <span class='idlstring'>"undefined"</span>.
            </p>
            <p>
              The <a class='xattr' href='#Undefined'>[Undefined]</a>
              extended attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a>:
              either <span class='idlident'>Empty</span> or <span class='idlident'>Null</span>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface that has one
                attribute with the <a class='xattr' href='#Undefined'>[Undefined]</a>
                extended attribute, and one operation with an argument that has
                the extended attribute:
              </p>
              <x:codeblock language='idl'>interface Cat {
  attribute DOMString name;
  [Undefined=Null, Null=Null] attribute DOMString owner;

  boolean isMemberOfBreed([Undefined=Empty] in DOMString breedName);
};</x:codeblock>
              <p>
                An ECMAScript implementation implementing the <span class='idltype'>Cat</span>
                interface would convert an <span class='esvalue'>undefined</span> value
                assigned to the <span class='prop'>name</span> or <span class='prop'>owner</span> property or passed as the
                argument to the <span class='prop'>isMemberOfBreed</span> function:
              </p>
              <x:codeblock language='es'>var c = getCat();              // Obtain an instance of Cat.

c.name = undefined;            // This assigns the string "undefined" to the
                               // .name property.

c.owner = undefined;           // This assigns null to the .owner property.

c.isMemberOfBreed(undefined);  // This passes the string "" to the
                               // isMemberOfBreed function.</x:codeblock>
            </div>
          </div>
        </div>

        <div id='es-interfaces' class='section'>
          <h3>Interfaces</h3>

          <p>
            For every <a class='dfnref' href='#dfn-interface'>interface</a> that is not declared with the
            <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
            a corresponding property <span class='rfc2119'>MUST</span> exist on the ECMAScript global object
            whose name is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the interface.
            The value of this property is an object called the
            <dfn id='dfn-interface-object'>interface object</dfn>, which provides access to the
            <a class='dfnref' href='#dfn-constant'>constants</a>
            and <a class='dfnref' href='#dfn-operation'>operations</a> defined on the interface.
            The property has the attributes <span class='propattrset'>{ DontDelete, DontEnum }</span>.
            The characteristics of an interface object is described in <a href='#interface-object'>section <?sref interface-object?></a>
            <?sdir interface-object?>.
          </p>
          
          <p>
            In addition, for every <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
            extended attribute on an interface, a corresponding property <span class='rfc2119'>MUST</span>
            exist on the ECMAScript global object whose name is the
            <a class='terminal' href='#prod-identifier'>identifier</a> that occurs directly after the
            “<span class='terminal'>=</span>”.  The value of this property is an object called an
            <dfn id='dfn-named-constructor'>named constructor</dfn>, which allows
            construction of objects that implement the interface.  The property has the
            attributes <span class='propattrset'>{ DontDelete, DontEnum }</span>.
            The characteristics of a named constructor is described in
            <a href='#named-constructors'>section <?sref named-constructors?></a>
            <?sdir named-constructors?>.
          </p>

          <div id='interface-object' class='section'>
            <h4>Interface object</h4>

            <p>
              The interface object for a particular <a class='dfnref' href='#dfn-interface'>interface</a>
              <span class='rfc2119'>MUST</span> have an internal <span class='prop'>[[Prototype]]</span>
              property whose value is the <span class='esvalue'>Object</span> prototype object.
            </p>
            <p>
              The interface object also has properties that correspond to
              the <a class='dfnref' href='#dfn-constant'>constants</a> defined on that interface, as described in 
              <a href='#es-constants'>section <?sref es-constants?></a> <?sdir es-constants?>.
            </p>
            <p>
              The interface object <span class='rfc2119'>MUST</span> also have a property named
              <span class='prop'>prototype</span> with attributes
              <span class='propattrset'>{ DontDelete, ReadOnly }</span>
              whose value is an object called the <dfn id='dfn-interface-prototype-object'>interface prototype
                object</dfn>.  This object provides access to the functions
              that correspond to the <a class='dfnref' href='#dfn-operation'>operations</a> defined on the interface,
              and is described in more detail in
              <a href='#interface-prototype-object'>section <?sref interface-prototype-object?></a>
              <?sdir interface-prototype-object?>.
            </p>

            <div id='es-interface-construct' class='section'>
              <h5>Interface object [[Construct]] method</h5>

              <p>
                If the interface is declared with a
                <a class='xattr' href='#Constructor'>[Constructor]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                then the interface object <span class='rfc2119'>MUST</span> also have a
                <span class='prop'>[[Construct]]</span> internal property, which allows
                construction of objects that implement the given interface.<!--  The behavior
                of this <span class='prop'>[[Construct]]</span> method is not
                necessarily the same as that described for <span class='estype'>Function</span> objects in
                section 13.2.2 of the
                <cite>ECMAScript Language Specification, 3rd Edition</cite>
                <a href='#ref-ECMA-262'>[ECMA-262]</a>, but it
                <span class='rfc2119'>MUST</span> return an object that implements
                the given interface if it returns normally (that is, if it does not
                throw an exception).
              </p>
              <p>-->
                In order to define how overloaded constructor invocations
                are resolved within the <span class='prop'>[[Construct]]</span> method, the
                <dfn id='dfn-overload-resolution-algorithm'>overload resolution algorithm</dfn>
                is defined.  Its input is an <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>,
                <var>S</var>, and a list of ECMAScript values, <var>arg</var><sub>0‥<var>n</var>−1</sub>.
                The algorithm behaves as follows:
              </p>
              <ol class='algorithm'>
                <li>
                  Initialize <var>R</var> to a set with the same values as <var>S</var>.
                </li>
                <li>
                  Remove from <var>R</var> all entries whose type list is
                  longer than <var>n</var>.
                </li>
                <li>
                  If <var>R</var> contains more than one entry:
                  <ol>
                    <li>
                      Let <var>m</var> be the maximum length of the type lists of
                      the entries in <var>R</var>.
                    </li>
                    <li>
                      Initialize <var>i</var> to 0.
                    </li>
                    <li>
                      While <var>i</var> &lt; <var>m</var>:
                      <ol>
                        <li>Initialize <var>b</var> to <span class='esvalue'>true</span>.</li>
                        <li>
                          For each pair of entries &lt;<var>entry1</var>, <var>entry2</var>>
                          in <var>R</var>:
                          <ol>
                            <li>Let <var>t</var> be the type list of <var>entry1</var>.</li>
                            <li>Let <var>u</var> be the type list of <var>entry2</var>.</li>
                            <li>
                              If <var>t</var><sub><var>i</var></sub> and
                              <var>u</var><sub><var>i</var></sub> are not
                              <a class='dfnref' href='#dfn-distinguishable'>distinguishable</a>,
                              set <var>b</var> to <span class='esvalue'>false</span>.
                            </li>
                          </ol>
                        </li>
                        <li>
                          If <var>b</var> is <span class='esvalue'>true</span>:
                          <ol>
                            <li>
                              If <var>arg</var><sub><var>i</var></sub> is an
                              <span class='estype'>Undefined</span>,
                              <span class='estype'>Boolean</span>,
                              <span class='estype'>String</span> or
                              <span class='estype'>Number</span> value,
                              then remove from <var>R</var> all entries with type
                              list <var>t</var> where <var>t</var><sub><var>i</var></sub>
                              is not a <a class='dfnref' href='#dfn-primitive-type'>primitive type</a>.
                            </li>
                            <li>
                              If <var>arg</var><sub><var>i</var></sub> is
                              <span class='esvalue'>null</span> or an
                              object (whether a host object or a native object), then remove from
                              <var>R</var> all entries with type list <var>t</var> where
                              <var>t</var><sub><var>i</var></sub> is not
                              <a href='#idl-interface'>an object implementing an interface</a>.
                            </li>
                          </ol>
                        </li>
                        <li>Set <var>i</var> to <var>i</var> + 1.</li>
                      </ol>
                    </li>
                  </ol>
                </li>
                <li>Return <var>R</var>.</li>
              </ol>
              <p>
                The internal <span class='prop'>[[Construct]]</span> method
                of the interface object behaves as follows, assuming
                <var>arg</var><sub>0‥<var>n</var>−1</sub> is the list
                of argument values passed to the constructor, and <var>I</var>
                is the <a class='dfnref' href='#dfn-interface'>interface</a>:
              </p>
              <ol class='algorithm'>
                <li>
                  Let <var>id</var> be the identifier of interface <var>I</var>.
                </li>
                <li>
                  Initialize <var>S</var> to the
                  <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                  for constructors with <a class='dfnref' href='#dfn-identifier'>identifier</a>
                  <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                  <var>I</var>.
                </li>
                <li>
                  Set <var>S</var> to the result of passing <var>S</var> and
                  <var>arg</var><sub>0‥<var>n</var>−1</sub> to the
                  <a class='dfnref' href='#dfn-overload-resolution-algorithm'>overload resolution algorithm</a>.
                </li>
                <li>
                  If <var>S</var> is empty, throw a <span class='estype'>TypeError</span>.
                </li>
                <li>
                  If <var>S</var> contains more than one entry, then the
                  constructor call is ambiguous.  Remove all but one entry from
                  <var>S</var> according to rules specified in the description
                  of <a class='dfnref' href='#dfn-interface'>interface</a>
                  <var>I</var>, or arbitrarily if no such rules exist.
                </li>
                <li>
                  Let <var>x</var> be the <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                  that represents the constructor and <var>t</var><sub>0‥<var>m</var>−1</sub> be the type
                  list of the single entry in <var>S</var>.
                </li>
                <li>
                  Let <var>idlarg</var><sub>0‥<var>m</var>−1</sub> be a list
                  of IDL values, where <var>idlarg</var><sub><var>i</var></sub>
                  is the result of
                  <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                  <var>arg</var><sub><var>i</var></sub> to an IDL value.
                </li>
                <li x:step='a'>
                  Perform the actions listed in the description of
                  the constructor represented by <var>x</var>
                  with <var>idlarg</var><sub>0‥<var>m</var>−1</sub>
                  as the argument values.
                </li>
                <li>
                  If the actions performed in the previous step resulted
                  in an exception being thrown, then allow that exception
                  to propagate out from this algorithm.  Otherwise,
                  return the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                  Result(<?stepref a?>) to an ECMAScript <a href='#idl-interface'>object implementing interface</a>
                  <var>I</var>.
                </li>
              </ol>
              <p>
                If the internal <span class='prop'>[[Construct]]</span> method
                of the <a class='dfnref' href='#dfn-interface-object'>interface object</a>
                returns normally, then it <span class='rfc2119'>MUST</span>
                return an object that implements interface <var>I</var>.
              </p>
            </div>

            <div id='es-interface-hasinstance' class='section'>
              <h5>Interface object [[HasInstance]] method</h5>

              <p>
                The internal <span class='prop'>[[HasInstance]]</span> method of every
                <a class='dfnref' href='#dfn-interface-object'>interface object</a>
                <var>A</var> <span class='rfc2119'>MUST</span> behave as follows,
                assuming <var>V</var> is the object
                argument passed to <span class='prop'>[[HasInstance]]</span>:
              </p>
              <ol class='algorithm'>
                <li>If <var>V</var> is not an object, return <span class='esvalue'>false</span>.</li>
                <li x:step='a'>Call the <span class='prop'>[[Get]]</span> method of <var>A</var> with property name <span class='esstring'>"prototype"</span>.</li>
                <li>Let <var>O</var> be Result(<?stepref a?>).</li>
                <li>If <var>O</var> is not an object, throw a <span class='estype'>TypeError</span> exception.</li>
                <li>If <var>V</var> is a host object that implements the
                  interface for which <var>O</var> is the interface prototype object,
                  return <span class='esvalue'>true</span>.</li>
                <li x:step='b'>Let <var>V</var> be the value of the <span class='prop'>[[Prototype]]</span> property of <var>V</var>.</li>
                <li>If <var>V</var> is <span class='esvalue'>null</span>, return <span class='esvalue'>false</span>.</li>
                <li>If <var>O</var> and <var>V</var> refer to the same object or if they refer to objects joined to each other (see section 13.1.2 of the
                  <cite>ECMAScript Language Specification, 3rd Edition</cite> <a href='#ref-ECMA-262'>[ECMA-262]</a>),
                  return <span class='esvalue'>true</span>.</li>
                <li>Go to step <?stepref b?>.</li>
              </ol>
            </div>
          </div>

          <div id='named-constructors' class='section'>
            <h4>Named constructors</h4>

            <p>
              For every unique <a class='terminal' href='#prod-identifier'>identifier</a> used in a
              <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a> extended attribute
              on an <a class='dfnref' href='#dfn-interface'>interface</a>, a corresponding
              property <span class='rfc2119'>MUST</span> exist on the ECMAScript global
              object whose name is that unique identifier.  The value of this property
              is an object called a <dfn id='dfn-named-constructor-object'>named constructor object</dfn>.
              The property has the attributes <span class='esprop'>{ DontDelete, DontEnum }.</span>
            </p>
            <p>
              The <a class='dfnref' href='#dfn-named-constructor-object'>named constructor object</a>
              <span class='rfc2119'>MUST</span> have a <span class='prop'>[[Construct]]</span>
              internal property, which allows construction of objects that
              implement the interface on which the <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              extended attributes appear.  It behaves as follows, assuming
              <var>arg</var><sub>0‥<var>n</var>−1</sub> is the list
              of argument values passed to the constructor, <var>id</var>
              is the unique identifier, and <var>I</var>
              is the <a class='dfnref' href='#dfn-interface'>interface</a>
              on which the <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a> extended attributes
              appear:
            </p>
            <ol class='algorithm'>
              <li>
                Initialize <var>S</var> to the
                <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                for constructors with <a class='dfnref' href='#dfn-identifier'>identifier</a>
                <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                <var>I</var>.
              </li>
              <li>
                Set <var>S</var> to the result of passing <var>S</var> and
                <var>arg</var><sub>0‥<var>n</var>−1</sub> to the
                <a class='dfnref' href='#dfn-overload-resolution-algorithm'>overload resolution algorithm</a>.
              </li>
              <li>
                If <var>S</var> is empty, throw a <span class='estype'>TypeError</span>.
              </li>
              <li>
                If <var>S</var> contains more than one entry, then the
                constructor call is ambiguous.  Remove all but one entry from
                <var>S</var> according to rules specified in the description
                of <a class='dfnref' href='#dfn-interface'>interface</a>
                <var>I</var>, or arbitrarily if no such rules exist.
              </li>
              <li>
                Let <var>x</var> be the <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                that represents the constructor and <var>t</var><sub>0‥<var>m</var>−1</sub> be the type
                list of the single entry in <var>S</var>.
              </li>
              <li>
                Let <var>idlarg</var><sub>0‥<var>m</var>−1</sub> be a list
                of IDL values, where <var>idlarg</var><sub><var>i</var></sub>
                is the result of
                <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                <var>arg</var><sub><var>i</var></sub> to an IDL value.
              </li>
              <li x:step='a'>
                Perform the actions listed in the description of
                the constructor represented by <var>x</var>
                with <var>idlarg</var><sub>0‥<var>m</var>−1</sub>
                as the argument values.
              </li>
              <li>
                If the actions performed in the previous step resulted
                in an exception being thrown, then allow that exception
                to propagate out from this algorithm.  Otherwise,
                return the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                Result(<?stepref a?>) to an ECMAScript
                <a href='#idl-interface'>object implementing interface</a>
                <var>I</var>.
              </li>
            </ol>
            <p>
              If the internal <span class='prop'>[[Construct]]</span> method
              of the <a class='dfnref' href='#dfn-named-constructor-object'>named constructor object</a>
              returns normally, then it <span class='rfc2119'>MUST</span>
              return an object that implements interface <var>I</var>.
            </p>
          </div>

          <div id='interface-prototype-object' class='section'>
            <h4>Interface prototype object</h4>

            <p>
              There <span class='rfc2119'>MUST</span> exist an
              <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype
                object</a> for every <a class='dfnref' href='#dfn-interface'>interface</a>
              defined, regardless of whether the interface was declared with the
              <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
              The interface prototype object for a particular interface has
              properties that correspond to the <a class='dfnref' href='#dfn-operation'>operations</a>
              defined on that interface.  These properties are described in more detail in
              <a href='#es-operations'>section <?sref es-operations?></a> <?sdir es-operations?>.
            </p>
            <p>
              As with the <a class='dfnref' href='#dfn-interface-object'>interface object</a>,
              the interface prototype object also has properties that correspond to the
              <a class='dfnref' href='#dfn-constant'>constants</a> defined on that
              interface, described in <a href='#es-operations'>section
                <?sref es-constants?></a> <?sdir es-constants?>.
            </p>
            <p>
              If the interface is declared with the
              <a class='xattr' href='#Constructor'>[Constructor]</a> extended
              attribute, the interface prototype object <span class='rfc2119'>MUST</span>
              also have a property named <span class='prop'>constructor</span> with attributes
              <span class='propattrset'>{ DontEnum }</span> whose value
              is a reference to the interface object for the interface.
            </p>
            <div class='ednote'>
              <p>
                Haven’t checked what attributes browsers use on the 
                <span class='prop'>constructor</span> property.
              </p>
              <p>
                Also, should the <span class='prop'>constructor</span> property
                exist even for non-constructable objects?
              </p>
            </div>
            <!--
            <p>
              No particular value must be used for the internal
              <span class='prop'>[[Prototype]]</span> property of the
              interface prototype object.  However, it <span class='rfc2119'>MUST</span> be an object
              that provides access to the properties corresponding to
              the <a class='dfnref' href='#dfn-operation'>operations</a>
              and <a class='dfnref' href='#dfn-constant'>constants</a>
              defined on the interfaces from which  this interface <a class='dfnref' href='#dfn-inherit'>inherits</a>.
              Changes made to the interface prototype objects of superinterfaces
              <span class='rfc2119'>MUST</span> be reflected through this object,
              as with normal prototype-based single inheritance in ECMAScript.
              If more than one superinterface has a given property, it is
              implementation specific which one is accessed.
            </p>
            <div id='interface-prototype-object-example' class='example'>
              <p>
                Assume the following IDL:
              </p>
              <x:codeblock language='idl'>interface A {
  void f();
};

interface B {
  void g();
};

interface C : A, B {
  void f();
};

interface D : C {
  void h();
};</x:codeblock>
              <p>
                The following is one way for an implementation to set up
                the prototype chain for the interface objects:
              </p>
              <ul>
                <li>
                  The <span class='prop'>[[Prototype]]</span> internal property
                  of the interface prototype objects for <span class='idltype'>A</span>
                  and <span class='idltype'>B</span> is the
                  <span class='prop'>Object</span> prototype object, since
                  neither of these interfaces has a superinterface.
                </li>
                <li>
                  The <span class='prop'>[[Get]]</span>,
                  <span class='prop'>[[CanPut]]</span> and
                  <span class='prop'>[[HasProperty]]</span> internal methods of the
                  interface prototype object for <span class='idltype'>A</span>
                  are the standard ones defined in section 8.6.2 of the
                  <cite>ECMAScript Language Specification, 3rd Edition</cite>
                  <a href='#ref-ECMA-262'>[ECMA-262]</a>.
                </li>
                <li>
                  The <span class='prop'>[[Prototype]]</span> internal prototype
                  of the interface prototype object for <span class='idltype'>C</span>
                  is <span class='esvalue'>null</span>.
                </li>
                <li>
                  The <span class='prop'>[[Get]]</span> internal method
                  of the interface prototype object for <span class='idltype'>C</span>
                  behaves as follows (where <var>O</var> is the object and
                  <var>P</var> is the property name):
                  <ol class='algorithm'>
                    <li>
                      If <var>O</var> doesn’t have a property with name
                      <var>P</var>, go to step 4.
                    </li>
                    <li>Get the value of the property.</li>
                    <li>Return Result(2).</li>
                    <li>
                      Call the <span class='prop'>[[HasProperty]]</span> method
                      of the interface prototype object for
                      <span class='idltype'>A</span> with property name <var>P</var>.
                    </li>
                    <li>
                      If Result(4) is <span class='esvalue'>false</span>, go to
                      step 8.
                    </li>
                    <li>
                      Call the <span class='prop'>[[Get]]</span> method of the
                      interface prototype object for <span class='idltype'>A</span>
                      with property name <var>P</var>.
                    </li>
                    <li>Return Result(6).</li>
                    <li>
                      Call the <span class='prop'>[[HasProperty]]</span> method
                      of the interface prototype object for
                      <span class='idltype'>B</span> with property name <var>P</var>.
                    </li>
                    <li>
                      If Result(8) is <span class='esvalue'>false</span>, go to
                      step 12.
                    </li>
                    <li>
                      Call the <span class='prop'>[[Get]]</span> method of the
                      interface prototype object for <span class='idltype'>B</span>
                      with property name <var>P</var>.
                    </li>
                    <li>Return Result(10).</li>
                    <li>Return <span class='esvalue'>undefined</span>.</li>
                  </ol>
                </li>
                <li>
                  The <span class='prop'>[[CanPut]]</span> internal method
                  of the interface prototype object for <span class='idltype'>C</span>
                  behaves as follows (where <var>O</var> is the object and
                  <var>P</var> is the property name):
                  <ol class='algorithm'>
                    <li>
                      If <var>O</var> doesn’t have a property with name <var>P</var>,
                      go to step 4.
                    </li>
                    <li>If the property has the ReadOnly attribute, return <span class='esvalue'>false</span>.</li>
                    <li>Return <span class='esvalue'>true</span>.</li>
                    <li>
                      Call the <span class='prop'>[[CanPut]]</span> method of the
                      interface prototype object for <span class='idltype'>A</span>
                      with property name <var>P</var>.
                    </li>
                    <li>
                      If Result(4) is <span class='esvalue'>false</span>, return
                      <span class='esvalue'>false</span>.
                    </li>
                    <li>
                      Call the <span class='prop'>[[CanPut]]</span> method of the
                      interface prototype object for <span class='idltype'>B</span>
                      with property name <var>P</var>.
                    </li>
                    <li>
                      If Result(6) is <span class='esvalue'>false</span>, return
                      <span class='esvalue'>false</span>.
                    </li>
                    <li>Return <span class='esvalue'>true</span>.</li>
                  </ol>
                </li>
                <li>
                  The <span class='prop'>[[HasProperty]]</span> internal method
                  of the interface prototype object for <span class='idltype'>C</span>
                  behaves as follows (where <var>O</var> is the object and
                  <var>P</var> is the property name):
                  <ol class='algorithm'>
                    <li>
                      If <var>O</var> has a property with name <var>P</var>,
                      return <span class='esvalue'>true</span>.
                    </li>
                    <li>
                      Call the <span class='prop'>[[HasProperty]]</span> method of the
                      interface prototype object for <span class='idltype'>A</span>
                      with property name <var>P</var>.
                    </li>
                    <li>
                      If Result(3) is <span class='esvalue'>true</span>, return
                      <span class='esvalue'>true</span>.
                    </li>
                    <li>
                      Call the <span class='prop'>[[HasProperty]]</span> method of the
                      interface prototype object for <span class='idltype'>B</span>
                      with property name <var>P</var>.
                    </li>
                    <li>
                      If Result(5) is <span class='esvalue'>true</span>, return
                      <span class='esvalue'>true</span>.
                    </li>
                    <li>Return <span class='esvalue'>false</span>.</li>
                  </ol>
                </li>
                <li>
                  The <span class='prop'>[[Prototype]]</span> internal property
                  of the interface prototype object for <span class='idltype'>D</span>
                  is the interface prototype object for <span class='idltype'>C</span>,
                  since <span class='idltype'>D</span> has only a single superinterface.
                </li>
                <li>
                  The <span class='prop'>[[Get]]</span>,
                  <span class='prop'>[[CanPut]]</span> and
                  <span class='prop'>[[HasProperty]]</span> internal methods of the
                  interface prototype object for <span class='idltype'>D</span>
                  are the standard ones defined in section 8.6.2 of the
                  <cite>ECMAScript Language Specification, 3rd Edition</cite>
                  <a href='#ref-ECMA-262'>[ECMA-262]</a>.
                </li>
              </ul>
            </div>
            <div class='ednote'>
              <p>
                The above example algorithm is broken according to
                <a href='http://www.w3.org/mid/cee13aa30804102141n3c48a5c2mfddebe284d636cdb@mail.gmail.com'>David Andersson</a>,
                so this will probably change to using <a href='http://en.wikipedia.org/wiki/C3_linearization'>C3</a> as suggested.
              </p>
            </div>
            <div class='ednote'>
              <p>
                Should the prototype chain and internal methods given in the
                example above be mandated, or just left as an example of how
                to do it?
              </p>
            </div>
            -->
            <p>
              The value of the internal <span class='prop'>[[Prototype]]</span>
              property of the <a class='dfnref' href='#dfn-interface-prototype-object'>interface
                prototype object</a> depends on the structure of the interface’s
              inheritance hierarchy — specifically, what the interface’s <em>prototype
                parent</em> is, and whether it has any <em>mixin</em> interfaces.
            </p>
            <p>
              The <dfn id='dfn-prototype-parent'>prototype parent</dfn> of an interface,
              <var>A</var>, is defined as follows.  If interface <var>A</var> is declared to
              <a class='dfnref' href='#dfn-inherit'>inherit</a> from one or more
              other interfaces then the first interface identified by the
              <a class='nt' href='#prod-InterfaceInheritance'>InterfaceInheritance</a>
              non-terminal that has an ancestor interface with the
              <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              is interface <var>A</var>’s prototype parent.  Otherwise,
              interface <var>A</var> has no prototype parent.  The
              <dfn id='dfn-prototype-ancestor'>prototype ancestors</dfn> of <var>A</var>
              is the set of interfaces that includes <var>A</var>’s prototype
              parent (if it exists), and the prototype parent of any other prototype ancestor
              of <var>A</var>.
            </p>
            <p>
              A <dfn id='dfn-mixin'>mixin</dfn> of an interface, <var>A</var>, is
              any interface that is not one of <var>A</var>’s
              <a class='dfnref' href='#dfn-prototype-ancestor'>prototype ancestors</a>,
              and also:
            </p>
            <ul>
              <li>is an explicit ancestor interface of <var>A</var>;</li>
              <li>is identified by an
                <a class='xattr' href='#ImplementedOn'>[ImplementedOn]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                as being implemented on all objects of type <var>A</var></li>
              <li>is a mixin of any other of <var>A</var>’s mixins; or</li>
              <li>is an explicit ancestor interface of any other of <var>A</var>’s mixins.</li>
            </ul>
            <p>
              The value of the internal <span class='prop'>[[Prototype]]</span>
              property of an interface’s
              <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              is determined as follows:
            </p>
            <ul>
              <li>If the interface has no <a class='dfnref' href='#dfn-mixin'>mixins</a> and
                no <a class='dfnref' href='#dfn-prototype-parent'>prototype parent</a>, then
                the internal <span class='prop'>[[Prototype]]</span> property’s
                value is a reference to the <span class='estype'>Object</span> prototype object.</li>
              <li>Otherwise, if the interface has no <a class='dfnref' href='#dfn-mixin'>mixins</a>
                but does have a <a class='dfnref' href='#dfn-prototype-parent'>prototype parent</a>,
                then the internal <span class='prop'>[[Prototype]]</span> property’s
                value is a reference to the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
                of that prototype parent.</li>
              <li>Otherwise, the interface does have <a class='dfnref' href='#dfn-mixin'>mixins</a>.
                The internal <span class='prop'>[[Prototype]]</span> property’s value
                is a reference to the <a class='dfnref' href='#dfn-mixin-prototype-object'>mixin prototype object</a>
                for the interface (defined below).</li>
            </ul>

            <div id='mixin-prototype' class='section'>
              <h5>Mixin prototype object</h5>
              <p>
                The <dfn id='dfn-mixin-prototype-object'>mixin prototype object</dfn>
                for an interface is an object as follows:
              </p>
              <ul>
                <li>The object has properties that are the union of all
                  properties that exist on the interface’s
                  <a class='dfnref' href='#dfn-mixin'>mixins</a>’
                  <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype objects</a>.</li>
                <li>
                  The object’s internal <span class='prop'>[[Prototype]]</span> property
                  value is a reference to the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
                  for the interface’s <a class='dfnref' href='#dfn-prototype-parent'>prototype parent</a>,
                  or, if the interface has no prototype parent, a reference to the <span class='estype'>Object</span>
                  prototype object.</li>
              </ul>
              <div class='ednote'>
                <p>
                  Need to say what happens when there are conflicting properties
                  from different mixin interface prototype objects that need to
                  be put on the mixin prototype object.
                </p>
              </div>
            </div>
          </div>

          <div id='es-constants' class='section'>
            <h4>Constants</h4>

            <p>
              For each <a class='dfnref' href='#dfn-constant'>constant</a> defined on
              the <a class='dfnref' href='#dfn-interface'>interface</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding property on
              the <a class='dfnref' href='#dfn-interface-object'>interface object</a>
              (if it exists) and the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>:
            </p>
            <ul>
              <li>The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the <a class='dfnref' href='#dfn-constant'>constant</a>.</li>
              <li>The value of the property is that which is obtained by <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> the <a class='dfnref' href='#dfn-constant'>constant</a>’s IDL value to an ECMAScript value.</li>
              <li>The property has attributes <span class='propattrset'>{ DontDelete, ReadOnly }</span>.</li>
            </ul>
          </div>

          <div id='es-operations' class='section'>
            <h4>Operations</h4>

            <p>
              For each unique <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of an <a class='dfnref' href='#dfn-operation'>operation</a>
              defined on the <a class='dfnref' href='#dfn-interface'>interface</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding property on
              the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>:
            </p>
            <ul>
              <li>The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a>.</li>
              <li>The property has attributes <span class='propattrset'>{ DontEnum }</span>.</li>
              <li>
                The value of the property is an object whose internal
                <span class='prop'>[[Call]]</span> method
                behaves as follows, assuming <var>id</var> is the
                <a class='dfnref' href='#dfn-identifier'>identifier</a>,
                <var>arg</var><sub>0‥<var>n</var>−1</sub> is the list
                of argument values passed to <span class='prop'>[[Call]]</span>
                and <var>I</var> is the <a class='dfnref' href='#dfn-interface'>interface</a>:
                <ol class='algorithm'>
                  <li>
                    Initialize <var>S</var> to the
                    <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                    for <a class='dfnref' href='#dfn-operation'>operations</a> with
                    <a class='dfnref' href='#dfn-identifier'>identifier</a>
                    <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                    <var>I</var>.
                  </li>
                  <li>
                    Set <var>S</var> to the result of passing <var>S</var> and
                    <var>arg</var><sub>0‥<var>n</var>−1</sub> to the
                    <a class='dfnref' href='#dfn-overload-resolution-algorithm'>overload resolution algorithm</a>.
                  </li>
                  <li>
                    If <var>S</var> is empty, throw a <span class='estype'>TypeError</span>.
                  </li>
                  <li>
                    If <var>S</var> contains more than one entry, then the
                    operation call is ambiguous.  Remove all but one entry from
                    <var>S</var> according to rules specified in the description
                    of <a class='dfnref' href='#dfn-interface'>interface</a>
                    <var>I</var>, or arbitrarily if no such rules exist.
                  </li>
                  <li>
                    Let <var>op</var> be the operation <var>t</var><sub>0‥<var>m</var>−1</sub>
                    be the type list of the single entry in <var>S</var>.
                  </li>
                  <li>
                    Let <var>idlarg</var><sub>0‥<var>m</var>−1</sub> be a list
                    of IDL values, where <var>idlarg</var><sub><var>i</var></sub>
                    is the result of
                    <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                    <var>arg</var><sub><var>i</var></sub> to an IDL value.
                  </li>
                  <li x:step='a'>
                    Perform the actions listed in the description of
                    operation <var>op</var> with <var>idlarg</var><sub>0‥<var>m</var>−1</sub>
                    as the argument values.
                  </li>
                  <li>
                    If the actions performed in the previous step resulted
                    in an exception being thrown, then allow that exception
                    to propagate out from this algorithm.  Otherwise,
                    return the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                    Result(<?stepref a?>) to an ECMAScript value of
                    the type <var>op</var> is declared to return.
                  </li>
                </ol>
              </li>
            </ul>

            <p>
              In addition, if the <a class='dfnref' href='#dfn-interface'>interface</a>
              is declared with the <a class='xattr' href='#Stringifies'>[Stringifies]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
              a property <span class='rfc2119'>MUST</span> exist on
              the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              whose name is <span class='prop'>toString</span> and whose value is a
              callable object.  If the
              <a class='xattr' href='#Stringifies'>[Stringifies]</a>
              extended attribute on the interface
              <a class='dfnref' href='#dfn-xattr-identifier'>took an identifier argument</a>
              <var>P</var>, assuming <var>O</var> is the object on which
              the function was invoked, then the internal
              <span class='prop'>[[Call]]</span> method of the object
              <span class='rfc2119'>MUST</span> behave as follows:
            </p>
            <ol class='algorithm'>
              <li>
                Invoke the <span class='prop'>[[Get]]</span> method of object
                <var>O</var> with <var>P</var> as the argument.
              </li>
              <li>Compute ToString(Result(1)).</li>
              <li>Return Result(2).</li>
            </ol>
            <p>
              If the <a class='xattr' href='#Stringifies'>[Stringifies]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              on the <a class='dfnref' href='#dfn-interface'>interface</a>
              <a class='dfnref' href='#dfn-xattr-no-argument'>took no argument</a>,
              then the behavior of the internal <span class='prop'>[[Call]]</span>
              method of the object is the stringification behavior of the
              interface, as described in the prose for the interface.
            </p>
          </div>

        </div>

        <div id='host-objects' class='section'>
          <h3>Host objects implementing interfaces</h3>

          <p>
            If a host object implements an <a class='dfnref' href='#dfn-interface'>interface</a>,
            then for each <a class='dfnref' href='#dfn-attribute'>attribute</a> defined on
            the interface, there <span class='rfc2119'>MUST</span> be a corresponding property on the host object:
          </p>
          <ul>
            <li>
              The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the <a class='dfnref' href='#dfn-attribute'>attribute</a>.
            </li>
            <li>
              If the <a class='dfnref' href='#dfn-attribute'>attribute</a> is declared <code>readonly</code>, the property has attributes <span class='propattrset'>{ DontDelete, ReadOnly }</span>.
              Otherwise, the property has attributes <span class='propattrset'>{ DontDelete }</span>.
            </li>
            <li>
              When getting the property, the value returned is the result of
              <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              the <a class='dfnref' href='#dfn-attribute'>attribute</a>’s
              IDL value to an ECMAScript value.
            </li>
            <li>
              If the <a class='dfnref' href='#dfn-attribute'>attribute</a> is
              not declared <code>readonly</code>, then when setting the property
              to a particular ECMAScript value, the IDL value assigned to the
              attribute is the result of
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
              the ECMAScript value to an IDL value.
            </li>
          </ul>
          <p>
            If a host object implements more than one interface with an attribute of a given name,
            it is implementation specific which attribute the property corresponds to.
          </p>

          <!--
          <p>
            No particular value must be used for the internal
            <span class='prop'>[[Prototype]]</span> property of the host object.
            However, it <span class='rfc2119'>MUST</span> be an object that provides access to the properties
            corresponding to the <a class='dfnref' href='#dfn-operation'>operations</a> and
            <a class='dfnref' href='#dfn-constant'>constants</a> defined on all
            interfaces the host object implements.  Changes made to the
            <a class='dfnref' href='#dfn-interface-prototype-object'>interface
              prototype objects</a> of interfaces implemented by the host object <span class='rfc2119'>MUST</span>
            be reflected through this object.  If more than one interface prototype
            object has a given property, it is implementation specific which one
            is accessed.
          </p>

          <div class='example'>
            <p>
              Assume the IDL and interface prototype objects given in the
              <a href='#interface-prototype-object-example'>section
                <?sref interface-prototype-object?> example</a>.
            </p>
            <p>
              Now assume that <var>ab</var> is a host object that implements
              <span class='idltype'>A</span> and <span class='idltype'>B</span>
              and <var>d</var> is a host object that implements
              <span class='idltype'>D</span>.
              The following is one way for an implementation to connect the
              host objects to the interface prototype objects:
            </p>
            <ul>
              <li>
                The <span class='prop'>[[Prototype]]</span> internal property of
                the host object <var>ab</var> is an object that provides access
                to the properties from the interface prototype objects for both
                <span class='idltype'>A</span> and <span class='idltype'>B</span>:
                <ul>
                  <li>
                    The <span class='prop'>[[Prototype]]</span> internal property
                    of the <span class='prop'>[[Prototype]]</span> object for <var>ab</var>
                    is <span class='esvalue'>null</span>.
                  </li>
                  <li>
                    The <span class='prop'>[[Get]]</span> internal method
                    of the <span class='prop'>[[Prototype]]</span> object for <var>ab</var>
                    behaves as follows (where <var>O</var> is the object and
                    <var>P</var> is the property name):
                    <ol class='algorithm'>
                      <li>
                        If <var>O</var> doesn’t have a property with name
                        <var>P</var>, go to step 4.
                      </li>
                      <li>Get the value of the property <var>P</var> on object <var>O</var>.</li>
                      <li>Return Result(2).</li>
                      <li>
                        Call the <span class='prop'>[[HasProperty]]</span> method
                        of the interface prototype object for
                        <span class='idltype'>A</span> with property name <var>P</var>.
                      </li>
                      <li>
                        If Result(4) is <span class='esvalue'>false</span>, go to
                        step 8.
                      </li>
                      <li>
                        Call the <span class='prop'>[[Get]]</span> method of the
                        interface prototype object for <span class='idltype'>A</span>
                        with property name <var>P</var>.
                      </li>
                      <li>Return Result(6).</li>
                      <li>
                        Call the <span class='prop'>[[HasProperty]]</span> method
                        of the interface prototype object for
                        <span class='idltype'>B</span> with property name <var>P</var>.
                      </li>
                      <li>
                        If Result(8) is <span class='esvalue'>false</span>, go to
                        step 12.
                      </li>
                      <li>
                        Call the <span class='prop'>[[Get]]</span> method of the
                        interface prototype object for <span class='idltype'>B</span>
                        with property name <var>P</var>.
                      </li>
                      <li>Return Result(10).</li>
                      <li>Return <span class='esvalue'>undefined</span>.</li>
                    </ol>
                  </li>
                  <li>
                    The <span class='prop'>[[CanPut]]</span> internal method
                    of the <span class='prop'>[[Prototype]]</span> object for <var>ab</var>
                    behaves as follows (where <var>O</var> is the object and
                    <var>P</var> is the property name):
                    <ol class='algorithm'>
                      <li>
                        If <var>O</var> doesn’t have a property with name <var>P</var>,
                        go to step 4.
                      </li>
                      <li>If the property has the ReadOnly attribute, return <span class='esvalue'>false</span>.</li>
                      <li>Return <span class='esvalue'>true</span>.</li>
                      <li>
                        Call the <span class='prop'>[[CanPut]]</span> method of the
                        interface prototype object for <span class='idltype'>A</span>
                        with property name <var>P</var>.
                      </li>
                      <li>
                        If Result(4) is <span class='esvalue'>false</span>, return
                        <span class='esvalue'>false</span>.
                      </li>
                      <li>
                        Call the <span class='prop'>[[CanPut]]</span> method of the
                        interface prototype object for <span class='idltype'>B</span>
                        with property name <var>P</var>.
                      </li>
                      <li>
                        If Result(6) is <span class='esvalue'>false</span>, return
                        <span class='esvalue'>false</span>.
                      </li>
                      <li>Return <span class='esvalue'>true</span>.</li>
                    </ol>
                    <p>
                      Note that this method shouldn’t strictly be required, since
                      there would be no way for script to get access to the
                      <span class='prop'>[[Prototype]]</span> object for <var>ab</var>.
                    </p>
                  </li>
                  <li>
                    The <span class='prop'>[[HasProperty]]</span> internal method
                    of the <span class='prop'>[[Prototype]]</span> object for <var>ab</var>
                    behaves as follows (where <var>O</var> is the object and
                    <var>P</var> is the property name):
                    <ol class='algorithm'>
                      <li>
                        If <var>O</var> has a property with name <var>P</var>,
                        return <span class='esvalue'>true</span>.
                      </li>
                      <li>
                        Call the <span class='prop'>[[HasProperty]]</span> method of the
                        interface prototype object for <span class='idltype'>A</span>
                        with property name <var>P</var>.
                      </li>
                      <li>
                        If Result(2) is <span class='esvalue'>true</span>, return
                        <span class='esvalue'>true</span>.
                      </li>
                      <li>
                        Call the <span class='prop'>[[HasProperty]]</span> method of the
                        interface prototype object for <span class='idltype'>B</span>
                        with property name <var>P</var>.
                      </li>
                      <li>
                        If Result(5) is <span class='esvalue'>true</span>, return
                        <span class='esvalue'>true</span>.
                      </li>
                      <li>Return <span class='esvalue'>false</span>.</li>
                    </ol>
                  </li>
                </ul>
              </li>
              <li>
                The <span class='prop'>[[Prototype]]</span> internal property of
                the host object <var>d</var> is the interface prototype object
                for <span class='idltype'>D</span>, since <span class='idltype'>D</span>
                is the only interface the object directly implements.
              </li>
            </ul>
          </div>
          -->

          <p>
            The value of the internal <span class='prop'>[[Prototype]]</span>
            property of the host object depends on what
            <a class='dfnref' href='#dfn-interface'>interfaces</a> it implements,
            and in particular what its <em>primary prototype interface</em> is.
          </p>
          <p>
            If the host object implements an
            <a class='dfnref' href='#dfn-interface'>interface</a> that has
            the <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
            then the interface the host object implements that has the largest
            <a class='dfnref' href='#dfn-prototype-ancestor'>prototype ancestor</a>
            set is deemed to be the <dfn id='dfn-primary-prototype-interface'>primary prototype interface</dfn>
            of the host object.  (If there are multiple such sets, then it is
            undefined what value the internal <span class='prop'>[[Prototype]]</span>
            property has.)  Otherwise, the host object has no
            primary prototype interface.
          </p>
          <p>
            The value of the host object’s internal <span class='prop'>[[Prototype]]</span>
            property is determined as follows:
          </p>
          <ul>
            <li>
              If the host object implements no <a class='dfnref' href='#dfn-interface'>interfaces</a>,
              then its internal <span class='prop'>[[Prototype]]</span> property
              value is a reference to the <span class='estype'>Object</span>
              prototype object.
            </li>
            <li>
              If the host object implements a single
              <a class='dfnref' href='#dfn-interface'>interface</a>, then its
              internal <span class='prop'>[[Prototype]]</span> property is a
              reference to the
              <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              of that interface.
            </li>
            <li>
              Otherwise, if the host object has a <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>
              and implements no interfaces other than its primary
              prototype interface and all of its ancestors, then the value of
              the internal <span class='prop'>[[Prototype]]</span> property is
              a reference to the
              <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              for the host object’s primary prototype interface.
            </li>
            <li>
              Otherwise, the host object implements at least two
              <a class='dfnref' href='#dfn-interface'>interfaces</a>, and has no
              <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>
              or implements some interfaces other than its primary prototype
              interface and all of its ancestors.  The value of the
              internal <span class='prop'>[[Prototype]]</span> property is
              a reference to the <a class='dfnref' href='#dfn-host-object-mixin-prototype-object'>host
                object mixin prototype object</a> for the host object (defined below).
            </li>
          </ul>
          <p>
            If a host object has a
            <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>,
            then the value of the internal <span class='prop'>[[Class]]</span>
            property <span class='rfc2119'>MUST</span> be the
            <a class='dfnref' href='#dfn-identifier'>identifier</a>
            of that <a class='dfnref' href='#dfn-interface'>interface</a>.
            Otherwise, if the host object has no primary prototype interface,
            the value of the internal <span class='prop'>[[Class]]</span>
            property is implementation specific.
          </p>
          <div class='ednote'>
            <p>
              Is there a need to specify the value of <span class='prop'>[[Class]]</span>
              of interface objects and interface prototype objects?  Or is
              there a need to allow the value of <span class='prop'>[[Class]]</span>
              to be specified exactly in an extended attribute?
            </p>
          </div>

          <div id='host-object-mixin-prototype' class='section'>
            <h4>Host object mixin prototype object</h4>

            <p>
              The <dfn id='dfn-host-object-mixin-prototype-object'>host object mixin prototype object</dfn>
              for a given host object is an object as follows:
            </p>
            <ul>
              <li>The object has properties that are the union of all
                properties that exist on the <a class='dfnref' href='#dfn-interface'>interfaces</a>
                that the host object implements and which are not the host object’s
                <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>
                or one of its ancestors.</li>
              <li>The object’s internal <span class='prop'>[[Prototype]]</span> property value
                is a reference to the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
                for the host object’s <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>,
                or, if the host object has no primary prototype interface, a reference to the
                <span class='estype'>Object</span> prototype object.</li>
            </ul>
            <p>
              If two host objects implement the same set of
              <a class='dfnref' href='#dfn-interface'>interfaces</a>
              and have have references to
              <a class='dfnref' href='#dfn-host-object-mixin-prototype-object'>host object mixin prototype objects</a>
              as their internal <span class='prop'>[[Prototype]]</span> property values,
              then these host object mixin prototype objects
              <span class='rfc2119'>MUST</span> be the same object.
            </p>
          </div>

          <div id='indexed-and-named-properties' class='section'>
            <h4>Indexed and named properties</h4>

            <p>
              If a host object that implements an
              <a class='dfnref' href='#dfn-interface'>interface</a> that
              <a class='dfnref' href='#dfn-support-indexed-properties'>supports indexed properties</a>,
              the object will have additional properties that correspond to the
              object’s indexed properties.
              If the host object implements multiple interfaces that
              <a class='dfnref' href='#dfn-support-indexed-properties'>support indexed properties</a>,
              then it is undefined what additional properties will exist due to
              these indexed properties.
            </p>
            <p>
              As soon as an index <var>I</var> begins being able to be
              used to index the host object, a property called the
              <dfn id='dfn-corresponding-indexed-property'>corresponding indexed property</dfn>
              <span class='rfc2119'>MUST</span> be created on on the host
              object, but only if:
            </p>
            <ul>
              <li>the host object does not have a property named ToString(<var>I</var>), and</li>
              <li>none of the objects in the host object’s prototype chain have a property named ToString(<var>I</var>).</li>
            </ul>
            <p>
              The name of the
              <a class='dfnref' href='#dfn-corresponding-indexed-property'>corresponding indexed property</a>
              is ToString(<var>I</var>).  This name is an
              <dfn id='dfn-array-index-property-name'>array index property name</dfn>,
              which is a property name for which the following algorithm
              returns <span class='esvalue'>true</span>:
            </p>
            <ol class='algorithm'>
              <li x:step='a'>Compute ToUint32(<var>P</var>).</li>
              <li x:step='b'>Compute ToString(Result(<?stepref a?>)).</li>
              <li>If Result(<?stepref b?>) is not equal to <var>P</var> or Result(<?stepref a?>) is equal to 2<sup>32</sup> − 1, return <span class='esvalue'>false</span>.</li>
              <li>Return <span class='esvalue'>true</span>.</li>
            </ol>
            <p>
              If the <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              was not used, then the
              <a class='dfnref' href='#dfn-corresponding-indexed-property'>corresponding indexed property</a>
              will have the <span class='propattrset'>ReadOnly</span>
              attribute, and if the <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>
              extended attribute was not used, then the property will also have
              the <span class='propattrset'>DontDelete</span> attribute.
            </p>
            <p>
              If <a class='xattr' href='#IndexGetter'>[IndexGetter]</a> was specified
              on the <a class='dfnref' href='#dfn-interface'>interface</a>, then
              the value of the <a class='dfnref' href='#dfn-corresponding-indexed-property'>corresponding indexed property</a>
              whenever it is retrieved <span class='rfc2119'>MUST</span> be as
              specified in the interface description.  If
              <a class='xattr' href='#IndexGetter'>[IndexGetter]</a> was specified
              on an <a class='dfnref' href='#dfn-operation'>operation</a>
              then the value of the property whenever it is retrieved
              <span class='rfc2119'>MUST</span> be the value that would be
              returned by invoking the operation, passing the property name
              as the only argument.  It is undefined what value the property
              has if the operation does not complete properly (if it throws
              an uncaught exception, for example).
            </p>
            <p>
              Similarly, if a host object implements an
              <a class='dfnref' href='#dfn-interface'>interface</a> that
              <a class='dfnref' href='#dfn-support-named-properties'>supports named properties</a>,
              the object will have additional properties that correspond to the
              object’s named properties.  If the host object implements multiple
              interfaces that support named properties, then it is undefined
              what additional properties will exist due to these named properties.
            </p>
            <p>
              As soon as a name <var>N</var> begins being able to be used to
              index the host object, a property called the
              <dfn id='dfn-corresponding-named-property'>corresponding named property</dfn>
              <span class='rfc2119'>MUST</span> be created on the host object,
              but only if:
            </p>
            <ul>
              <li>the host object does not already have a property named <var>N</var>,</li>
              <li>none of the objects in the host object’s prototype chain have a property named <var>N</var>, and
                <!--
                <div class='ednote'>
                  <p>Maybe this should say "<var>N</var> is not the name of a property that corresponds to a constant, operation or attribute on an interface that the host object implements".</p>
                </div>
                -->
              </li>
              <li>the host object does not also implement an interface that <a class='dfnref' href='#dfn-support-indexed-properties'>supports indexed properties</a> <strong>or</strong> <var>N</var> is not an <a class='dfnref' href='#dfn-array-index-property-name'>array index property name</a>.</li>
            </ul>
            <p>
              The name of the 
              <a class='dfnref' href='#dfn-corresponding-named-property'>corresponding named property</a>
              is <var>N</var> and will have the
              <span class='propattrset'>DontEnum</span> attribute.  In addition,
              if the <a class='xattr' href='#NameSetter'>[NameSetter]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              was not used, then the property will also have the <span class='propattrset'>ReadOnly</span>
              attribute, and if the <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>
              extended attribute was not used, then the property will also have
              the <span class='propattrset'>DontDelete</span> attribute.
            </p>
            <p>
              If <a class='xattr' href='#NameGetter'>[NameGetter]</a> was specified
              on the <a class='dfnref' href='#dfn-interface'>interface</a>, then
              the value of the property whenever it is retrieved
              <span class='rfc2119'>MUST</span> be as specified in the interface
              description.  If <a class='xattr' href='#NameGetter'>[NameGetter]</a>
              was specified on an <a class='dfnref' href='#dfn-operation'>operation</a>
              then the value of the property whenever it is retrieved
              <span class='rfc2119'>MUST</span> be the value that would be
              returned by invoking the operation, passing the property name
              as the only argument.  It is undefined what value the property
              has if the operation does not complete properly (if it throws
              an uncaught exception, for example).
            </p>
            <div class='ednote'>
              <p>
                What about if the <span class='xattr'>[NameGetter]</span>-annotated operation has side effects?
              </p>
            </div>
            <p>
              Support for <a class='xattr' href='#NameCreator'>[NameCreator]</a>,
              <a class='xattr' href='#NameSetter'>[NameSetter]</a>,
              <a class='xattr' href='#IndexCreator'>[IndexCreator]</a> and
              <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>
              is handled by the <a href='#put'>host object [[Put]] method</a>
              defined in section <?sref put?>, and
              support for <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>
              and <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>
              is handled by the <a href='#delete'>host object [[Delete]] method</a>
              defined in section <?sref delete?>.
            </p>
          </div>

          <div id='put' class='section'>
            <h4>Host object [[Put]] method</h4>

            <p>
              The internal <span class='prop'>[[Put]]</span> method of every
              host object <var>O</var> that implements at least one IDL <a class='dfnref' href='#dfn-interface'>interface</a>
              <span class='rfc2119'>MUST</span> behave as follows, assuming <var>P</var> is the property name and <var>V</var>
              is the property value passed to <span class='prop'>[[Put]]</span>:
            </p>
            <div class='ednote'>
              <p>This looks terribly long and confusing.  It might be best to turn this into a structured algorithm, instead of the flat style of ECMA-262.</p>
            </div>
            <ol class='algorithm'>
              <li x:step='a-a'>If <var>P</var> is not the <a class='dfnref' href='#dfn-names-of-the-supported-named-properties'>name of a supported named property</a>, then go to step <?stepref a-o?>.</li>
              <li x:step='a-b'>If <var>O</var> has a property that is the <a class='dfnref' href='#dfn-corresponding-named-property'>corresponding named property</a> for the named property <var>P</var>,
                 then go to step <?stepref a-i?>.</li>
              <li x:step='a-c'>If <var>O</var> does not implement a <a class='xattr' href='#NameCreator'>[NameCreator]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>,
                 then go to step <?stepref a-f?>.</li>
              <li x:step='a-d'>Perform the behavior for creating a named property as specified by the
                 description of the <a class='xattr' href='#NameCreator'>[NameCreator]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>.</li>
              <li x:step='a-e'>Return.</li>

              <li x:step='a-f'>Determine a callable object that corresponds to a <a class='xattr' href='#NameCreator'>[NameCreator]</a>-annotated
                 <a class='dfnref' href='#dfn-operation'>operation</a> on an <a class='dfnref' href='#dfn-interface'>interface</a> that <var>O</var> implements.  If there is no
                 such operation, then go to step <?stepref a-o?>.</li>
              <li x:step='a-g'>Invoke the <span class='prop'>[[Call]]</span> method of Result(<?stepref a-f?>), providing <var>O</var> as the
                 this value and with <var>P</var> and <var>V</var> as the two argument
                 values.</li>
              <li x:step='a-h'>Return.</li>

              <li x:step='a-i'>If <var>O</var> does not implement a <a class='xattr' href='#NameSetter'>[NameSetter]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>,
                 then go to step <?stepref a-l?>.</li>
              <li x:step='a-j'>Perform the behavior for setting a named property as specified by the
                  description of the <a class='xattr' href='#NameSetter'>[NameSetter]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>.</li>
              <li x:step='a-k'>Return.</li>

              <li x:step='a-l'>Determine a callable object that corresponds to a <a class='xattr' href='#NameSetter'>[NameSetter]</a>-annotated
                  <a class='dfnref' href='#dfn-operation'>operation</a> on an <a class='dfnref' href='#dfn-interface'>interface</a> that <var>O</var> implements.  If there is no
                  such operation, then go to step <?stepref a-o?>.</li>
              <li x:step='a-m'>Invoke the <span class='prop'>[[Call]]</span> method of Result(<?stepref a-l?>), providing <var>O</var> as the
                  this value and with <var>P</var> and <var>V</var> as the two argument
                  values.</li>
              <li x:step='a-n'>Return.</li>

              <li x:step='a-o'>If <var>P</var> is not the <a class='dfnref' href='#dfn-indices-of-the-supported-indexed-properties'>index of a supported indexed property</a>, then go to step <?stepref n?>.</li>
              <li x:step='a-p'>If <var>O</var> has a property that is the <a class='dfnref' href='#dfn-corresponding-indexed-property'>corresponding indexed property</a> for the indexed property <var>P</var>,
                  then go to step <?stepref a-w?>.</li>
              <li x:step='a-q'>If <var>O</var> does not implement an <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>,
                  then go to step <?stepref a-t?>.</li>
              <li x:step='a-r'>Perform the behavior for creating an indexed property as specified by the
                  description of the <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>.</li>
              <li x:step='a-s'>Return.</li>

              <li x:step='a-t'>Determine a callable object that corresponds to an <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>-annotated
                  <a class='dfnref' href='#dfn-operation'>operation</a> on an <a class='dfnref' href='#dfn-interface'>interface</a> that <var>O</var> implements.  If there is no
                  such operation, then go to step <?stepref n?>.</li>
              <li x:step='a-u'>Invoke the <span class='prop'>[[Call]]</span> method of Result(<?stepref a-t?>), providing <var>O</var> as the
                  this value and with <var>P</var> and <var>V</var> as the two argument
                  values.</li>
              <li x:step='a-v'>Return.</li>

              <li x:step='a-w'>If <var>O</var> does not implement an <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>,
                  then go to step <?stepref a-z?>.</li>
              <li x:step='a-x'>Perform the behavior for setting a named property as specified by the
                  description of the <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>.</li>
              <li x:step='a-y'>Return.</li>

              <li x:step='a-z'>Determine a callable object that corresponds to an <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>-annotated
                  <a class='dfnref' href='#dfn-operation'>operation</a> on an <a class='dfnref' href='#dfn-interface'>interface</a> that <var>O</var> implements.  If there is no
                  such operation, then go to step <?stepref n?>.</li>
              <li x:step='a-aa'>Invoke the <span class='prop'>[[Call]]</span> method of Result(<?stepref a-z?>), providing <var>O</var> as the
                  this value and with <var>P</var> and <var>V</var> as the two argument
                  values.</li>
              <li x:step='a-ab'>Return.</li>

              <li x:step='n'>
                If <var>O</var> does not have a property with name <var>P</var>,
                then go to step <?stepref s?>.
              </li>
              <li x:step='o'>
                If the property on <var>O</var> with name <var>P</var> does not correspond
                to an <a class='dfnref' href='#dfn-attribute'>attribute</a> declared with a
                <a class='xattr' href='#PutForwards'>[PutForwards]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                then go to step <?stepref s?>.
              </li>
              <li x:step='p'>
                Call the <span class='prop'>[[Get]]</span> method of <var>O</var> with name
                <var>P</var>.
              </li>
              <li x:step='q'>
                Call the <span class='prop'>[[Put]]</span> method of Result(<?stepref p?>) with the property
                name being the argument to the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
                extended attribute, and value <var>V</var>.
              </li>
              <li x:step='r'>Return.</li>

              <li x:step='s'>
                If <var>O</var> does not have a property named <var>P</var> that is the
                property corresponding to an <a class='dfnref' href='#dfn-attribute'>attribute</a>
                and which is annotated with the <a class='xattr' href='#Replaceable'>[Replaceable]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                then go to step <?stepref s2?>.
              </li>
              <li>Remove the property with name <var>P</var> from <var>O</var>.</li>
              <li>Go to step <?stepref x?>.</li>

              <li x:step='s2'>
                Call the <span class='prop'>[[CanPut]]</span> method of <var>O</var> with name
                <var>P</var>.
              </li>
              <li x:step='t'>
                If Result(<?stepref s?>) is <span class='esvalue'>false</span>,
                return.
              </li>
              <li x:step='u'>
                If <var>O</var> doesn’t have a property with name <var>P</var>,
                go to step <?stepref x?>.
              </li>

              <li x:step='v'>
                Set the value of the property to <var>V</var>.  The attributes
                of the property are not changed.
              </li>
              <li x:step='w'>Return.</li>
              <li x:step='x'>
                Create a property with name <var>P</var>, set its value to
                <var>V</var> and give it empty attributes.
              </li>
              <li x:step='y'>Return.</li>
            </ol>
          </div>

          <div id='delete' class='section'>
            <h4>Host object [[Delete]] method</h4>

            <p>
              The internal <span class='prop'>[[Delete]]</span> method of every
              host object <var>O</var> that implements at least one IDL <a class='dfnref' href='#dfn-interface'>interface</a>
              <span class='rfc2119'>MUST</span> behave as follows, assuming <var>P</var> is the property name passed to <span class='prop'>[[Delete]]</span>:
            </p>
            <ol class='algorithm'>
              <li>If <var>O</var> doesn’t have a property with name <var>P</var>, return <span class='esvalue'>true</span>.</li>
              <li>If <var>O</var> has the <span class='propattrset'>DontDelete</span> attribute, return <span class='esvalue'>false</span>.</li>
              <li>If the property with name <var>P</var> on object <var>O</var> is not a <a class='dfnref' href='#dfn-corresponding-named-property'>corresponding named property</a>, then go to step <?stepref a?>.</li>
              <li>If <var>O</var> does not implement a <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>, then go to step <?stepref c?>.</li>
              <li>Perform the behavior for deleting a named property as specified by the description of the <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>.</li>
              <li>If the behavior specified for deleting a named property indicated that the deletion failed, return <span class='esvalue'>false</span>.</li>
              <li>Return <span class='esvalue'>true</span>.</li>
              <li x:step='c'>Determine a callable object that corresponds to a <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>-annotated <a class='dfnref' href='#dfn-operation'>operation</a> on an <a class='dfnref' href='#dfn-interface'>interface</a> that <var>O</var> implements.</li>
              <li x:step='d'>Invoke the <span class='prop'>[[Call]]</span> method of Result(<?stepref c?>), providing <var>O</var> as the this value and with <var>P</var> as the argument value.</li>
              <li>If the <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>-annotated <a class='dfnref' href='#dfn-operation'>operation</a> is declared to return a value of type <a class='idltype' href='#idl-boolean'>boolean</a>, then return ToBoolean(Result(<?stepref d?>)).  Otherwise, return <span class='esvalue'>true</span>.</li>

              <li x:step='a'>If the property with name <var>P</var> on object <var>O</var> is not a <a class='dfnref' href='#dfn-corresponding-indexed-property'>corresponding indexed property</a>, then go to step <?stepref b?>.</li>

              <li>If <var>O</var> does not implement a <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>, then go to step <?stepref e?>.</li>
              <li>Perform the behavior for deleting an indexed property as specified by the description of the <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>-annotated <a class='dfnref' href='#dfn-interface'>interface</a>.</li>
              <li>If the behavior specified for deleting an indexed property indicated that the deletion failed, return <span class='esvalue'>false</span>.</li>
              <li>Return <span class='esvalue'>true</span>.</li>
              <li x:step='e'>Determine a callable object that corresponds to a <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>-annotated <a class='dfnref' href='#dfn-operation'>operation</a> on an <a class='dfnref' href='#dfn-interface'>interface</a> that <var>O</var> implements.</li>
              <li x:step='f'>Invoke the <span class='prop'>[[Call]]</span> method of Result(<?stepref e?>), providing <var>O</var> as the this value and with <var>P</var> as the argument value.</li>
              <li>If the <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>-annotated <a class='dfnref' href='#dfn-operation'>operation</a> is declared to return a value of type <a class='idltype' href='#idl-boolean'>boolean</a>, then return ToBoolean(Result(<?stepref f?>)).  Otherwise, return <span class='esvalue'>true</span>.</li>

              <li x:step='b'>Remove the property with name <var>P</var> from <var>O</var>.</li>
              <li>Return <span class='esvalue'>true</span>.</li>
            </ol>
          </div>

          <p>
            Note that assigning a value to a property that corresponds
            to an <a class='dfnref' href='#dfn-attribute'>attribute</a>
            results in that value being
            <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
            to an IDL value and assigned to the attribute,
            as described in <a href='#host-objects'>section <?sref host-objects?></a>.
          </p>

          <div id='call' class='section'>
            <h4>Host object [[Call]] method</h4>

            <p>
              The internal <span class='prop'>[[Call]]</span> method of every
              host object <var>O</var> that implements an IDL <a class='dfnref' href='#dfn-interface'>interface</a>
              that is annotated with the <a class='xattr' href='#Callable'>[Callable]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              <span class='rfc2119'>MUST</span> behave as follows:
            </p>
            <ol class='algorithm'>
              <li x:step='a'>
                Determine the callable object that corresponds to the
                <a class='dfnref' href='#dfn-operation'>operation</a> that the
                <a class='xattr' href='#Callable'>[Callable]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                identifies.
              </li>
              <li x:step='b'>
                Invoke the <span class='prop'>[[Call]]</span> method of
                Result(<?stepref a?>), providing <var>O</var> as the
                <span class='esvalue'>this</span> value and providing the
                same argument list that was passed to this <span class='prop'>[[Call]]</span>
                method invocation.
              </li>
              <li>
                Return Result(<?stepref b?>).
              </li>
            </ol>
          </div>
        </div>

        <div id='native-objects' class='section'>
          <h3>Native objects implementing interfaces</h3>

          <p>
            Some <a class='dfnref' href='#dfn-interface'>interfaces</a> can be
            implemented in script by an ECMAScript native object.  Only interfaces
            with the following characteristics can have native object implementations:
          </p>
          <ul>
            <li>
              The interface does not <a class='dfnref' href='#dfn-inherit'>inherit</a>
              from any other interface.
            </li>
            <li>
              The interface has a 
              <a class='xattr' href='#Callback'>[Callback]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              on it.
            </li>
            <li>
              The interface does not have a
              <a class='xattr' href='#Callable'>[Callable]</a>,
              <a class='xattr' href='#Constructor'>[Constructor]</a>,
              <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>,
              <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>,
              <a class='xattr' href='#IndexGetter'>[IndexGetter]</a>,
              <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>,
              <a class='xattr' href='#NameCreator'>[NameCreator]</a>,
              <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>,
              <a class='xattr' href='#NameGetter'>[NameGetter]</a>,
              <a class='xattr' href='#NameSetter'>[NameSetter]</a> or
              <a class='xattr' href='#Stringifies'>[Stringifies]</a>
              extended attribute on it.
            </li>
            <!--
            <li>
              The interface has no <a class='dfnref' href='#dfn-constant'>constants</a>.
            </li>
            -->
            <li>
              No <a class='dfnref' href='#dfn-attribute'>attribute</a> on the interface
              has a <a class='xattr' href='#Null'>[Null]</a>,
              <a class='xattr' href='#PutForwards'>[PutForwards]</a> or
              <a class='xattr' href='#Undefined'>[Undefined]</a>
              extended attribute on it.
            </li>
            <li>
              No <a class='dfnref' href='#dfn-operation'>operation</a> on the interface
              <a class='xattr' href='#IndexCreator'>[IndexCreator]</a>,
              <a class='xattr' href='#IndexDeleter'>[IndexDeleter]</a>,
              <a class='xattr' href='#IndexGetter'>[IndexGetter]</a>,
              <a class='xattr' href='#IndexSetter'>[IndexSetter]</a>,
              <a class='xattr' href='#NameCreator'>[NameCreator]</a>,
              <a class='xattr' href='#NameDeleter'>[NameDeleter]</a>,
              <a class='xattr' href='#NameGetter'>[NameGetter]</a> or
              <a class='xattr' href='#NameSetter'>[NameSetter]</a>
              extended attribute on it.
            </li>
          </ul>
          <p>
            The following cases determine whether and how a given native object implements
            an interface with the above characteristics:
          </p>
          <ul>
            <li>
              If the interface is declared with one or more operations that all
              have the same <a class='dfnref' href='#dfn-identifier'>identifier</a>,
              the <a class='xattr' href='#Callback'>[Callback]</a>
              extended attribute on the interface has the <span class='idlident'>FunctionOnly</span>
              argument and there are no <a class='dfnref' href='#dfn-attribute'>attributes</a>
              on the interface, then the native object is considered to implement that interface if
              it is a <span class='estype'>Function</span> object.  The native object
              itself is the implementation of the operation.
            </li>
            <li>
              Otherwise, if the interface is declared with one or more operations that all
              have the same identifier but the <a class='xattr' href='#Callback'>[Callback]</a>
              extended attribute on the interface does not have the <span class='idlident'>FunctionOnly</span>
              argument, then any native object is considered to implement that interface.
              If the native object is a <span class='estype'>Function</span> object,
              the <a class='xattr' href='#Callback'>[Callback]</a> extended attribute
              does not have the <span class='idlident'>PropertyOnly</span> argument
              and the interface has no <a class='dfnref' href='#dfn-attribute'>attributes</a>,
              then the function itself is the implementation of the operation.
              Otherwise, the implementation of the operation is the result of
              invoking <span class='prop'>[[Get]]</span> on the native object
              with a property name that is the identifier of the operation.
            </li>
            <li>
              Otherwise, the operations declared on the interface have zero or more than
              one distinct identifiers or the interface has attributes declared on it.
              Any native object is considered to implement the interface.
              For each operation declared on the interface, the implementation
              of that operation is the result of invoking
              <span class='prop'>[[Get]]</span> on the native object with a
              property name that is the identifier of the operation.
            </li>
          </ul>
          <p>
            A user agent calls a native object’s operation implementation with a list
            of IDL argument values <var>idlarg</var><sub>0‥<var>n</var>−1</sub> by
            following the algorithm below.  The <dfn id='callback-this-value'>callback this value</dfn>
            is the value to use as the <span class='esvalue'>this</span> value
            when calling the native object’s operation implementation
            <span class='prop'>[[Call]]</span> method.  By default, the native object
            itself is used as the <a class='dfnref' href='#dfn-callback-this-value'>callback this value</a>,
            however this <span class='rfc2119'>MAY</span> be overridden by other
            specifications.
          </p>
          <ol class='algorithm'>
            <li>Let <var>O</var> be the native object.</li>
            <li>Let <var>X</var> be the implementation of the operation.</li>
            <li>If Type(<var>X</var>) is not Object, throw a <span class='estype'>TypeError</span> exception.</li>
            <li>If <var>X</var> does not implement the internal <span class='prop'>[[Call]]</span> method, throw a <span class='estype'>TypeError</span> exception.</li>
            <li>
              Let <var>arg</var><sub>0‥<var>n</var>−1</sub> be a list of
              ECMAScript values, where <var>arg</var><sub><var>i</var></sub> is the result
              of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript'>converting</a>
              <var>idlarg</var><sub><var>i</var></sub> to an ECMAScript value.
            </li>
            <li x:step='a'>Invoke the <span class='prop'>[[Call]]</span> method of <var>X</var>, providing the <a class='dfnref' href='#dfn-callback-this-value'>callback this value</a> as the <span class='esvalue'>this</span> value and <var>arg</var><sub>0‥<var>n</var>−1</sub> as the argument values.</li>
            <li>
              Return the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl'>converting</a>
              Result(<?stepref a?>) to an IDL value.
            </li>
          </ol>
          <p>
            Note that while an <a class='dfnref' href='#dfn-interface'>interface</a>
            with <a class='dfnref' href='#dfn-constant'>constants</a> can be
            implemented by a native object, no properties corresponding to those
            constants need be on the object.
          </p>
        </div>

        <div id='es-exceptions' class='section'>
          <h3>Exceptions</h3>

          <p>
            For every <a class='dfnref' href='#dfn-exception'>exception</a> that is not declared with the
            <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
            a corresponding property <span class='rfc2119'>MUST</span> exist on the ECMAScript global object
            whose name is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the exception.
            The value of this property is an object called the
            <dfn id='dfn-exception-interface-object'>exception interface object</dfn>,
            which provides access to any <a class='dfnref' href='#dfn-constant'>constants</a> that
            have been associated with the exception.  The property has the
            attributes <span class='propattrset'>{ DontDelete, DontEnum }</span>.
          </p>

          <div id='exception-interface-object' class='section'>
            <h4>Exception interface object</h4>

            <p>
              The exception interface object for a particular <a class='dfnref' href='#dfn-exception'>exception</a>
              <span class='rfc2119'>MUST</span> have an internal <span class='prop'>[[Prototype]]</span> object whose
              value is the <span class='esvalue'>Object</span> prototype object.
            </p>
            <p>
              If any <a class='dfnref' href='#dfn-constant'>constants</a> have been associated with the
              exception through the <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
              then the exception interface object will have
              properties corresponding to these constants as described in
              <a href='#es-exception-constants'>section <?sref es-exception-constants?></a>
              <?sdir es-exception-constants?>.
            </p>
            <p>
              The exception interface object <span class='rfc2119'>MUST</span> also have a property named
              <span class='prop'>prototype</span> with attributes
              <span class='propattrset'>{ DontDelete, ReadOnly }</span>
              whose value is an object called the <dfn id='dfn-exception-interface-prototype-object'>exception interface prototype
                object</dfn>.  This object also provides access to the constants
              that are associated with the exception through the
              <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a>
              extended attribute.
            </p>

            <div id='es-exception-hasinstance' class='section'>
              <h5>Exception interface object [[HasInstance]] method</h5>

              <p>
                The internal <span class='prop'>[[HasInstance]]</span> method of every
                <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>
                <var>E</var> <span class='rfc2119'>MUST</span> behave as follows, assuming <var>V</var> is the object
                argument passed to <span class='prop'>[[HasInstance]]</span>:
              </p>
              <ol class='algorithm'>
                <li>If <var>V</var> is not an object, return <span class='esvalue'>false</span>.</li>
                <li>If <var>V</var> is a host object that is an <a class='dfnref' href='#dfn-exception'>exception</a>
                  whose exception interface object is <var>E</var>, return <span class='esvalue'>true</span>.</li>
                <li>Return <span class='esvalue'>false</span>.</li>
              </ol>
            </div>
          </div>

          <div id='es-exception-interface-prototype-object' class='section'>
            <h4>Exception interface prototype object</h4>

            <p>
              There <span class='rfc2119'>MUST</span> exist an
              <a class='dfnref' href='#dfn-exception-interface-prototype-object'>exception interface prototype object</a>
              for every <a class='dfnref' href='#dfn-exception'>exception</a>
              defined, regardless of whether the exception was declared with the
              <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
              The exception interface prototype object for a particular exception has
              properties that correspond to the <a class='dfnref' href='#dfn-constant'>constants</a>
              associated with the exception with the <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a>
              extended attribute.  These properties are described in more detail in
              <a href='#es-exception-constants'>section <?sref es-exception-constants?></a> <?sdir es-exception-constants?>.
            </p>
          </div>

          <div id='es-exception-constants' class='section'>
            <h4>Constants</h4>

            <p>
              If the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              of the <a class='dfnref' href='#dfn-exception'>exception</a>
              has an <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              whose argument is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the exception,
              then there <span class='rfc2119'>MUST</span> be a property, corresponding
              to each <a class='dfnref' href='#dfn-constant'>constant</a> defined on the enclosing module, on
              the <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>
              (if it exists) and the
              <a class='dfnref' href='#dfn-exception-interface-prototype-object'>exception interface prototype object</a>:
            </p>
            <ul>
              <li>The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the constant.</li>
              <li>The value of the property is the ECMAScript value that is equivalent to the constant’s IDL value, according
                to the rules in <a href='#es-type-mapping'>section <?sref es-type-mapping?></a> <?sdir es-type-mapping?>.</li>
              <li>The property has attributes <span class='propattrset'>{ DontDelete, ReadOnly }</span>.</li>
            </ul>
          </div>
        </div>

        <div id='host-exception-objects' class='section'>
          <h3>Host exception objects</h3>

          <p>
            A <dfn id='dfn-host-exception-object'>host exception object</dfn>
            is a host object that implements a given <a class='dfnref' href='#dfn-exception'>exception</a>.
            The behavior of a host object that implements more than one exception, or
            an exception as well as an <a class='dfnref' href='#dfn-interface'>interface</a>, is not defined.
          </p>
          <p>
            A host exception object <span class='rfc2119'>MUST</span> have a property
            for each <a class='dfnref' href='#dfn-exception-member'>exception member</a>
            declared on the exception:
          </p>
          <ul>
            <li>The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the exception member.</li>
            <li>The property has attributes <span class='propattrset'>{ DontDelete }</span>.</li>
          </ul>
          <p>
            The value of the internal <span class='prop'>[[Prototype]]</span>
            property of the host exception object
            <span class='rfc2119'>MUST</span> be the <a class='dfnref' href='#dfn-exception-interface-prototype-object'>exception interface prototype object</a>.
          </p>
          <p>
            The value of the internal <span class='prop'>[[Class]]</span>
            property of the host exception object <span class='rfc2119'>MUST</span>
            be the <a class='dfnref' href='#dfn-identifier'>identifier</a>
            of the <a class='dfnref' href='#dfn-exception'>exception</a>.
          </p>
        </div>
      </div>

      <div id='java-binding' class='section'>
        <h2>Java binding</h2>

        <p>
          This section describes how definitions written with the IDL in
          <a href='#idl'>section <?sref idl?></a> correspond to particular constructs
          in Java 5 <a href='#ref-JLS3'>[JLS3]</a>.
        </p>

        <div id='java-names' class='section'>
          <h3>Names</h3>

          <p>
            Since Java has a number of reserved words in the language, identifiers
            of Java constructs corresponding to IDL definitions need to be escaped
            to avoid conflicts.  A name is <dfn id='dfn-java-escaped'>Java escaped</dfn>
            as follows:
          </p>
          <ul>
            <li>
              If the name is a Java reserved word, then the Java escaped name is the
              name prefixed with a <span class='char'>U+005F LOW LINE ("_")</span>
              character.
            </li>
            <li>
              Otherwise, the name is not a Java reserved word.  The Java escaped name
              is simply the name.
            </li>
          </ul>
        </div>

        <div class='note'>
          <p>
            At the time of publication, the list of Java reserved words is the following:
            <code>abstract</code>,
            <code>assert</code>,
            <code>boolean</code>,
            <code>break</code>,
            <code>byte</code>,
            <code>case</code>,
            <code>catch</code>,
            <code>char</code>,
            <code>class</code>,
            <code>const</code>,
            <code>continue</code>,
            <code>default</code>,
            <code>do</code>,
            <code>double</code>,
            <code>else</code>,
            <code>enum</code>,
            <code>extends</code>,
            <code>final</code>,
            <code>finally</code>,
            <code>float</code>,
            <code>for</code>,
            <code>goto</code>,
            <code>if</code>,
            <code>implements</code>,
            <code>import</code>,
            <code>instanceof</code>,
            <code>int</code>,
            <code>interface</code>,
            <code>long</code>,
            <code>native</code>,
            <code>new</code>,
            <code>package</code>,
            <code>private</code>,
            <code>protected</code>,
            <code>public</code>,
            <code>return</code>,
            <code>short</code>,
            <code>static</code>,
            <code>strictfp</code>,
            <code>super</code>,
            <code>switch</code>,
            <code>synchronized</code>,
            <code>this</code>,
            <code>throw</code>,
            <code>throws</code>,
            <code>transient</code>,
            <code>try</code>,
            <code>void</code>,
            <code>volatile</code>,
            <code>while</code>.
          </p>
        </div>

        <div id='java-type-mapping' class='section'>
          <h3>Java type mapping</h3>

          <p>
            This section describes how types in the IDL map to types
            in Java.
          </p>
          <div class='ednote'>
            <p>
              This section should use the same kind of wording and definitions
              that the ECMAScript type mapping section uses.
            </p>
          </div>

          <div id='java-any' class='section'>
            <h4>any</h4>
            <p>
              The <a class='idltype' href='#idl-any'>any</a> IDL type corresponds to a
              Java <span class='javatype'>java.lang.Object</span> value.  Values of
              IDL types that correspond to Java primitive types <span class='rfc2119'>MUST</span>
              be represented with an object according to the following table:
            </p>
            <table class='vert'>
              <tr>
                <th>IDL type</th>
                <th>Java class</th>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-boolean'>boolean</a></td>
                <td><span class='javatype'>java.lang.Boolean</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-octet'>octet</a></td>
                <td><span class='javatype'>java.lang.Byte</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-short'>short</a></td>
                <td><span class='javatype'>java.lang.Short</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-unsigned-short'>unsigned short</a></td>
                <td><span class='javatype'>java.lang.Short</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-long'>long</a></td>
                <td><span class='javatype'>java.lang.Integer</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-unsigned-long'>unsigned long</a></td>
                <td><span class='javatype'>java.lang.Integer</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-long-long'>long long</a></td>
                <td><span class='javatype'>java.lang.Long</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a></td>
                <td><span class='javatype'>java.lang.Long</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-float'>float</a></td>
                <td><span class='javatype'>java.lang.Float</span></td>
              </tr>
            </table>
          </div>

          <div id='java-void' class='section'>
            <h4>void</h4>

            <p>
              The only place that the <a class='idltype' href='#idl-void'>void</a> type may appear
              in IDL is as the <a class='dfnref' href='#dfn-return-type'>return type</a>
              of an <a class='dfnref' href='#dfn-operation'>operation</a>.  Methods on Java objects
              that implement an operation whose IDL specifies a <a class='idltype' href='#idl-void'>void</a>
              return type <span class='rfc2119'>MUST</span> be declared to have a return type of <span class='javatype'>void</span>.
            </p>
          </div>

          <div id='java-boolean' class='section'>
            <h4>boolean</h4>

            <p>
              The IDL <a class='idltype' href='#idl-boolean'>boolean</a> type maps exactly to the
              Java <span class='javatype'>boolean</span> type.
            </p>
          </div>

          <div id='java-octet' class='section'>
            <h4>octet</h4>

            <p>
              The IDL <a class='idltype' href='#idl-octet'>octet</a> type corresponds to the
              Java <span class='javatype'>byte</span> type.  Note that while
              the IDL <a class='idltype' href='#idl-octet'>octet</a> type is unsigned, with a
              range of [0, 255], the Java <span class='javatype'>byte</span> type
              is signed, with a range of [−128, 127].
            </p>
            <p>
              To encode an <a class='idltype' href='#idl-octet'>octet</a> value in a
              <span class='javatype'>byte</span>, the following steps
              <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the <a class='idltype' href='#idl-octet'>octet</a> value to encode.</li>
              <li>If <var>x</var> &lt; 128, return a <span class='javatype'>byte</span> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> ≥ 128.  Return a <span class='javatype'>byte</span> whose value is <var>x</var> − 256.</li>
            </ol>
            <p>
              Note that in Java this is the same as having the <a class='idltype' href='#idl-octet'>octet</a> value stored in
              an <span class='javatype'>int</span> and casting it to a <span class='javatype'>byte</span>.
            </p>
            <p>
              To decode an <a class='idltype' href='#idl-octet'>octet</a> value from a
              <span class='javatype'>byte</span>, the following steps
              <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the <span class='javatype'>byte</span> value to decode.</li>
              <li>If <var>x</var> ≥ 0, return an <a class='idltype' href='#idl-octet'>octet</a> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> &lt; 0.  Return an <a class='idltype' href='#idl-octet'>octet</a> whose value is <var>x</var> + 256.</li>
            </ol>
            <p>
              Note that in Java this is the same as performing a bit-wise AND of the <span class='javatype'>byte</span> value
              with the <span class='javatype'>int</span> constant <span class='javavalue'>0xff</span>.
            </p>
          </div>

          <div id='java-short' class='section'>
            <h4>short</h4>

            <p>
              The IDL <a class='idltype' href='#idl-short'>short</a> type maps exactly to
              the Java <span class='javatype'>short</span> type.
            </p>
          </div>

          <div id='java-unsigned-short' class='section'>
            <h4>unsigned short</h4>

            <p>
              The IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> type corresponds to the
              Java <span class='javatype'>short</span> type.  Note that while
              the IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> type is unsigned, with a
              range of [0, 65535], the Java <span class='javatype'>short</span> type
              is signed, with a range of [−32768, 32767].
            </p>
            <p>
              To encode an IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> value in a
              Java <span class='javatype'>short</span>, the following steps
              <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> value to encode.</li>
              <li>If <var>x</var> &lt; 32768, return a Java <span class='javatype'>short</span> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> ≥ 32768.  Return a Java <span class='javatype'>short</span> whose value is <var>x</var> − 65536.</li>
            </ol>
            <p>
              Note that in Java this is the same as having the <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> value stored in
              an <span class='javatype'>int</span> and casting it to a <span class='javatype'>short</span>.
            </p>
            <p>
              To decode an IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> value from a
              Java <span class='javatype'>short</span>, the following steps
              <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the Java <span class='javatype'>short</span> value to decode.</li>
              <li>If <var>x</var> ≥ 0, return an IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> &lt; 0.  Return an IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> whose value is <var>x</var> + 65536.</li>
            </ol>
            <p>
              Note that in Java this is the same as performing a bit-wise AND of the <span class='javatype'>short</span> value
              with the <span class='javatype'>int</span> constant <span class='javavalue'>0xffff</span>.
            </p>
          </div>

          <div id='java-long' class='section'>
            <h4>long</h4>

            <p>
              The IDL <a class='idltype' href='#idl-long'>long</a> type maps exactly to
              the Java <span class='javatype'>int</span> type.
            </p>
          </div>

          <div id='java-unsigned-long' class='section'>
            <h4>unsigned long</h4>

            <p>
              The IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> type corresponds to the
              Java <span class='javatype'>int</span> type.  Note that while
              the IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> type is unsigned, with a
              range of [0, 4294967295], the Java <span class='javatype'>int</span> type
              is signed, with a range of [−2147483648, 2147483647].
            </p>
            <p>
              To encode an IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> value in a
              Java <span class='javatype'>int</span>, the following steps
              <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> value to encode.</li>
              <li>If <var>x</var> &lt; 2147483648, return a Java <span class='javatype'>int</span> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> ≥ 2147483648.  Return a Java <span class='javatype'>int</span> whose value is <var>x</var> − 4294967296.</li>
            </ol>
            <p>
              Note that in Java this is the same as having the <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> value stored in
              a Java <span class='javatype'>long</span> and casting it to an <span class='javatype'>int</span>.
            </p>
            <p>
              To decode an IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> value from a
              Java <span class='javatype'>int</span>, the following steps
              <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the Java <span class='javatype'>int</span> value to decode.</li>
              <li>If <var>x</var> ≥ 0, return an IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> &lt; 0.  Return an IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> whose value is <var>x</var> + 4294967296.</li>
            </ol>
            <p>
              Note that in Java this is the same as performing a bit-wise AND of the <span class='javatype'>int</span> value
              with the <span class='javatype'>long</span> constant <span class='javavalue'>0xffffffffL</span>.
            </p>
          </div>

          <div id='java-long-long' class='section'>
            <h4>long long</h4>

            <p>
              The IDL <a class='idltype' href='#idl-long-long'>long long</a> type maps exactly to
              the Java <span class='javatype'>long</span> type.
            </p>
          </div>

          <div id='java-unsigned-long-long' class='section'>
            <h4>unsigned long long</h4>

            <p>
              The IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> type corresponds to the
              Java <span class='javatype'>long</span> type.  Note that while
              the IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> type is unsigned, with a
              range of [0, 18446744073709551615], the Java <span class='javatype'>long</span> type
              is signed, with a range of [−9223372036854775808, 9223372036854775807].
            </p>
            <p>
              To encode an IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> value in a
              Java <span class='javatype'>long</span>, the following steps
              <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> value to encode.</li>
              <li>If <var>x</var> &lt; 18446744073709551616, return a Java <span class='javatype'>long</span> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> ≥ 18446744073709551616.  Return a Java <span class='javatype'>long</span> whose value is <var>x</var> − 18446744073709551615.</li>
            </ol>
            <p>
              To decode an IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> value from a
              Java <span class='javatype'>long</span>, the following steps
              <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the Java <span class='javatype'>long</span> value to decode.</li>
              <li>If <var>x</var> ≥ 0, return an IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> &lt; 0.  Return an IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> whose value is <var>x</var> + 18446744073709551615.</li>
            </ol>
          </div>

          <div id='java-float' class='section'>
            <h4>float</h4>

            <p>
              The IDL <a class='idltype' href='#idl-float'>float</a> type maps exactly to
              the Java <span class='javatype'>float</span> type.
            </p>
          </div>

          <div id='java-sequence' class='section'>
            <h4>sequence&lt;<var>T</var>></h4>

            <p>
              The IDL <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> type corresponds
              to a Java array of type <var>T</var>.
            </p>
            <p>
              A Java object implementing an <a class='dfnref' href='#dfn-interface'>interface</a>
              with an <a class='dfnref' href='#dfn-operation'>operation</a> declared to return
              a <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> value
              <span class='rfc2119'>MUST NOT</span> return <span class='javavalue'>null</span> from the corresponding method.
              Similarly, a <a class='dfnref' href='#dfn-getter-method'>getter method</a> for an IDL
              <a class='dfnref' href='#dfn-attribute'>attribute</a> <span class='rfc2119'>MUST NOT</span>
              return <span class='javavalue'>null</span> if the attribute
              is declared to be of type <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>.
            </p>
            <p>
              A Java object implementing an interface with an operation declared to take
              an argument of type <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>
              <span class='rfc2119'>MUST</span> throw a <span class='javatype'>NullPointerException</span> exception
              if <span class='javavalue'>null</span> is passed as the corresponding
              argument to the corresponding method.  Similarly, a <a class='dfnref' href='#dfn-setter-method'>setter method</a>
              for an IDL attribute <span class='rfc2119'>MUST</span> throw a <span class='javatype'>NullPointerException</span> exception
              if the attribute is declared to be of type <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>.
            </p>
            <div class='ednote'>
              <p>
                Should mention what to do with null values in nested
                sequences (e.g. <span class='idltype'>sequence&lt;sequence&lt;short>></span>).
              </p>
            </div>
          </div>

          <div id='java-DOMString' class='section'>
            <h4>DOMString</h4>

            <p>
              A <a class='idltype' href='#idl-DOMString'>DOMString</a> is
              represented by a Java <span class='estype'>String</span> object.
            </p>
            <div class='ednote'>
              <p>Fix this to refer to new xattrs controlling null/etc. passed as a DOMString.</p>
            </div>
            <p>
              A Java object implementing an <a class='dfnref' href='#dfn-interface'>interface</a>
              with an <a class='dfnref' href='#dfn-operation'>operation</a> declared to return
              a <a class='idltype' href='#idl-DOMString'>DOMString</a> value <span class='rfc2119'>MUST NOT</span>
              return <span class='javavalue'>null</span> from the corresponding method.
              Similarly, a <a class='dfnref' href='#dfn-getter-method'>getter method</a> for an IDL
              <a class='dfnref' href='#dfn-attribute'>attribute</a> <span class='rfc2119'>MUST NOT</span>
              return <span class='javavalue'>null</span> if the attribute
              is declared to be of type <a class='idltype' href='#idl-sequence'>sequence&lt;unsigned short></a>.
            </p>
            <p>
              A Java object implementing an interface with an operation declared to take
              an argument of type <a class='idltype' href='#idl-DOMString'>DOMString</a>
              <span class='rfc2119'>MUST</span> throw a <span class='javatype'>NullPointerException</span> exception
              if <span class='javavalue'>null</span> is passed as the corresponding
              argument to the corresponding method.  Similarly, a <a class='dfnref' href='#dfn-setter-method'>setter method</a>
              for an IDL attribute <span class='rfc2119'>MUST</span> throw a <span class='javatype'>NullPointerException</span> exception
              if the attribute is declared to be of type <a class='idltype' href='#idl-sequence'>sequence&lt;unsigned short></a>.
            </p>
          </div>

          <div id='java-Object' class='section'>
            <h4>Object</h4>

            <p>
              The IDL <a class='idltype' href='#idl-Object'>Object</a> type maps exactly to
              the Java <span class='javatype'>java.lang.Object</span> type.
            </p>
          </div>

          <div id='java-interface' class='section'>
            <h4>Object implementing an interface</h4>

            <p>
              The IDL <a href='#idl-interface'>interface</a>
              type maps exactly to the corresponding Java interface type.
            </p>
          </div>

          <div id='java-boxed-valuetype' class='section'>
            <h4>Boxed valuetype</h4>

            <p>
              A <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a>
              is represented differently depending on the type being boxed.
              Let <var>T</var> be the type being boxed.
            </p>
            <p>
              If <var>T</var> maps to a Java object value, which is the case for
              <a class='idltype' href='#idl-any'>any</a>,
              <a class='idltype' href='#idl-DOMString'>DOMString</a>,
              <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>,
              <a class='idltype' href='#idl-Object'>Object</a> and
              <a class='idltype' href='#idl-interface'>interface</a> types,
              then a boxed valuetype is represented by the Java
              <span class='javavalue'>null</span> value (if the value of the boxed valuetype
              is null) or by a value as described in this section for the mapping for <var>T</var>
              (if the value of the boxed valuetype is not null).  Thus,
              a Java object whose method implements an <a class='dfnref' href='#dfn-operation'>operation</a>
              declared to take an argument of a sequence type <span class='rfc2119'>MUST NOT</span>
              throw an exception simply for being passed a <span class='javavalue'>null</span> value.
            </p>
            <p>
              If <var>T</var> does not map to a Java object value, then the boxed
              valuetype maps to a Java class as specified in the table below:
            </p>
            <table class='vert'>
              <tr>
                <th><var>T</var></th>
                <th>Java class</th>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-boolean'>boolean</a></td>
                <td><span class='javatype'>java.lang.Boolean</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-octet'>octet</a></td>
                <td><span class='javatype'>java.lang.Byte</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-short'>short</a></td>
                <td><span class='javatype'>java.lang.Short</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-unsigned-short'>unsigned short</a></td>
                <td><span class='javatype'>java.lang.Short</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-long'>long</a></td>
                <td><span class='javatype'>java.lang.Integer</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-unsigned-long'>unsigned long</a></td>
                <td><span class='javatype'>java.lang.Integer</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-long-long'>long long</a></td>
                <td><span class='javatype'>java.lang.Long</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a></td>
                <td><span class='javatype'>java.lang.Long</span></td>
              </tr>
              <tr>
                <td><a class='idltype' href='#idl-float'>float</a></td>
                <td><span class='javatype'>java.lang.Float</span></td>
              </tr>
            </table>
            <p>
              If the value of the boxed valuetype is not null, then the value
              stored inside the object of the given class <span class='rfc2119'>MUST</span> be as
              specified by the rules in this section for type <var>T</var>.
            </p>
          </div>
        </div>

        <div id='java-modules' class='section'>
          <h4>Modules</h4>

          <p>
            Every IDL <a class='dfnref' href='#dfn-module'>module</a> corresponds to a Java package,
            whose name is the result of taking the module’s
            <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a>, replacing every
            occurrence of the string “::” with “.”, and then removing the leading “.”.
          </p>
          <p>
            Definitions inside an IDL <a class='dfnref' href='#dfn-module'>module</a>
            correspond to Java constructs declared to be in the package for
            that module.
          </p>
          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              will result in four Java interfaces existing:
              <span class='javatype'>org.w3c.dom.Document</span>,
              <span class='javatype'>org.w3c.dom.html.HTMLDocument</span>,
              <span class='javatype'>org.foo.FooDocument</span> and
              <span class='javatype'>org.foo.ext.ExtendedFooDocument</span>.
            </p>
            <x:codeblock language='idl'>module dom {
  interface Document { … };
};

module html {
  interface HTMLDocument { … };
};

[Prefix=org]
module foo {
  interface FooDocument { … };

  module ext {
    interface ExtendedFooDocument { … };
  };
};</x:codeblock>
          </div>
        </div>

        <!--
        <div id='java-extended-attributes' class='section'>
          <h3>Java-specific extended attributes</h3>

          <p>
            This section defines a single
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
            whose presence affects only the Java binding.
          </p>
        </div>
        -->

        <div id='java-interfaces' class='section'>
          <h3>Interfaces</h3>

          <p>
            A <a class='dfnref' href='#dfn-conforming-java-implementation'>conforming Java implementation</a>
            <span class='rfc2119'>MUST</span> have a public Java interface corresponding to
            to every IDL <a class='dfnref' href='#dfn-interface'>interface</a> that is supported, whose name is the
            <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
            <a class='dfnref' href='#dfn-identifier'>identifier</a> of the IDL interface
            and which resides in the Java package corresponding to the interface’s
            <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
            (or the default package, if there is no enclosing module).
          </p>
          <p>
            The Java interface <span class='rfc2119'>MUST</span> be declared to extend
            every Java interface that corresponds to an interface from which this IDL interface
            <a class='dfnref' href='#dfn-inherit'>inherits</a>.
          </p>

          <div id='java-constants' class='section'>
            <h4>Constants</h4>
            <p>
              For each <a class='dfnref' href='#dfn-constant'>constant</a> defined on
              the IDL <a class='dfnref' href='#dfn-interface'>interface</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding constant declared on the Java interface
              with the following characteristics:
            </p>
            <ul>
              <li>The constant has no modifiers.</li>
              <li>
                The type of the constant is the Java type that corresponds to the type of
                the IDL constant, according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
              <li>
                The name of the constant is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                <a class='dfnref' href='#dfn-identifier'>identifier</a> of the constant.
              </li>
              <li>
                The value of the constant is the Java value that is equivalent to the constant’s
                IDL value, according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
            </ul>
          </div>

          <div id='java-operations' class='section'>
            <h4>Operations</h4>
            <p>
              Each <a class='dfnref' href='#dfn-operation'>operation</a> defined on
              the IDL <a class='dfnref' href='#dfn-interface'>interface</a>, <var>I</var>,
              will result in one or more methods being declared on the Java interface.
            </p>
            <p>
              For each unique identifier <var>id</var> of an
              <a class='dfnref' href='#dfn-operation'>operation</a> declared
              on <var>I</var>:
            </p>
            <ul>
              <li>
                For each entry &lt;<var>op</var>, <var>types</var>> in the
                <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                for <var>id</var> on <var>I</var>, there <span class='rfc2119'>MUST</span>
                exist a method on the Java interface with the following
                characteristics:
                <ul>
                  <li>The method has no modifiers.</li>
                  <li>
                    The return type of the method is the Java type that corresponds to the operation
                    <a class='dfnref' href='#dfn-return-type'>return type</a>, according to the rules in
                    <a href='#java-type-mapping'>section <?sref java-type-mapping?></a> <?sdir java-type-mapping?>.
                  </li>
                  <li>
                    The tenative name of the method is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                    <a class='dfnref' href='#dfn-identifier'>identifier</a> of the operation.
                    The name of the method is the tenative name of the method prefixed with the smallest number
                    of <span class='char'>U+005F LOW LINE ("_")</span> characters required to make the
                    name not equal to the name of a constant declared on the Java interface or one of the
                    methods on the <span class='javatype'>java.lang.Object</span> class.
                  </li>
                  <li>
                    The method has an argument for each type, in order, that is in <var>types</var>.  The type of
                    method argument <var>j</var> is the Java type that corresponds to the IDL type <var>types</var><sub><var>j</var></sub>,
                    according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                    <?sdir java-type-mapping?>.  If <var>op</var> has a final argument that is
                    declared with the <a class='xattr' href='#Variadic'>[Variadic]</a>
                    <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                    then the method is a <em>variable arity method</em> (<a href='refs.html#ref-JLS3'>[JLS3]</a>,
                    section 8.4.1).
                  </li>
                  <li>
                    If <var>op</var> has IDL <a class='dfnref' href='#dfn-exception'>exceptions</a>
                    listed in the <a class='nt' href='#prod-Raises'>Raises</a> clause, then the
                    method <span class='rfc2119'>SHOULD</span> have a <code>throws</code>
                    clause specifying all of the Java exception classes that correspond
                    to those IDL exceptions, and no others.  Otherwise, if <var>op</var> has no
                    exceptions listed in the <a class='nt' href='#prod-Raises'>Raises</a> clause,
                    then the method <span class='rfc2119'>SHOULD NOT</span> have a <code>throws</code>
                    clause.
                  </li>
                </ul>
              </li>
            </ul>
            <div class='ednote'>
              <p>
                Talk about how Java values are converted to/from IDL values,
                when user code calls a user agent implemented interface, and
                when the user agent calls a user implemented interface.
              </p>
            </div>
          </div>

          <div id='java-attributes' class='section'>
            <h4>Attributes</h4>
            <p>
              For each <a class='dfnref' href='#dfn-attribute'>attribute</a> defined on
              the IDL <a class='dfnref' href='#dfn-interface'>interface</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding <dfn id='dfn-getter-method'>getter method</dfn>
              declared on the Java interface with the following characteristics:
            </p>
            <ul>
              <li>The method has no modifiers.</li>
              <li>
                The return type of the method is the Java type that corresponds to the attribute type,
                according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
              <li>
                The tentative name of the method is a
                <span class='char'>U+0067 LATIN SMALL G ("g")</span> character, followed by a
                <span class='char'>U+0065 LATIN SMALL E ("e")</span> character, followed by a
                <span class='char'>U+0074 LATIN SMALL T ("t")</span> character, followed by
                the first character of the
                <a class='dfnref' href='#dfn-identifier'>identifier</a> of the attribute
                uppercased (as if passed to the <code>java.lang.Character.toUpperCase()</code>
                method), followed by the remaining characters from the identifier of the attribute.
                The name of the method is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                tenative name of the method prefixed with the smallest number
                of <span class='char'>U+005F LOW LINE ("_")</span> characters required to make the
                name not equal to the name of a constant or method declared on the Java interface or one of the
                methods on the <span class='javatype'>java.lang.Object</span> class.
              </li>
              <li>
                The method has no arguments.
              </li>
            </ul>
            <p>
              In addition, the method <span class='rfc2119'>SHOULD</span> have a <code>throws</code>
              clause specifying all of the Java exception classes that correspond to the IDL
              <a class='dfnref' href='#dfn-exception'>exceptions</a> that are listed in the
              <a class='nt' href='#prod-GetRaises'>GetRaises</a> clause of the attribute, and no others.
            </p>
            <p>
              For each attribute defined on the IDL interface that is not
              <a class='dfnref' href='#dfn-read-only'>read only</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding <dfn id='dfn-setter-method'>setter method</dfn>
              declared on the Java interface with the following characteristics:
            </p>
            <ul>
              <li>The method has no modifiers.</li>
              <li>
                The return type of the method is <span class='javatype'>void</span>.
              </li>
              <li>
                The tentative name of the method is a
                <span class='char'>U+0073 LATIN SMALL S ("s")</span> character, followed by a
                <span class='char'>U+0065 LATIN SMALL E ("e")</span> character, followed by a
                <span class='char'>U+0074 LATIN SMALL T ("t")</span> character, followed by
                the first character of the
                identifier of the attribute uppercased (as if passed to the <code>java.lang.Character.toUpperCase()</code>
                method), followed by the remaining characters from the identifier of the attribute.
                The name of the method is the Java escaped
                tenative name of the method prefixed with the smallest number
                of <span class='char'>U+005F LOW LINE ("_")</span> characters required to make the
                name not equal to the name of a constant or method declared on the Java interface or one of the
                methods on the <span class='javatype'>java.lang.Object</span> class.
              </li>
              <li>
                The method has a single argument whose type is the Java type that corresponds
                to the attribute type, according to the rules in
                <a href='#java-type-mapping'>section <?sref java-type-mapping?></a> <?sdir java-type-mapping?>.
              </li>
            </ul>
            <p>
              In addition, the method <span class='rfc2119'>SHOULD</span> have a <code>throws</code>
              clause specifying all of the Java exception classes that correspond to the IDL
              exceptions that are listed in the
              <a class='nt' href='#prod-SetRaises'>SetRaises</a> clause of the attribute, and no others.
            </p>
            <p>
              For each attribute defined on the IDL interface that is
              <a class='dfnref' href='#dfn-read-only'>read only</a> and is declared with the
              <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding setter method
              declared on the Java interface with the following characteristics:
            </p>
            <ul>
              <li>The method has no modifiers.</li>
              <li>
                The return type of the method is <span class='javatype'>void</span>.
              </li>
              <li>
                The tentative name of the method is a
                <span class='char'>U+0073 LATIN SMALL S ("s")</span> character, followed by a
                <span class='char'>U+0065 LATIN SMALL E ("e")</span> character, followed by a
                <span class='char'>U+0074 LATIN SMALL T ("t")</span> character, followed by
                the first character of the identifier of the attribute
                uppercased (as if passed to the <code>java.lang.Character.toUpperCase()</code>
                method), followed by the remaining characters from the identifier of the attribute.
                The name of the method is the Java escaped
                tenative name of the method prefixed with the smallest number
                of <span class='char'>U+005F LOW LINE ("_")</span> characters required to make the
                name not equal to the name of a constant or method declared on the Java interface or one of the
                methods on the <span class='javatype'>java.lang.Object</span> class.
              </li>
              <li>
                The method has a single argument whose type is the Java type that corresponds
                to the type of the attribute identified by the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
                extended attribute on the interface type that
                this attribute is declared to be of, according to the rules in
                <a href='#java-type-mapping'>section <?sref java-type-mapping?></a> <?sdir java-type-mapping?>.
              </li>
            </ul>
            <p>
              In addition, the method <span class='rfc2119'>SHOULD</span> have a <code>throws</code>
              clause specifying all of the Java exception classes that correspond to the IDL
              exceptions that are listed in the
              <a class='nt' href='#prod-SetRaises'>SetRaises</a> clause of the attribute
              identified by the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              extended attribute on the interface type that
              this attribute is declared to be of, and no others.
            </p>
          </div>
        </div>

        <div id='java-implementing' class='section'>
          <h3>Objects implementing interfaces</h3>
          <p>
            A Java object that implements an IDL <a class='dfnref' href='#dfn-interface'>interface</a>
            <span class='rfc2119'>MUST</span> be of a Java class that implements the Java interface
            that corresponds to the IDL interface.
          </p>
          <p>
            If the IDL interface is declared with the
            <a class='xattr' href='#Stringifies'>[Stringifies]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
            the <code>String toString()</code> method
            <span class='rfc2119'>MUST</span> be overridden to allow
            stringification of the object as required by the IDL
            interface.  If the <a class='xattr' href='#Stringifies'>[Stringifies]</a>
            extended attribute on the IDL interface has an
            <a class='dfnref' href='#dfn-identifier'>identifier</a> argument
            <var>A</var>, assuming <var>O</var> is the object on which
            the method was invoked, the behavior of the overridden
            <code>toString</code> method <span class='rfc2119'>MUST</span>
            be as follows:
          </p>
          <ol class='algorithm'>
            <li>
              Invoke the <a class='dfnref' href='#dfn-getter-method'>getter
                method</a> on <var>O</var> that corresponds to the IDL
              <a class='dfnref' href='#dfn-attribute'>attribute</a>
              <var>A</var>.
            </li>
            <li>Return Result(1).</li>
          </ol>
          <p>
            If the <a class='xattr' href='#Stringifies'>[Stringifies]</a>
            extended attribute on the IDL interface was not given an argument,
            then the behavior of the overridden <code>toString()</code>
            method is the stringification behavior of the IDL interface, as
            described in the prose for the IDL interface.
          </p>
        </div>

        <div id='java-exceptions' class='section'>
          <h3>Exceptions</h3>
          <p>
            A <a class='dfnref' href='#dfn-conforming-java-implementation'>conforming Java implementation</a>
            <span class='rfc2119'>MUST</span> have a Java class corresponding to every
            IDL <a class='dfnref' href='#dfn-exception'>exception</a> that is supported, whose name
            is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
            <a class='dfnref' href='#dfn-identifier'>identifier</a> of the IDL exception and which
            resides in the Java package corresponding to the exception’s
            <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>.
          </p>
          <p>
            The Java class <span class='rfc2119'>MUST</span> have only the <code>public</code> modifier,
            and be declared to extend <span class='javatype'>java.lang.RuntimeException</span>.
          </p>

          <div id='java-exception-constants' class='section'>
            <h4>Constants</h4>
            <p>
              For each <a class='dfnref' href='#dfn-constant'>constant</a> defined on the
              <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a> of the
              IDL <a class='dfnref' href='#dfn-exception'>exception</a>, where that module
              has been declared with the <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding constant declared on the Java class
              with the following characteristics:
            </p>
            <ul>
              <li>The constant has no modifiers.</li>
              <li>
                The type of the constant is the Java type that corresponds to the type of
                the IDL constant, according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
              <li>
                The name of the constant is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                <a class='dfnref' href='#dfn-identifier'>identifier</a> of the constant.
              </li>
              <li>
                The value of the constant is the Java value that is equivalent to the constant’s
                IDL value, according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
            </ul>
          </div>

          <div id='java-exception-members' class='section'>
            <h4>Exception members</h4>
            <p>
              For each <a class='dfnref' href='#dfn-exception-member'>exception member</a> defined on the
              <a class='dfnref' href='#dfn-exception'>exception</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding instance variable declared on the Java class
              with the following characteristics:
            </p>
            <ul>
              <li>The instance variable has only the modifier <code>public</code>.</li>
              <li>
                The type of the instance variable is the Java type that corresponds to the type of
                the IDL exception member, according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
              <li>
                The name of the instance variable is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                <a class='dfnref' href='#dfn-identifier'>identifier</a> of the exception member.
              </li>
              <li>
                The instance variable is not declared with an initializer.
              </li>
            </ul>
          </div>
        </div>
      </div>

      <div id='extensibility' class='section'>
        <h2>Extensibility</h2>

        <p class='norm'>This section is informative.</p>

        <p>
          Extensions to language binding requirements can be specified
          using <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
          that do not conflict with those defined in this document.  Extensions for
          private, project-specific use should not be included in
          <a class='dfnref' href='#dfn-idl-fragment'>IDL fragments</a>
          appearing in other specifications.  It is recommended that extensions
          that are required for use in other specifications be coordinated
          with the group responsible for work on <cite>Web IDL</cite>, which
          at the time of writing is the
          <a href='http://www.w3.org/2008/webapps/'>W3C Web Applications Working Group</a>,
          for possible inclusion in a future version of this document.
        </p>
        <p>
          Extensions to any other aspect of the IDL language are
          strongly discouraged.
        </p>
      </div>

      <div id='referencing' class='section'>
        <h2>Referencing this specification</h2>

        <p class='norm'>This section is informative.</p>

        <p>
          It is expected that other specifications that define DOM interfaces
          using a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
            IDL fragment</a> will reference this specification.  It is suggested
          that those specifications include a sentence such as the following,
          to indicate that the IDL is to be interpreted as described in this
          specification:
        </p>
        <blockquote>
          <p>
            The IDL fragment in Appendix A of this specification must be interpreted
            as required for <em>conforming IDL fragments</em>, as described in the
            “Web IDL” specification. <a class='placeholder'>[WEBIDL]</a>
          </p>
        </blockquote>
        <p>
          In addition, it is suggested that the conformance class for user
          agents in referencing specifications be linked to the
          <a class='dfnref' href='#dfn-conforming-implementation'>conforming
            implementation</a> class from this specification:
        </p>
        <blockquote>
          <p>
            A conforming FooML user agent must also be a
            <em>conforming implementation</em> of the IDL fragment in Appendix A
            of this specification, as described in the
            “Web IDL” specification. <a class='placeholder'>[WEBIDL]</a>
          </p>
        </blockquote>
      </div>

      <div id='acknowledgements' class='section'>
        <h2>Acknowledgements</h2>

        <p class='norm'>This section is informative.</p>

        <p>
          The editor would like to thank the following people for contributing
          to this specification:
          David Andersson,
          Robin Berjon,
          Gorm Haug Eriksen,
          Ian Hickson,
          Björn Höhrmann,
          Kartikaya Gupta,
          Magnus Kristiansen,
          Lachlan Hunt,
          Anne van Kesteren,
          Jim Ley,
          Simon Pieters,
          Jonas Sicking,
          Garrett Smith,
          Maciej Stachowiak,
          Collin Xu,
          Boris Zbarsky.
        </p>
      </div>
    </div>

    <div id='appendices'>
      <div id='idl-grammar' class='section'>
        <h2>IDL grammar</h2>

        <p>
          This section defines an LL(1) grammar whose start symbol,
          <a class='nt' href='#prod-Definitions'>Definitions</a>, matches an
          entire <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>.
        </p>

        <p>
          Each production in the grammar has on its right hand side either a
          non-zero sequence of terminal and non-terminal symbols, or an
          epsilon (ε) which indicates no symbols.  Symbols that begin with
          an uppercase letter are non-terminal symbols.  Symbols within quotes
          are terminal symbols that are matched with the exact text between
          the quotes.  Symbols that begin with a lowercase letter are terminal
          symbols that are matched by the regular expressions (using Perl 5 regular
          expression syntax <a href='#ref-PERLRE'>[PERLRE]</a>) as follows:
        </p>
        <table class='grammar'>
          <tr>
            <td id='prod-integer' class='nt'>integer</td>
            <td class='regex'>=</td>
            <td class='regex'>-?0([0-7]*|[Xx][0-9A-Fa-f]+)|[1-9][0-9]*</td>
          </tr>
          <tr>
            <td id='prod-float' class='nt'>float</td>
            <td class='regex'>=</td>
            <td class='regex'>-?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+</td>
          </tr>
          <tr>
            <td id='prod-identifier' class='nt'>identifier</td>
            <td class='regex'>=</td>
            <td class='regex'>[A-Z_a-z][0-9A-Z_a-z]*</td>
          </tr>
          <tr>
            <td id='prod-string' class='nt'>string</td>
            <td class='regex'>=</td>
            <td class='regex'>"[^"]*"</td>
          </tr>
          <tr>
            <td id='prod-whitespace' class='nt'>whitespace</td>
            <td class='regex'>=</td>
            <td class='regex'>[\t\n\r ]+|[\t\n\r ]*((//.*|/\*.*?\*/)[\t\n\r ]*)+</td>
          </tr>
          <tr>
            <td id='prod-other' class='nt'>other</td>
            <td class='regex'>=</td>
            <td class='regex'>[^\t\n\r 0-9A-Z_a-z]</td>
          </tr>
        </table>

        <p>
          The tokenizer operates on a sequence of Unicode characters
          <a href='#ref-UNICODE40'>[UNICODE40]</a>.
          When tokenizing, the longest possible match <span class='rfc2119'>MUST</span> be used.  For example, if the input
          text is “<span class='input'>a1</span>”, it is tokenized as a single <span class='terminal'>identifier</span>,
          and not as a separate <span class='terminal'>identifier</span> and <span class='terminal'>integer</span>.
          If the longest possible match could match both an <span class='terminal'>identifier</span> and
          one of the quoted terminal symbols from the grammar, it <span class='rfc2119'>MUST</span> be tokenized as the quoted
          terminal symbol.  Thus, the input text “<span class='input'>in</span>” is tokenized as the quoted terminal symbol
          <span class='terminal'>"in"</span> rather than an <span class='terminal'>identifier</span> called “in”.
        </p>
        <p>
          The IDL syntax is case sensitive, both for the quoted terminal symbols
          used in the grammar and the values used for
          <span class='terminal'>identifier</span> terminals.  Thus, for
          example, the input text “<span class='input'>Getraises</span>” is tokenized as
          an <span class='terminal'>identifier</span> rather than the quoted
          terminal symbol <span class='terminal'>"getraises"</span>, an
          <a class='dfnref' href='#dfn-interface'>interface</a> with
          <a class='dfnref' href='#dfn-identifier'>identifier</a>
          “A” is distinct from one named “a”, and an
          <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
          <span class='xattr'>[optional]</span> will not be recognized as
          the the <a class='xattr' href='#Optional'>[Optional]</a>
          extended attribute.
        </p>
        <p>
          Implicitly, the <span class='terminal'>whitespace</span> terminal is allowed between every terminal
          in the input text being parsed.  Such <span class='terminal'>whitespace</span> terminals, which
          actually encompass both whitespace and comments, are ignored while parsing.
        </p>

        <p>
          The following LL(1) grammar, starting with <a class='nt' href='#prod-Definitions'>Definitions</a>,
          matches an <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>:
        </p>

        <grammar id='grammar' xmlns='http://mcc.id.au/ns/local'>
          <prod nt='Definitions'>ExtendedAttributeList Definition Definitions | ε</prod>
          <prod nt='Definition'>Module | Interface | Exception | Typedef | Valuetype | Const</prod>
          <prod nt='Module'>"module" identifier "{" Definitions "}" ";"</prod>
          <prod nt='Interface'>"interface" identifier InterfaceBody ";"</prod>
          <prod nt='InterfaceInheritance'>":" ScopedNameList | ε</prod>
          <prod nt='InterfaceBody'>InterfaceInheritance "{" InterfaceMembers "}" | ε</prod>
          <prod nt='InterfaceMembers'>ExtendedAttributeList InterfaceMember InterfaceMembers | ε</prod>
          <prod nt='InterfaceMember'>Const | Attribute | Operation</prod>
          <prod nt='Exception'>"exception" identifier "{" ExceptionMembers "}" ";"</prod>
          <prod nt='ExceptionMembers'>ExtendedAttributeList ExceptionMember ExceptionMembers | ε</prod>
          <prod nt='Typedef'>"typedef" Type TypedefRest</prod>
          <prod nt='TypedefRest'>identifier ";" | "DOMString" ";"</prod>
          <prod nt='Valuetype'>"valuetype" ValuetypeRest</prod>
          <prod nt='ValuetypeRest'>identifier BoxedType ";" | "DOMString" "sequence" "&lt;" "unsigned" "short" ">" ";"</prod>
          <prod nt='Const'>"const" DeclarationType identifier "=" ConstExpr ";"</prod>
          <prod nt='ConstExpr'>BooleanLiteral | integer | float</prod>
          <prod nt='BooleanLiteral'>"TRUE" | "FALSE"</prod>
          <prod nt='Attribute'>ReadOnly "attribute" DeclarationType identifier GetRaises SetRaises ";"</prod>
          <prod nt='ReadOnly'>"readonly" | ε</prod>
          <prod nt='GetRaises'>"getraises" ExceptionList | ε</prod>
          <prod nt='SetRaises'>"setraises" ExceptionList | ε</prod>
          <prod nt='Operation'>ReturnType identifier "(" ArgumentList ")" Raises ";"</prod>
          <prod nt='Raises'>"raises" ExceptionList | ε</prod>
          <prod nt='ExceptionList'>"(" ScopedNameList ")"</prod>
          <prod nt='ArgumentList'>Argument Arguments | ε</prod>
          <prod nt='Arguments'>"," Argument Arguments | ε</prod>
          <prod nt='Argument'>ExtendedAttributeList "in" DeclarationType identifier</prod>
          <prod nt='ExceptionMember'>DeclarationType identifier ";"</prod>
          <prod nt='ExtendedAttributeList'>"[" ExtendedAttribute ExtendedAttributes "]" | ε</prod>
          <prod nt='ExtendedAttributes'>"," ExtendedAttribute ExtendedAttributes | ε</prod>
          <prod nt='ExtendedAttribute'>
              "(" ExtendedAttributeInner ")" ExtendedAttributeRest
            | "[" ExtendedAttributeInner "]" ExtendedAttributeRest
            | "{" ExtendedAttributeInner "}" ExtendedAttributeRest
            | Other ExtendedAttributeRest
          </prod>
          <prod nt='ExtendedAttributeRest'>ExtendedAttribute | ε</prod>
          <prod nt='ExtendedAttributeInner'>
              "(" ExtendedAttributeInner ")" ExtendedAttributeInner
            | "[" ExtendedAttributeInner "]" ExtendedAttributeInner
            | "{" ExtendedAttributeInner "}" ExtendedAttributeInner
            | OtherOrComma ExtendedAttributeInner
            | ε
          </prod>
          <prod nt='Other'>
              integer | float | identifier | string <!--| whitespace--> | other
            | ":" | "::" | ";" | "&lt;" | "=" | ">" | "DOMString"
            | "FALSE" | "Object" | "TRUE" | "any" | "attribute" | "boolean"
            | "const" | "exception" | "float" | "getraises" | "in"
            | "interface" | "long" | "module" | "octet" | "raises" | "sequence"
            | "setraises" | "short" | "typedef" | "unsigned" | "valuetype"
          </prod>
          <prod nt='OtherOrComma'>Other | ","</prod>

          <prod nt='DeclarationType'>UnsignedIntegerType | ScopedName | "any" | "boolean" | "octet" | "float" | "DOMString" | "Object"</prod>
          <prod nt='BoxedType'>UnsignedIntegerType | ScopedName | "boolean" | "octet" | "float" | "sequence" "&lt;" Type ">"</prod>
          <prod nt='Type'>DeclarationType | "sequence" "&lt;" Type ">"</prod>
          <prod nt='UnsignedIntegerType'>"unsigned" IntegerType | IntegerType</prod>
          <prod nt='IntegerType'>"short" | "long" OptionalLong</prod>
          <prod nt='OptionalLong'>"long" | ε</prod>
          <prod nt='ReturnType'>DeclarationType | "void"</prod>
          <prod nt='ScopedNameList'>ScopedName ScopedNames</prod>
          <prod nt='ScopedNames'>"," ScopedName ScopedNames | ε</prod>
          <prod nt='ScopedName'>"::" ScopedNameAfterColon | identifier ScopedNameParts</prod>
          <prod nt='ScopedNameAfterColon'>identifier ScopedNameParts | "DOMString"</prod>
          <prod nt='ScopedNameParts'>"::" ScopedNamePartsAfterColon | ε</prod>
          <prod nt='ScopedNamePartsAfterColon'>identifier ScopedNameParts | "DOMString"</prod>
          <!--prod nt='IdentifierList'>identifier Identifiers</prod>
          <prod nt='Identifiers'>"," identifier Identifiers | ε</prod-->

          <!-- These five productions aren't referenced from any of the
               other productions; they're just mentioned from the
               #idl-extended-attributes section. -->
          <prod nt='ExtendedAttributeNoArg'>identifier</prod>
          <prod nt='ExtendedAttributeArgList'>identifier "(" ArgumentList ")"</prod>
          <prod nt='ExtendedAttributeIdent'>identifier "=" identifier</prod>
          <prod nt='ExtendedAttributeScopedName'>identifier "=" ScopedName</prod>
          <prod nt='ExtendedAttributeNamedArgList'>identifier "=" identifier "(" ArgumentList ")"</prod>

          <!--prod nt='Keyword'>"any" | "attribute" | "boolean" | "const" | "exception" | "float" | "getraises" | "in" | "interface" | "long" | "module" | "Object" | "octet" | "raises" | "readonly" | "sequence" | "setraises" | "short" | "typedef" | "unsigned | "void"</prod-->
          <!-- the following are the remaining OMG IDL 3 keywords:
          "abstract" |
          "case" |
          "char" |
          "component" |
          "consumes" |
          "context" |
          "custom" |
          "default" |
          "double" |
          "emits" |
          "enum" |
          "eventtype" |
          "factory" |
          "FALSE" |
          "finder" |
          "fixed" |
          "home" |
          "inout" |
          "local" |
          "multiple" |
          "native" |
          "oneway" |
          "out" |
          "primarykey" |
          "private" |
          "provides" |
          "public" |
          "publishes" |
          "string" |
          "struct" |
          "supports" |
          "switch" |
          "TRUE" |
          "truncatable" |
          "typeid" |
          "typeprefix" |
          "union" |
          "uses" |
          "ValueBase" |
          "wchar" |
          "wstring"
          -->
        </grammar>
        <div class='note'>
          <p>
            The choices listed for the <a class='nt' href='#prod-Other'>Other</a>
            non-terminal are all of the terminal symbols except for
            <span class="terminal">"("</span>, <span class="terminal">")"</span>,
            <span class="terminal">"["</span>, <span class="terminal">"]"</span>,
            <span class="terminal">"{"</span>, <span class="terminal">"}"</span>
            and <span class="terminal">","</span>.
          </p>
        </div>
        <p>
          While the <a class='nt' href='#prod-ExtendedAttribute'>ExtendedAttribute</a>
          matches any non-empty sequence of terminal symbols (as long as any
          parentheses, square brackets or braces are balanced, and the
          <span class="terminal">","</span> token appears only within those balanced brackets),
          only a subset of those
          possible sequences are used by the <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
          defined in this specification — see
          <a href='#idl-extended-attributes'>section <?sref idl-extended-attributes?></a>
          for the syntaxes that are used by these extended attributes.
        </p>
      </div>

      <div id='references' class='section'>
        <h2>References</h2>

        <div id='normative-references' class='section'>
          <h3>Normative references</h3>

          <dl>
            <dt id='ref-ECMA-262'>[ECMA-262]</dt>
            <dd>
              <cite><a href='http://www.ecma-international.org/publications/standards/Ecma-262.htm'>ECMAScript Language Specification, 3rd Edition</a></cite>,
              M. Cowlishaw, Editor.  Ecma International, December 1999.  Available at http://www.ecma-international.org/publications/standards/Ecma-262.htm.
            </dd>
            <dt id='ref-IEEE-754'>[IEEE-754]</dt>
            <dd>
              <cite>IEEE Standard for Binary Floating-Point Arithmetic (ANSI/IEEE Std 754-1985)</cite>.
              Institute of Electrical and Electronics Engineers, 1985.
            </dd>
            <dt id='ref-JLS3'>[JLS3]</dt>
            <dd>
              <cite><a href="http://java.sun.com/docs/books/jls/">The Java Language Specification, Third Edition</a></cite>.
              J. Gosling, et al.  Upper Saddle River, New Jersey, Addison-Wesley, 2005.
              Available at http://java.sun.com/docs/books/jls/.
            </dd>
            <dt id='ref-PERLRE'>[PERLRE]</dt>
            <dd>
              <cite><a href='http://search.cpan.org/dist/perl/pod/perlre.pod'>Perl regular expressions (Perl 5.8.8)</a></cite>.
              The Perl Foundation, February 2006.  Available at http://www.perl.com/doc/manual/html/pod/perlre.html.
            </dd>
            <dt id='ref-RFC2119'>[RFC2119]</dt>
            <dd>
              <cite><a href='http://www.ietf.org/rfc/rfc2119'>Key words for use in RFCs to Indicate Requirement Levels</a></cite>,
              S. Bradner.  IETF, March 1997.  Available at http://www.ietf.org/rfc/rfc2119.
            </dd>
            <dt id='ref-RFC2781'>[RFC2781]</dt>
            <dd>
              <cite><a href='http://www.ietf.org/rfc/rfc2781'>UTF-16, an encoding of ISO 10646</a></cite>,
              P. Hoffmann and F. Yergeau.  IETF, February 2000.  Available at http://www.ietf.org/rfc/rfc2781.
            </dd>
            <dt id='ref-UNICODE40'>[UNICODE40]</dt>
            <dd>
              <cite><a href='http://www.unicode.org/unicode/standard/versions/'>The Unicode Standard</a></cite>,
              Version 4.0 or later.  The Unicode Consortium.  Boston, Massachusetts, Addison-Wesley, 2003.
              ISBN 0-321-18578-1.  Available at http://www.unicode.org/versions/Unicode4.0.0/.
            </dd>
          </dl>
        </div>

        <div id='informative-references' class='section'>
          <h3>Informative references</h3>

          <dl>
            <dt id='ref-DOM3CORE'>[DOM3CORE]</dt>
            <dd>
              <cite><a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/'>Document Object Model (DOM) Level 3 Core Specification</a></cite>.
              A. Le Hors, et al., Editors.  World Wide Web Consortium, April 2004.  Available at http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/.
            </dd>
            <dt id='ref-OMGIDL'>[OMGIDL]</dt>
            <dd>
              <cite><a href='http://www.omg.org/cgi-bin/apps/doc?formal/02-06-39.pdf'>CORBA 3.0 – OMG IDL Syntax and Semantics chapter</a></cite>.
              Object Management Group, June 2002.  Available at http://www.omg.org/cgi-bin/apps/doc?formal/02-06-39.pdf.
            </dd>
            <dt id='ref-WIDLNOTE'>[WIDLNOTE]</dt>
            <dd>
              <cite><a href='http://www.w3.org/TR/NOTE-widl-970922'>Web Interface Definition Language (WIDL)</a></cite>.
              P. Merrick and C. Allen.  World Wide Web Consortium, September 1997.  Available at http://www.w3.org/TR/NOTE-widl-970922.
            </dd>
          </dl>
        </div>
      </div>

      <div id='changes' class='section'>
        <h2>Changes</h2>
        <p>
          The following is a list of substantial changes to the document on each publication.
        </p>
        <dl class='changes'>
          <dt>Current editor’s draft</dt>
          <dd>
            <ul>
              <li>
                <p>
                  Changed the way extended attributes are parsed in the grammar
                  and filled out the Extensibility section to mention how
                  extended attributes not defined in this document can be used.
                </p>
              </li>
              <li>
                <p>
                  Fixed some bugs in the rules for converting <span class='idltype'>float</span>
                  and <span class='idltype'>unsigned long long</span> to ECMAScript
                  <span class='estype'>Number</span> values, and vice versa.
                </p>
              </li>
              <li>
                <p>
                  Added <span class='xattr'>[Prefix]</span> to change the default
                  mapping of modules to language binding namespacing constructs.
                </p>
              </li>
              <li>
                <p>
                  Allowed interfaces with constants to be implemented by
                  ECMAScript native objects.  This specifically allows
                  implementation of a DOM Level 2 Traversal
                  <span class='idltype'>NodeFilter</span> object in script.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='xattr'>[Callable]</span>
                  extended attribute, which can be used to indicate
                  the behavior of calling an object as a function.
                </p>
              </li>
              <li>
                <p>
                  Removed a bogus requirement that
                  <span class='xattr'>[PutForwards]</span> identify an
                  attribute whose type is the same as the attribute that
                  has the <span class='xattr'>[PutForwards]</span>, and
                  disallowed cycles of forwarding assignments.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='xattr'>[Replaceable]</span> extended
                  attribute that can be placed on an attribute to indicate
                  that the corresponding ECMAScript property can be
                  replaced.
                </p>
              </li>
              <li>
                <p>
                  Added a requirement that <span class='xattr'>[Stringifies]</span>
                  not be specified on an interface that also declares an
                  operation name <code>toString</code>.
                </p>
              </li>
              <li>
                <p>
                  Changed the DOMString type to be a sequence of 16 bit
                  code units, rather than a sequence of Unicode characters.
                </p>
              </li>
              <li>
                <p>
                  Reworded the ECMAScript type mapping section so
                  that it can be more easily referenced from other
                  sections of the document.
                </p>
              </li>
              <li>
                <p>
                  Renamed <span class='xattr'>[NativeObject]</span> to
                  <span class='xattr'>[Callback]</span>, and gave it an
                  additional <code>PropertyOnly</code> argument.
                </p>
              </li>
              <li>
                <p>
                  Added an <span class='xattr'>[Optional]</span> extended
                  attribute to make certain kinds of operation overloading
                  able to be specified more succinctly.
                </p>
              </li>
              <li>
                <p>
                  Reworked operation overloading in IDL so that it is
                  much more restrictive.  Updated the overloaded
                  operation and constructor resolution in ECMAScript accordingly.
                </p>
              </li>
              <li>
                <p>
                  Specified the behavior of index and name getters
                  in ECMAScript as being in terms of additional properties
                  that are placed on the host object.  Added
                  <span class='xattr'>[IndexCreator]</span>,
                  <span class='xattr'>[IndexDeleter]</span>,
                  <span class='xattr'>[NameCreator]</span> and
                  <span class='xattr'>[NameDeleter]</span> to handle
                  more aspects of these properties.  The definition
                  of <span class='prop'>[[Get]]</span> for host objects
                  is removed, but <span class='prop'>[[Put]]</span> is
                  expanded to handle index and name creators/setters,
                  and <span class='prop'>[[Delete]]</span> is now specified
                  to handle index and name deleters.
                </p>
              </li>
              <li>
                <p>
                  Specified the value of <span class='prop'>[[Class]]</span>
                  for host objects.
                </p>
              </li>
              <li>
                <p>
                  Removed the suggestion to perform tricksy multiple inheritance
                  simulation in ECMAScript with a mandated way to map multiple
                  inheritance into a single inheritance prototype chain.  Added
                  <span class='xattr'>[ImplementedOn]</span> and
                  <span class='xattr'>[PrototypeRoot]</span> to help with this.
                </p>
              </li>
              <li>
                <p>
                  Made an explicit mention of the <cite>Web Interface Definition
                    Language (WIDL)</cite> W3C Member submission in the Status
                  of this Document section.
                </p>
              </li>
            </ul>
          </dd>
          <dt>29 August 2008 – WD</dt>
          <dd>
            <ul>
              <li>
                <p>
                  Added an <span class='xattr'>[NamedConstructor]</span> extended attribute
                  to handle peculiarities like HTML 5’s <code>Image</code> constructor.
                </p>
              </li>
              <li>
                <p>
                  <span class='xattr'>[Constructor]</span> extended attributes may now
                  take an argument list, and more than one can be used on an interface.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='xattr'>[NativeObject]</span> extended attribute
                  that restricts which interfaces may be implemented by ECMAScript
                  native objects, and updated the “Native objects implementing interfaces”
                  section to be more restricted and precise.
                </p>
              </li>
              <li>
                <p>
                  Moved <span class='xattr'>[NoInterfaceObject]</span> into the
                  ECMAScript-specific extended attributes section.
                </p>
              </li>
              <li>
                <p>
                  Fixed errors in a couple of algorithms that were introduced by
                  steps being renumbered.
                </p>
              </li>
              <li>
                <p>
                  Properties corresponding to IDL constants are now ReadOnly.
                </p>
              </li>
              <li>
                <p>
                  Removed <span class='xattr'>[NoNull]</span>, and added
                  <span class='xattr'>[Null]</span> and <span class='xattr'>[Undefined]</span>
                  in its place.
                </p>
              </li>
              <li>
                <p>
                  Made <span class='idltype'>DOMString</span> an intrinsic type,
                  but still allow it to be defined as a boxed sequence of
                  unsigned shorts for compatibility with already published IDL
                  fragments.
                </p>
              </li>
              <li>
                <p>
                  ECMAScript host object constructors (specified with
                  <span class='xattr'>[Constructor]</span>) now must return an
                  object that implements the interface.
                </p>
              </li>
              <li>
                <p>
                  Tweaked the abstract and introduction so that it is clear that
                  Web IDL can be used for specifications that define not only a
                  DOM, but any interface.
                </p>
              </li>
              <li>
                <p>
                  Clarified the behavior of passing a
                  non-<span class='esvalue'>null</span>,
                  non-<span class='estype'>Object</span>
                  value to a host object that expects a boxed valuetype.
                </p>
              </li>
              <li>
                <p>Renamed document to <cite>Web IDL</cite>.</p>
              </li>
            </ul>
          </dd>
          <dt>10 April 2008 – WD</dt>
          <dd>
            <ul>
              <li>
                <p>
                  Restricted boxed valuetypes to boxing only types that cannot
                  already have <span class='idlvalue'>null</span>.</p>
              </li>
              <li>
                <p>
                  Reworked how operation overloading is specified
                  (the <span class='xattr'>[Overloads]</span> extended attribute
                  is no longer needed), and how ECMAScript disambiguates
                  calls to overloaded operations.
                </p>
              </li>
              <li>
                <p>Filled in the “Host exception objects” section.</p>
              </li>
              <li>
                <p>
                  Added an exception interface prototype object for constants
                  to live in.  Added constants to interface objects, interface
                  prototype objects, exception interface objects and exception
                  interface prototype objects.
                </p>
              </li>
              <li>
                <p>Tweaked the behavior of sequences in ECMAScript.</p>
              </li>
              <li>
                <p>
                  Added an editorial note about the possibility of somehow
                  specifying HTML 5’s <code>Image</code> constructor.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='xattr'>[NoInterfaceObject]</span> extended attribute,
                  which prevents an ECMAScript interface object being created for the interface
                  on which it appears.
                </p>
              </li>
              <li>
                <p>Added a <span class='xattr'>[Stringifies]</span> extended attribute.</p>
              </li>
              <li>
                <p>
                  Fixed small bugs in <span class='prop'>[[HasProperty]]</span>,
                  <span class='prop'>[[Get]]</span> and <span class='prop'>[[Put]]</span>
                  algorithms for ECMAScript host objects.
                </p>
              </li>
              <li>
                <p>
                  Added an editorial note about the possibility of an extended
                  attribute that specifies what properties get enumerated in
                  a for..in loop in ECMAScript.
                </p>
              </li>
            </ul>
          </dd>
          <dt>17 October 2007 – FPWD</dt>
          <dd>
            <ul>
              <li><p>Initial publication.</p></li>
            </ul>
          </dd>
        </dl>
      </div>
    </div>
  </body>
</html>
