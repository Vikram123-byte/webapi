<?xml version='1.0'?>

<!--
  Overview.xml
  Language Bindings for DOM Specifications

  This is written in XHTML 1.1 with an inline <options> element that helps
  the Binding4DOM.xsl stylesheet process the document (generating a table
  of contents, section numbers, certain processing instructions).
  -->

<?xml-stylesheet href='Binding4DOM.xsl' type='text/xsl'?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en'>
  <head>
    <title>Language Bindings for DOM Specifications</title>
    <meta http-equiv='Content-Type' content='application/xhtml+xml; charset=UTF-8'/>
    <meta name='revision' content='$Id: Overview.xml,v 1.6 2007-06-09 00:58:17 cmccorma Exp $'/>
    <link rel='stylesheet' href='http://www.w3.org/StyleSheets/TR/base' type='text/css'/>
    <link rel='stylesheet' href='Binding4DOM.css' type='text/css'/>

    <options xmlns=''>
      <versions>
        <this cvsweb='true' href='http://dev.w3.org/cvsweb/~checkout~/2006/webapi/Binding4DOM/Overview.html'/>
        <latest href=''/>
        <previous href=''/>
      </versions>
      <editors>
        <person homepage='http://mcc.id.au/' email='cam@mcc.id.au'>
          <name>Cameron McCormack</name>
          <affiliation>Invited Expert</affiliation>
        </person>
      </editors>
      <years>2007</years>
    </options>
  </head>

  <body>
    <?top?>

    <div class='section'>
      <h2>Abstract</h2>
      <p>
        This specification defines an Interface Definition Language (IDL) to be
        used by specifications that define a Document Object Model (DOM).  How
        interfaces described with this IDL correspond to constructs within an
        ECMAScript execution environment is also detailed.
      </p>

      <div class='ednote'>
        <p>
          This is revision $Id: Overview.xml,v 1.6 2007-06-09 00:58:17 cmccorma Exp $.
        </p>
      </div>
    </div>

    <div class='section'>
      <h2>Status of this Document</h2>

      <p>
        <em>
          This section describes the status of this document at the time of
          its publication.  Other documents may supersede this document. A list
          of current <acronym title="World Wide Web Consortium">W3C</acronym>
          publications and the latest revision of this technical report can be
          found in the 
          <a href="http://www.w3.org/TR/"><acronym title="World Wide Web Consortium">W3C</acronym>
            technical reports index</a> at http://www.w3.org/TR/.
        </em>
      </p>
      <p>
        This document is the <?date?> <b>Editor’s Draft</b> of the
        “Language Bindings for DOM Specifications” specification.  Please send
        comments to <a href='mailto:public-webapi@w3.org'>public-webapi@w3.org</a>
        (<a href='http://lists.w3.org/Archives/Public/public-webapi/'>archived</a>)
        with “<tt>[Bindings]</tt>” at the start of the subject line.
      </p>
      <p>
        This document is produced by the
        <a href='http://www.w3.org/2006/webapi/'>Web API Working Group</a>, part of the
        <a href='http://www.w3.org/2006/rwc/Activity'>Rich Web Clients Activity</a>
        in the W3C <a href='http://www.w3.org/Interaction/'>Interaction Domain</a>.
        Changes made to this document can be found in the
        <a href='http://dev.w3.org/cvsweb/2006/webapi/Binding4DOM/Overview.html'>W3C
          public CVS server</a>.
      </p>
      <p>
        Publication as a Working Draft does not imply endorsement by the
        <acronym title="World Wide Web Consortium">W3C</acronym> Membership.
        This is a draft document and may be updated, replaced or obsoleted by
        other documents at any time. It is inappropriate to cite this document
        as other than work in progress.
      </p>
      <p>
        This document was produced by a group operating under the 5 February
        2004 W3C Patent Policy. W3C maintains a public list of any patent
        disclosures made in connection with the deliverables of the group; that
        page also includes instructions for disclosing a patent. An individual
        who has actual knowledge of a patent which the individual believes
        contains Essential Claim(s) must disclose the information in accordance
        with section 6 of the W3C Patent Policy.
      </p>
    </div>

    <div class='section'>
      <h2>Table of contents</h2>
      <?toc sections appendices?>
    </div>

    <div id='sections'>
      <div id='introduction' class='section'>
        <h2>Introduction</h2>

        <div class='ednote'>
          <p>TBD</p>
        </div>
      </div>

      <div id='idl' class='section'>
        <h2>Interface definition language</h2>

        <div class='ednote'>
          <p>
            This section will describe an IDL which is similar to OMG IDL.
            Syntactically, it’ll be a subset of OMG IDL plus extended attributes,
            and semantically mostly the same.
          </p>
        </div>
      </div>

      <div id='ecmascript-binding' class='section'>
        <h2>ECMAScript binding</h2>

        <p>
          This section describes how interfaces described with the IDL in section
          <?sref idl?> correspond to particular ECMAScript constructs.
        </p>
        <p>
          Unless otherwise specified, every object described in this section
          has internal properties <span class='prop'>[[Get]]</span>,
          <span class='prop'>[[Put]]</span>,
          <span class='prop'>[[CanPut]]</span>,
          <span class='prop'>[[HasProperty]]</span>,
          <span class='prop'>[[Delete]]</span> and
          <span class='prop'>[[DefaultValue]]</span> with the same behavior as
          specified for native objects, as described in section 8.6.2 of
          <a href='#ref-ECMA-262'>[ECMA-262]</a>.
        </p>
        <p>
          If a value for the internal property
          <span class='prop'>[[Class]]</span> is not given for a particular
          object, its value is implementation specific.
        </p>

        <div id='type' class='section'>
          <h3>Types</h3>

          <div class='ednote'>
            <p>
              Mapping of primitive IDL types to ES types.  Also IDL DOMString → ES string (or null, sometimes).
              Here also talk about type conversion with calling functions and assigning/retrieving attributes.
            </p>
          </div>
        </div>

        <div id='interfaces' class='section'>
          <h3>Interfaces</h3>

          <p>
            Every interface corresponds to a property on the global object,
            whose name is the same as its identifier in the IDL.  This identifier
            is not the qualified name of the interface, but the final
            <a class='nt' href='#prod-Identifier'>Identifier</a> in the
            <a class='nt' href='#prod-ScopedName'>ScopedName</a> production
            that forms the complete qualified name.
            The value of this property is
            an object called the <dfn>interface object</dfn>, which provides
            access to the constants and functions defined on the interface.
            The property has the attributes
            <span class='propattrset'>{ DontDelete, DontEnum }</span>.
          </p>
          
          <div id='interface-object' class='section'>
            <h4>Interface object</h4>

            <p>
              The interface object has the following properties:
            </p>

            <table class='proptable'>
              <tr>
                <th>Property name</th>
                <th>Attributes</th>
                <th>Type</th>
                <th>Value</th>
              </tr>
              <tr>
                <td><span class='prop'>[[Prototype]]</span></td>
                <td>{ Internal }</td>
                <td>object</td>
                <td>The Object prototype object.</td>
              </tr>
              <tr>
                <td><span class='prop'>prototype</span></td>
                <td>{ DontDelete, ReadOnly }</td>
                <td>object</td>
                <td>The interface prototype object for this interface.</td>
              </tr>
            </table>

            <p>
              In addition, there is a property on the interface object for each
              constant defined on the interface with the same name as that constant.
              These properties have the attributes
              <span class='propattrset'>{ DontDelete }</span>.
            </p>

            <p>
              If the interface is declared with the
              <a class='xattr' href='#Constructor'>[Constructor]</a> extended attribute,
              then the interface object also has a
              <span class='prop'>[[Construct]]</span> internal property, which allows
              construction of objects that implement the given interface.  The behavior
              of this <span class='prop'>[[Construct]]</span> method is not
              necessarily the same as that described for Function objects in
              section 13.2.2 of <a href='#ref-ECMA-262'>[ECMA-262]</a>.
            </p>
          </div>

          <div id='interface-prototype-object' class='section'>
            <h4>Interface prototype object</h4>

            <p>
              The interface prototype object has the following properties:
            </p>

            <table class='proptable'>
              <tr>
                <th>Property name</th>
                <th>Attributes</th>
                <th>Type</th>
                <th>Value</th>
              </tr>
              <tr>
                <td><span class='prop'>[[Prototype]]</span></td>
                <td>{ Internal }</td>
                <td>object</td>
                <td>
                  If the interface inherits from another interface, then the
                  value is the interface prototype object for the superinterface.
                  Otherwise, the value is the Object prototype object.
                </td>
              </tr>
              <tr>
                <td><span class='prop'>constructor</span></td>
                <td>{ DontEnum }</td>
                <td>object</td>
                <td>The interface object for this interface.</td>
              </tr>
            </table>

            <div class='ednote'><p>Remove <code>constructor</code>, since the object wasn’t created with <code>[[Construct]]</code>?</p></div>

            <p>
              In addition, there is a property on the interface prototype object
              for each operation defined on the interface that does not have the
              <a class='xattr' href='#Overloads'>[Overloads]</a>
              extended attribute.  These properties have the attributes { DontEnum }.
            </p>
          </div>

          <div id='operations' class='section'>
            <h4>Operations</h4>

            <div class='ednote'>
              <p>
                Talk about properties of the methods on the interface prototype
                object, and how overloaded methods map to the same single function
                which will perform the resolution.  Also what happens with passing
                fewer/more arguments than expected.
              </p>
            </div>
          </div>

          <div id='custom-get-put' class='section'>
            <h4>Custom [[Get]] and [[Put]] methods</h4>

            <div class='ednote'>
              <p>
                What extended attributes on the interface in the IDL indicate
                that non-standard [[Get]] methods are used.  Some
                common cases (e.g. non-negative integer indexes
                correspond to calling a method, like <code>NodeList.item()</code>)
                should be able to be declared in the IDL.
              </p>
              <p>
                Do any existing DOM objects have custom [[Put]] or [[Delete]] methods?
                Yes, it seems: assigning to <code>window.location</code> is like assigning to
                <code>window.location.href</code>, and assigning to <code>.style.width</code> is like assigning
                to <code>.style.width.cssText</code> in the new CSSOM.
              </p>
            </div>
          </div>
        </div>

        <div id='host-objects' class='section'>
          <h3>Host objects implementing interfaces</h3>

          <div class='ednote'>
            <p>
              Host objects that implement a particular interface have their [[Prototype]]
              set to the interface prototype object.  A special [[Get]] and [[Put]] will need to be
              defined to handle throwing exceptions for readonly attributes, that sort
              of thing.
            </p>
          </div>

          <div id='attributes' class='section'>
            <h4>Attributes</h4>

            <div class='ednote'>
              <p>
                How attributes on an interface correspond to properties on the host object.
                Perhaps a <tt>[PutForwards=<i>PropertyName</i>]</tt> to handle the
                <code>window.location</code> assignment mentioned above.
              </p>
            </div>
          </div>
        </div>

        <div id='native-objects' class='section'>
          <h3>Native objects implementing interfaces</h3>

          <div class='ednote'>
            <p>
              How ES script can implement interfaces, including how interfaces with
              a single operation can be implemented as a function object (e.g. EventListener).
            </p>
          </div>
        </div>
      </div>

      <div id='conformance' class='section'>
        <h2>Conformance</h2>

        <div class='ednote'>
          <p>Two products: conforming IDL, conforming ES implementation of some IDL.</p>
        </div>
      </div>

      <div id='acknowledgements' class='section'>
        <h2>Acknowledgements</h2>

        <p>
          The editor would like to thank the following people for contributing
          to this specification:
          David Andersson,
          Robin Berjon,
          Gorm Haug Eriksen,
          Ian Hickson,
          Björn Höhrmann,
          Anne van Kesteren,
          Jonas Sicking,
          Maciej Stachowiak,
          Boris Zbarsky.
        </p>
      </div>
    </div>

    <div id='appendices'>
      <div id='idl-grammar' class='section'>
        <h2>IDL grammar</h2>

        <p>
          This section defines an LL(1) grammar whose start symbol,
          <a class='nt' href='#prod-Definitions'>Definitions</a>, matches an
          entire IDL fragment.
        </p>

        <p>
          Each production in the grammar has on its right hand side either a
          non-zero sequence of terminal and non-terminal symbols, or an
          epsilon (ε) which indicates no symbols.  Symbols that begin with
          an uppercase letter are non-terminal symbols.  Symbols within quotes
          are terminal symbols that are matched with the exact text between
          the quotes.  Symbols that begin with a lowercase letter are terminal
          symbols that are matched by the regular expressions (using the Perl Compatible
          Regular Expression syntax [@@ref PCRE]) as follows:
        </p>
        <table class='grammar'>
          <tr>
            <td id='prod-integer' class='nt'>integer</td>
            <td>=</td>
            <td class='prod-rhs'>0([0-7]*|[Xx][0-9A-Fa-f]+)|[1-9][0-9]*</td>
          </tr>
          <tr>
            <td id='prod-float' class='nt'>float</td>
            <td>=</td>
            <td class='prod-rhs'>([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][0-9]+)?|[0-9]+[Ee][0-9]+</td>
          </tr>
          <tr>
            <td id='prod-identifier' class='nt'>identifier</td>
            <td>=</td>
            <td class='prod-rhs'>[A-Z_a-z][0-9A-Z_a-z]*</td>
          </tr>
          <tr>
            <td id='prod-whitespace' class='nt'>whitespace</td>
            <td>=</td>
            <td class='prod-rhs'>[\t\n\r ]</td>
          </tr>
        </table>

        <div class='ednote'>
          <p>
            Should we require quoting (with an underscore) of identifiers that would match
            keywords used in OMG IDL 3.0 but not in this IDL?
          </p>
        </div>

        <p>
          When tokenizing, the longest possible match must be used.  For example, if the input
          text is “<tt>a1</tt>”, it should be tokenized as a single <span class='nt'>identifier</span>,
          and not as a separate <span class='nt'>identifier</span> and <span class='nt'>integer</span>.
          If the longest possible match could match both an <span class='nt'>identifier</span> and
          one of the quoted terminal symbols from the grammar, it must be tokenized as the quoted
          terminal symbol.  Thus, the input text “<tt>in</tt>” is tokenized as the quoted terminal symbol
          <span class='nt'>"in"</span> rather than an <span class='nt'>identifier</span> called “in”.
        </p>

        <p>
          Implicitly, the <span class='nt'>whitespace</span> terminal is allowed between every terminal
          in the input text being parsed.  Such <span class='nt'>whitespace</span> terminals are
          ignored while parsing.
        </p>

        <p>
          The following LL(1) grammar matches IDL fragments:
        </p>

        <grammar xmlns=''>
          <prod nt='Definitions'>ExtendedAttributeList Definition Definitions | ε</prod>
          <prod nt='Definition'>Module | Interface | Exception | Typedef | Valuetype | Const</prod>
          <prod nt='Module'>"module" identifier "{" Definitions "}" ";"</prod>
          <prod nt='Interface'>"interface" identifier InterfaceInheritance InterfaceBody ";"</prod>
          <prod nt='InterfaceInheritance'>":" ScopedName | ε</prod>
          <prod nt='InterfaceBody'>"{" InterfaceMembers "}" | ε</prod>
          <prod nt='InterfaceMembers'>ExtendedAttributeList InterfaceMember InterfaceMembers | ε</prod>
          <prod nt='InterfaceMember'>Const | Attribute | Operation</prod>
          <prod nt='Exception'>"exception" identifier "{" ExceptionMembers "}" ";"</prod>
          <prod nt='ExceptionMembers'>ExtendedAttributeList ExceptionMember ExceptionMembers | ε</prod>
          <prod nt='Typedef'>"typedef" Type identifier ";"</prod>
          <prod nt='Valuetype'>"valuetype" identifier Type ";"</prod>
          <prod nt='Const'>"const" Type identifier ConstExpr ";"</prod>
          <prod nt='ConstExpr'>BooleanLiteral | integer | float</prod>
          <prod nt='BooleanLiteral'>"TRUE" | "FALSE"</prod>
          <prod nt='Attribute'>ReadOnly "attribute" Type identifier GetRaises SetRaises ";"</prod>
          <prod nt='ReadOnly'>"readonly" | ε</prod>
          <prod nt='GetRaises'>"getraises" ExceptionList | ε</prod>
          <prod nt='SetRaises'>"setraises" ExceptionList | ε</prod>
          <prod nt='Operation'>ReturnType identifier "(" ArgumentList ")" Raises ";"</prod>
          <prod nt='Raises'>"raises" ExceptionList | ε</prod>
          <prod nt='ExceptionList'>"(" ScopedName Exceptions ")"</prod>
          <prod nt='Exceptions'>"," ScopedName Exceptions | ε</prod>
          <prod nt='ArgumentList'>Argument Arguments | ε</prod>
          <prod nt='Arguments'>"," Argument Arguments | ε</prod>
          <prod nt='Argument'>"in" Type identifier</prod>
          <prod nt='ExceptionMember'>Type identifier ";"</prod>
          <prod nt='ExtendedAttributeList'>"[" ExtendedAttribute ExtendedAttributes "]"</prod>
          <prod nt='ExtendedAttributes'>"," ExtendedAttribute ExtendedAttributes | ε</prod>
          <prod nt='ExtendedAttribute'>identifier ExtendedAttributeAssignment</prod>
          <prod nt='ExtendedAttributeAssignment'>"=" ExtendedAttributeArgument | ε</prod>
          <prod nt='ExtendedAttributeArgument'>identifier</prod>
          <prod nt='Type'>IntegerType | ScopedName | "any" | "boolean" | "octet" | "unsigned" IntegerType | "float" | "Object" | "sequence" "&lt;" Type ">"</prod>
          <prod nt='UnsignedType'>"unsigned" IntegerType</prod>
          <prod nt='IntegerType'>"short" | "long" OptionalLong</prod>
          <prod nt='OptionalLong'>"long" | ε</prod>
          <prod nt='ReturnType'>Type | "void"</prod>
          <prod nt='ScopedName'>"::" identifier ScopedNameParts | identifier ScopedNameParts</prod>
          <prod nt='ScopedNameParts'>"::" identifier ScopedNameParts | ε</prod>

          <!--prod nt='Keyword'>"any" | "attribute" | "boolean" | "const" | "exception" | "float" | "getraises" | "in" | "interface" | "long" | "module" | "Object" | "octet" | "raises" | "readonly" | "sequence" | "setraises" | "short" | "typedef" | "unsigned | "v id"</prod-->
          <!-- the following are the remaining OMG IDL 3 keywords:
          "abstract" |
          "case" |
          "char" |
          "component" |
          "consumes" |
          "context" |
          "custom" |
          "default" |
          "double" |
          "emits" |
          "enum" |
          "eventtype" |
          "factory" |
          "FALSE" |
          "finder" |
          "fixed" |
          "home" |
          "inout" |
          "local" |
          "multiple" |
          "native" |
          "oneway" |
          "out" |
          "primarykey" |
          "private" |
          "provides" |
          "public" |
          "publishes" |
          "string" |
          "struct" |
          "supports" |
          "switch" |
          "TRUE" |
          "truncatable" |
          "typeid" |
          "typeprefix" |
          "union" |
          "uses" |
          "ValueBase" |
          "wchar" |
          "wstring"
          -->
        </grammar>
      </div>

      <div id='references' class='section'>
        <h2>References</h2>

        <dl>
          <dt id='ref-ECMA-262'>[ECMA-262]</dt>
          <dd>
            <cite><a href='http://www.ecma-international.org/publications/standards/Ecma-262.htm'>ECMAScript Language Specification, 3rd Edition</a></cite>,
            M. Cowlishaw, Editor.  Ecma International, December 1999.  Available at http://www.ecma-international.org/publications/standards/Ecma-262.htm.
          </dd>
          <dt id='ref-OMGIDL'>[OMGIDL]</dt>
          <dd>
            <cite><a href='http://www.omg.org/cgi-bin/apps/doc?formal/02-06-39.pdf'>CORBA 3.0 – OMG IDL Syntax and Semantics chapter</a></cite>.
            Object Management Group, June 2002.  Available at http://www.omg.org/cgi-bin/apps/doc?formal/02-06-39.pdf.
          </dd>
        </dl>
      </div>
    </div>
  </body>
</html>
