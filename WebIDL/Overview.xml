<?xml version='1.0'?>

<!--
  Overview.xml
  Web IDL

  This is written in XHTML 1.0 Strict with an inline <options> element that
  helps the WebIDL.xsl stylesheet process the document (generating a table
  of contents, section numbers, certain processing instructions).
  -->

<?xml-stylesheet href='WebIDL.xsl' type='text/xsl'?>

<html xmlns='http://www.w3.org/1999/xhtml' xmlns:x='http://mcc.id.au/ns/local' xml:lang='en'>
  <head>
    <meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/>
    <title>Web IDL</title>
    <meta name='revision' content='$Id: Overview.xml,v 1.251 2010-11-02 04:32:51 cmccorma Exp $'/>
    <link rel='stylesheet' href='WebIDL.css' type='text/css'/>
    <script src='section-links.js' type='application/ecmascript'/>
    <script src='dfn.js' type='application/ecmascript'/>
    <!--[if IE]>
    <style type='text/css'>
      .ignore {
        -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";
        filter: alpha(opacity=50);
      }
    </style>
    <![endif]-->

    <options xmlns='http://mcc.id.au/ns/local'>
      <versions>
        <cvs href='http://dev.w3.org/2006/webapi/WebIDL/'/>
        <this href='http://www.w3.org/TR/2010/WD-WebIDL-201xxxxx/'/>
        <latest href='http://www.w3.org/TR/WebIDL/'/>
        <previous href='http://www.w3.org/TR/2009/WD-WebIDL-20101021/'/>
      </versions>
      <editors>
        <person homepage='http://mcc.id.au/' email='cam@mcc.id.au'>
          <name>Cameron McCormack</name>
          <affiliation>Mozilla Corporation</affiliation>
        </person>
        <!--
        <person email='weinig@apple.com'>
          <name>Sam Weinig</name>
          <affiliation>Apple Inc.</affiliation>
        </person>
        -->
      </editors>
      <maturity>ED</maturity>
    </options>
  </head>

  <body>
    <?top?>

    <div class='section'>
      <h2>Abstract</h2>
      <p>
        This document defines an interface definition language, Web IDL,
        that can be used to describe interfaces that are intended to be
        implemented in web browsers.  Web IDL is an IDL variant with a
        number of features that allow the behavior of common script objects in
        the web platform to be specified more readily.  How interfaces
        described with Web IDL correspond to constructs within ECMAScript and
        Java execution environments is also detailed.
      </p>

      <?revision-note http://www.w3.org/Bugs/Public/buglist.cgi?query_format=advanced&amp;short_desc_type=allwordssubstr&amp;short_desc=&amp;product=WebAppsWG&amp;component=WebIDL&amp;longdesc_type=allwordssubstr&amp;longdesc=&amp;bug_file_loc_type=allwordssubstr&amp;bug_file_loc=&amp;status_whiteboard_type=allwordssubstr&amp;status_whiteboard=&amp;keywords_type=allwords&amp;keywords=&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;emailtype1=substring&amp;email1=&amp;emailtype2=substring&amp;email2=&amp;bug_id_type=anyexact&amp;bug_id=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;cmdtype=doit&amp;order=Importance&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=?>
    </div>

    <div class='section'>
      <h2>Status of this Document</h2>
      <?sotd-top public-script-coord@w3.org http://lists.w3.org/Archives/Public/public-script-coord/?>
      <p>
        Previous discussion of this specification has taken place on two other
        mailing lists: <a href="mailto:public-webapps@w3.org">public-webapps@w3.org</a>
        (<a href="http://lists.w3.org/Archives/Public/public-webapps/">archive</a>)
        and <a href="mailto:public-webapi@w3.org">public-webapi@w3.org</a>
        (<a href="http://lists.w3.org/Archives/Public/public-webapi/">archive</a>).
      </p>
      <p>
        <cite>Web IDL</cite> is intended to specify in detail the interface definition
        language used by W3C specifications to define interfaces, and to
        provide precise conformance requirements for ECMAScript and
        Java bindings of such interfaces.  It is expected that this document acts
        as a guide to implementors of already-published specifications,
        and that newly published specifications reference this
        document to ensure conforming implementations of interfaces
        are interoperable.
      </p>
      <p>
        Previous working drafts of this document were called <cite>Language
          Bindings for DOM Specifications</cite>.  Also note that this document
        is unrelated to
        <cite><a href='http://www.w3.org/TR/NOTE-widl-970922'>Web Interface
            Definition Language</a></cite>, a W3C Member submission from
        some time ago <a href='#ref-WIDLNOTE'>[WIDLNOTE]</a>.
      </p>
      <p>
        This document is produced by the
        <a href='http://www.w3.org/2008/webapps/'>Web Applications Working Group</a>, part of the
        <a href='http://www.w3.org/2006/rwc/Activity'>Rich Web Clients Activity</a>
        in the W3C <a href='http://www.w3.org/Interaction/'>Interaction Domain</a>.
        Changes made to this document can be found in the
        <a href='http://dev.w3.org/cvsweb/2006/webapi/WebIDL/Overview.xml'>W3C
          public CVS server</a>.
      </p>
      <p>
        In addition to the issues marked by editorial notes in this document,
        there is a <a href='http://www.w3.org/Bugs/Public/buglist.cgi?query_format=advanced&amp;short_desc_type=allwordssubstr&amp;short_desc=&amp;product=WebAppsWG&amp;component=WebIDL&amp;longdesc_type=allwordssubstr&amp;longdesc=&amp;bug_file_loc_type=allwordssubstr&amp;bug_file_loc=&amp;status_whiteboard_type=allwordssubstr&amp;status_whiteboard=&amp;keywords_type=allwords&amp;keywords=&amp;bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;emailtype1=substring&amp;email1=&amp;emailtype2=substring&amp;email2=&amp;bug_id_type=anyexact&amp;bug_id=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;cmdtype=doit&amp;order=Reuse+same+sort+as+last+time&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0='>list of open bugs</a>
        on the specification.
      </p>
      <?sotd-bottom http://www.w3.org/2004/01/pp-impl/42538/status?>
    </div>

    <div id='toc'>
      <h2>Table of Contents</h2>
      <?toc sections appendices?>
    </div>

    <div class='ednote'>
      <p><a href="http://lists.w3.org/Archives/Public/public-webapps/2009JanMar/0458.html">HTML 5 uses Date</a>,
        so we'll need to decide what to do with that.</p>
      <p>Current thoughts are to be able to state that an interface has
        a custom mapping to language bindings, and to map that type to
        a <span class='estype'>Date</span> in ECMAScript and a
        <span class='javatype'>java.util.Date</span> in Java.</p>
    </div>

    <div id='sections'>
      <div id='introduction' class='section'>
        <h2>Introduction</h2>

        <p class='norm'>This section is informative.</p>

        <p>
          Technical reports published by the W3C that include programming
          language interfaces have typically been described using the
          Object Management Group’s Interface Definition Language (IDL)
          <a href='#ref-OMGIDL'>[OMGIDL]</a>.  The IDL provides a means to
          describe these interfaces in a language independent manner.  Usually,
          additional language binding appendices are included in such
          documents which detail how the interfaces described with the IDL
          correspond to constructs in the given language.
        </p>
        <p>
          However, the bindings in these specifications for the language most
          commonly used on the web, ECMAScript, are consistently specified with
          low enough precision as to result in interoperability issues.  In
          addition, each specification must describe the same basic information,
          such as DOM interfaces described in IDL corresponding to properties
          on the ECMAScript global object, or the <a class='idltype' href='#idl-unsigned-long'>unsigned
            long</a> IDL type mapping to the <span class='estype'>Number</span>
          type in ECMAScript.
        </p>
        <p>
          This specification defines an IDL language similar to OMG IDL
          for use by specifications that define interfaces for Web APIs.  A number of extensions are
          given to the IDL to support common functionality that previously must
          have been written in prose.  In addition, precise language bindings
          for ECMAScript 5th Edition and Java 5 are given.
        </p>
      </div>

      <div id='conformance' class='section'>
        <h2>Conformance</h2>

        <p>
          Everything in this specification is normative except for diagrams,
          examples, notes and sections marked as being informative.
        </p>
        <p>
          The keywords “<span class='rfc2119'>MUST</span>”,
          “<span class='rfc2119'>MUST NOT</span>”,
          “<span class='rfc2119'>REQUIRED</span>”,
          “<span class='rfc2119'>SHALL</span>”,
          “<span class='rfc2119'>SHALL NOT</span>”,
          “<span class='rfc2119'>SHOULD</span>”,
          “<span class='rfc2119'>SHOULD NOT</span>”,
          “<span class='rfc2119'>RECOMMENDED</span>”,
          “<span class='rfc2119'>MAY</span>” and
          “<span class='rfc2119'>OPTIONAL</span>” in this document are to be
          interpreted as described in
          <cite><a href='http://www.ietf.org/rfc/rfc2119'>Key words for use in RFCs to
              Indicate Requirement Levels</a></cite>
          <a href='#ref-RFC2119'>[RFC2119]</a>.
        </p>
        <p>
          The following conformance classes are defined by this specification:
        </p>
        <dl>
          <dt><dfn id='dfn-conforming-idl-fragment'>conforming IDL fragment</dfn></dt>
          <dd>
            <p>
              An <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> is considered
              to be a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
                IDL fragment</a> if it satisfies all of the
              <span class='rfc2119'>MUST</span>-,
              <span class='rfc2119'>REQUIRED</span>- and <span class='rfc2119'>SHALL</span>-level
              criteria in this specification that apply to IDL fragments.
            </p>
          </dd>
          <dt><dfn id='dfn-conforming-implementation'>conforming implementation</dfn></dt>
          <dd>
            <p>
              A user agent is considered to be a
              <a class='dfnref' href='#dfn-conforming-implementation'>conforming implementation</a>
              with respect to a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
                IDL fragment</a>  if it satisfies all of the <span class='rfc2119'>MUST</span>-,
              <span class='rfc2119'>REQUIRED</span>- and <span class='rfc2119'>SHALL</span>-level
              criteria in this specification that apply to implementations for all language
              bindings that the user agent supports.
            </p>
          </dd>
          <dt><dfn id='dfn-conforming-ecmascript-implementation'>conforming ECMAScript implementation</dfn></dt>
          <dd>
            <p>
              A user agent is considered to be a
              <a class='dfnref' href='#dfn-conforming-ecmascript-implementation'>conforming ECMAScript implementation</a>
              with respect to a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
                IDL fragment</a>  if it satisfies all of the <span class='rfc2119'>MUST</span>-,
              <span class='rfc2119'>REQUIRED</span>- and <span class='rfc2119'>SHALL</span>-level
              criteria in this specification that apply to implementations for the ECMAScript
              language binding.
            </p>
          </dd>
          <dt><dfn id='dfn-conforming-java-implementation'>conforming Java implementation</dfn></dt>
          <dd>
            <p>
              A user agent is considered to be a
              <a class='dfnref' href='#dfn-conforming-java-implementation'>conforming Java implementation</a>
              with respect to a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
                IDL fragment</a> if it satisfies all of the <span class='rfc2119'>MUST</span>-,
              <span class='rfc2119'>REQUIRED</span>- and <span class='rfc2119'>SHALL</span>-level
              criteria in this specification that apply to implementations for the Java
              language binding.
            </p>
          </dd>
        </dl>

        <div class='ednote'>
          <p>Do we need to be able to “import” other IDL fragments?  <a href='http://www.w3.org/mid/20090629055421.GC16905@arc.mcc.id.au'>(Mail.)</a></p>
        </div>
      </div>

      <div id='idl' class='section'>
        <h2>Interface definition language</h2>

        <p>
          This section describes a language with which interfaces can be defined
          in a language independent manner.
        </p>

        <div class='ednote'>
          <p>There’s a request for an enum definition. <a href='http://www.w3.org/mid/FAA1D89C5BAF1142A74AF116630A9F2C28942D7465@OBEEX01.obe.access-company.com'>(Mail.)</a></p>
        </div>
        <p>
          An <dfn id='dfn-idl-fragment'>IDL fragment</dfn> is a sequence of definitions that matches the
          <a class='nt' href='#prod-Definitions'>Definitions</a> non-terminal
          in the grammar.  See <a href='#idl-grammar'>Appendix <?sref idl-grammar?></a>
          for the complete grammar and an explanation of the notation used.
        </p>

        <p>
          Each definition (matching <a class='nt' href='#prod-Definition'>Definition</a>)
          can be preceded by a list of <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a> (matching
          <a class='nt' href='#prod-ExtendedAttributeList'>ExtendedAttributeList</a>),
          which can control how the definition will be handled in language bindings.
          The extended attributes defined by this specification that are language binding
          agnostic are discussed in <a href='#idl-extended-attributes'>section <?sref idl-extended-attributes?></a>,
          while those specific to the ECMAScript language binding are discussed
          in <a href='#es-extended-attributes'>section <?sref es-extended-attributes?></a>.
        </p>

        <p>
          A definition is said to be <dfn id='dfn-outermost-scope'>declared at the outermost
            scope</dfn> if there is no <a class='nt' href='#prod-Module'>Module</a> ancestor
          of the non-terminal representing the definition in the parse tree for the
          <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>.
          <a class='dfnref' href='#dfn-conforming-idl-fragment'>Conforming IDL fragments</a>
          <span class='rfc2119'>SHOULD NOT</span> have any non-<a class='dfnref' href='#dfn-module'>module</a>
          definitions declared at the outermost scope.
        </p>

        <!--
        <p>
          A definition has been <dfn id='dfn-declared-previously'>declared previously</dfn>,
          relative to a given <a class='dfnref' href='#dfn-scoped-name'>scoped name</a> that
          <a class='dfnref' href='#dfn-resolve'>resolved</a> to the definition, if:
        </p>
        <ul>
          <li>
            the scoped name resolves to a definition other than an
            <a class='dfnref' href='#dfn-interface'>interface</a>, and
            the first terminal symbol of the <a class='nt' href='#prod-Definition'>Definition</a>
            for the interface occurs before the scoped name; or,
          </li>
          <li>
            the scoped name resolves to an
            <a class='dfnref' href='#dfn-interface'>interface</a>, and
            the first terminal symbol of the <a class='nt' href='#prod-Definition'>Definition</a>
            for the interface or a <a class='dfnref' href='#dfn-interface-forward-declaration'>forward declaration</a>
            for the interface occurs before scoped name.
          </li>
        </ul>
        -->

        <?productions grammar Definitions Definition?>

        <div id='idl-names' class='section'>
          <h3>Names</h3>

          <p>
            Every <a class='dfnref' href='#dfn-module'>module</a>,
            <a class='dfnref' href='#dfn-interface'>interface</a>,
            <a class='dfnref' href='#dfn-exception'>exception</a>,
            <a class='dfnref' href='#dfn-typedef'>typedef</a>,
            <a class='dfnref' href='#dfn-constant'>constant</a>,
            <a class='dfnref' href='#dfn-attribute'>attribute</a> and
            <a class='dfnref' href='#dfn-exception-field'>exception field</a> has an
            <dfn id='dfn-identifier'>identifier</dfn>, as do some
            <a class='dfnref' href='#dfn-operation'>operations</a>.
            The identifier is determined by an
            <a class='nt' href='#prod-identifier'>identifier</a> terminal somewhere
            in the derivation of the non-terminal corresponding to the given
            construct:
          </p>
          <ul>
            <li>
              For <a class='dfnref' href='#dfn-module'>modules</a>, <a class='dfnref' href='#dfn-interface'>interfaces</a>
              and <a class='dfnref' href='#dfn-exception'>exceptions</a>, the first
              <a class='nt' href='#prod-identifier'>identifier</a> terminal in
              a derivation of the <a class='nt' href='#prod-Interface'>Interface</a>
              or <a class='nt' href='#prod-Exception'>Exception</a>
              determines the identifier of that definition.
            </li>
            <li>
              For <a class='dfnref' href='#dfn-constant'>constants</a>, <a class='dfnref' href='#dfn-typedef'>typedefs</a>
              and <a class='dfnref' href='#dfn-exception-field'>exception fields</a>,
              the final <a class='nt' href='#prod-identifier'>identifier</a> terminal
              in a derivation of the <a class='nt' href='#prod-Const'>Const</a>,
              <a class='nt' href='#prod-Typedef'>Typedef</a> or
              <a class='nt' href='#prod-ExceptionField'>ExceptionField</a>
              determines the identifier.
            </li>
            <li>
              For <a class='dfnref' href='#dfn-operation'>operations</a>, the
              <a class='nt' href='#prod-identifier'>identifier</a> terminal that is
              part of the <a class='nt' href='#prod-OptionalIdentifier'>OptionalIdentifier</a>
              in a derivation of the <a class='nt' href='#prod-Operation'>Operation</a>
              determines the identifier of the operation.
              If the <a class='nt' href='#prod-OptionalIdentifier'>OptionalIdentifier</a>
              did not match an <a class='nt' href='#prod-identifier'>identifier</a> terminal,
              then the operation does not have an identifier.
            </li>
          </ul>
          <div class='note'>
            <p>
              Operations can have no identifier when they are being used to declare a
              special kind of operation, such as a getter or setter.
            </p>
          </div>
          <p>
            The <a class='nt' href='#prod-identifier'>identifier</a> terminal
            then determines the <a class='dfnref' href='#dfn-identifier'>identifier</a>
            as follows:
          </p>
          <ul>
            <li>
              If the value of the <a class='nt' href='#prod-identifier'>identifier</a>
              terminal begins with a <span class='char'>U+005F LOW LINE ("_")</span> character,
              then the identifier of the
              definition, interface member or exception member
              is the value of the <a class='nt' href='#prod-identifier'>identifier</a>
              terminal without that leading <span class='char'>U+005F LOW LINE ("_")</span> character.
            </li>
            <li>
              Otherwise, the value of the <a class='nt' href='#prod-identifier'>identifier</a>
              terminal does not begin with a <span class='char'>U+005F LOW LINE ("_")</span> character.
              The identifier of the definition, interface member or exception member is the value of the
              <a class='nt' href='#prod-identifier'>identifier</a> terminal.
            </li>
          </ul>
          <div class='note'>
            <p>
              So the identifier is just the value of the relevant <a class='nt' href='#prod-identifier'>identifier</a>
              terminal with any leading <span class='char'>"_"</span> character removed.  A leading
              <span class='char'>"_"</span> is used to escape an identifier from looking
              like a reserved word terminal.
            </p>
          </div>
          <p>
            Every <a class='dfnref' href='#dfn-module'>module</a>,
            <a class='dfnref' href='#dfn-interface'>interface</a>,
            <a class='dfnref' href='#dfn-exception'>exception</a> and
            <a class='dfnref' href='#dfn-typedef'>typedef</a> also has a <dfn id='dfn-qualified-name'>qualified name</dfn>,
            determined as follows:
          </p>
          <ul>
            <li>
              If the definition is
              <a class='dfnref' href='#dfn-outermost-scope'>declared at the outermost scope</a>,
              then the qualified name
              of the definition is two consecutive <span class='char'>U+003A COLON (":")</span>
              characters followed by the <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of the definition.
            </li>
            <li>
              Otherwise, the definition is not declared at the outermost scope.  The qualified name
              of the definition is the qualified name
              of the definition’s <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              followed by two consecutive <span class='char'>U+003A COLON (":")</span>
              characters followed by the identifier of the definition.
            </li>
          </ul>
          <p>
            The <a class='dfnref' href='#dfn-qualified-name'>qualified name</a> of every
            <a class='dfnref' href='#dfn-module'>module</a>,
            <a class='dfnref' href='#dfn-interface'>interface</a>,
            <a class='dfnref' href='#dfn-exception'>exception</a> and
            <a class='dfnref' href='#dfn-typedef'>typedef</a> <span class='rfc2119'>MUST NOT</span>
            be the same as the qualified name of any other
            <a class='dfnref' href='#dfn-interface'>interface</a>,
            <a class='dfnref' href='#dfn-exception'>exception</a> or
            <a class='dfnref' href='#dfn-typedef'>typedef</a>.
          </p>
          <div class='note'>
            <p>
              Multiple <a class='dfnref' href='#dfn-module'>module</a> declarations can
              have the same <a class='dfnref' href='#dfn-qualified-name'>qualified name</a>.
              When a subsequent module declaration for the same qualified name
              is encountered, this effectively re-opens the module for definitions.
              See <a href='#idl-modules'>section <?sref idl-modules?></a> <?sdir idl-modules?>
              for details.
            </p>
          </div>
          <p>
            A <dfn id='dfn-scoped-name'>scoped name</dfn> is a string formed from the
            concatenation of the terminal values (removing any leading
            <span class='char'>U+005F LOW LINE ("_")</span> characters from the value
            of <a class='nt' href='#prod-identifier'>identifier</a> terminals, as in
            the rules for <a class='dfnref' href='#dfn-identifier'>identifiers</a>)
            in the derivation of a <a class='nt' href='#prod-ScopedName'>ScopedName</a>
            non-terminal.  The scoped name
            is an <dfn id='dfn-absolute-scoped-name'>absolute scoped name</dfn>
            if it begins with two consecutive <span class='char'>U+003A COLON (":")</span>
            characters, or a <dfn id='dfn-relative-scoped-name'>relative scoped name</dfn>
            if it does not.
          </p>
          <p>
            A scoped name can be <dfn id='dfn-resolve'>resolved</dfn>, with respect to a given
            module, to a definition as follows:
          </p>
          <ul>
            <li>
              If the scoped name is a
              <a class='dfnref' href='#dfn-relative-scoped-name'>relative scoped name</a>, then
              the following steps gives the definition it resolves to:
              <ol class='algorithm'>
                <li>
                  Let <var>n</var> be the <a class='dfnref' href='#dfn-qualified-name'>qualified name</a>
                  of the <a class='dfnref' href='#dfn-module'>module</a>.
                </li>
                <li>
                  While <var>n</var> is not the empty string:
                  <ol>
                    <li>
                      If there exists a definition whose
                      <a class='dfnref' href='#dfn-qualified-name'>qualified name</a> is
                      equal to the concatenation of <var>n</var>, two
                      <span class='char'>U+003A COLON (":")</span> characters and
                      the scoped name, then the scoped name resolves to that definition;
                      end these steps.
                    </li>
                    <li>
                      Remove the last name component from <var>n</var> (that is, from
                      the second last <span class='char'>U+003A COLON (":")</span>
                      character to the end of the string, inclusive).
                    </li>
                  </ol>
                </li>
                <li>
                  The scoped name does not resolve to a definition.
                </li>
              </ol>
            </li>
            <li>
              Otherwise, the scoped name is an
              <a href='#dfn-absolute-scoped-name'>absolute scoped name</a>:
              <ul>
                <li>
                  If there exists a definition whose
                  qualified name is
                  equal to the scoped name, then the scoped name resolves to that definition.
                </li>
                <li>
                  Otherwise, the scoped name does not resolve to a definition.
                </li>
              </ul>
            </li>
          </ul>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates how <a class='dfnref' href='#dfn-identifier'>identifiers</a>
              and <a class='dfnref' href='#dfn-qualified-name'>qualified names</a> are given
              to definitions, <a class='dfnref' href='#dfn-interface-member'>interface members</a>
              and <a class='dfnref' href='#dfn-exception-member'>exception members</a>.
            </p>
            <x:codeblock language='idl'><span class='comment'>// Module identifier: "framework"</span>
<span class='comment'>// Qualified name:    "::framework"</span>
module framework {

  <span class='comment'>// Typedef identifier: "number"</span>
  <span class='comment'>// Qualified name:    "::framework::number"</span>
  typedef float number;

  <span class='comment'>// Exception identifier: "FrameworkException"</span>
  <span class='comment'>// Qualified name:       "::framework::FrameworkException"</span>
  exception FrameworkException {

    <span class='comment'>// Constant identifier: "ERR_NOT_FOUND"</span>
    <span class='comment'>// Qualified name:      "::framework::FrameworkException::ERR_NOT_FOUND"</span>
    const long ERR_NOT_FOUND = 1;

    <span class='comment'>// Exception field identifier: "code"</span>
    long code;
  };

  <span class='comment'>// Interface identifier: "System"</span>
  <span class='comment'>// Qualified name:       "::framework::System"</span>
  interface System {

    <span class='comment'>// Operation identifier:          "createObject"</span>
    <span class='comment'>// Operation argument identifier: "interface"</span>
    object createObject(in DOMString _interface);

    <span class='comment'>// Operation has no identifier; it declares a getter.</span>
    getter DOMString (in DOMString keyName);
  };

  <span class='comment'>// Module identifier: "gui"</span>
  <span class='comment'>// Qualified name:    "::framework::gui"</span>
  module gui {
    
    <span class='comment'>// Interface identifier: "TextField"</span>
    <span class='comment'>// Qualified name:       "::framework::gui::TextField"</span>
    interface TextField {

      <span class='comment'>// Attribute identifier: "const"</span>
      attribute boolean _const;

      <span class='comment'>// Attribute identifier: "value"</span>
      attribute DOMString? _value;
    };
  };
};</x:codeblock>
            <p>
              Note that while the second <a class='dfnref' href='#dfn-attribute'>attribute</a>
              on the <span class='idltype'>TextField</span> <a class='dfnref' href='#dfn-interface'>interface</a>
              need not have been escaped with an underscore (because “value” is
              not a quoted terminal symbol in the IDL grammar), it is still unescaped
              to obtain the attribute’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </p>
          </div>

          <?productions grammar ScopedName AbsoluteScopedName RelativeScopedName ScopedNameParts?>
        </div>

        <div id='idl-modules' class='section'>
          <h3>Modules</h3>

          <div class='ednote'>
            <p>Should W3C specs place use modules at all?  <a href='http://www.w3.org/mid/20090719235817.GA10248@arc.mcc.id.au'>(Mail.)</a></p>
          </div>
          <p>
            A <dfn id='dfn-module'>module</dfn> is a definition that matches the
            <a class='nt' href='#prod-Module'>Module</a> non-terminal, and serves
            as a container for grouping together related definitions.
          </p>
          <p>
            The <dfn id='dfn-enclosing-module'>enclosing module</dfn> of a definition
            is defined as follows:
          </p>
          <ul>
            <li>
              If the definition is
              <a class='dfnref' href='#dfn-outermost-scope'>declared at the outermost scope</a>,
              then the definition has no enclosing module.
            </li>
            <li>
              Otherwise, the definition is not declared at the outermost scope.
              The enclosing module of the definition is the closest <a class='nt' href='#prod-Module'>Module</a>
              ancestor of the non-terminal representing the definition
              in the <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>’s parse tree.
            </li>
          </ul>
          <p>
            The relevant language binding determines how modules affect the naming
            of constructs that correspond to definitions in the language.  If the language
            supports some form of namespacing mechanism, then a module will correspond
            to a namespace.  The name of that namespace can be based on the module’s
            <dfn id='dfn-prefixed-name'>prefixed name</dfn>, which is defined as
            follows:
          </p>
          <ul>
            <li>
              If the <a class='dfnref' href='#dfn-module'>module</a> has a
              <a class='xattr' href='#Prefix'>[Prefix]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              whose argument starts with the string “::”, then the
              <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> of
              the module is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              constructed by concatenating the <a class='xattr' href='#Prefix'>[Prefix]</a>
              argument, the string “::” and the module’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </li>
            <li>
              Otherwise, if the <a class='dfnref' href='#dfn-module'>module</a> has a
              <a class='xattr' href='#Prefix'>[Prefix]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              whose argument does not start with the string “::”, then the
              <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> of
              the module is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              constructed by concatenating the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a>
              of the module’s <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              (or “::” if there is no enclosing module), the string “::”, the
              <a class='xattr' href='#Prefix'>[Prefix]</a> argument, the string
              “::” and the module’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </li>
            <li>
              Otherwise, if the <a class='dfnref' href='#dfn-qualified-name'>qualified name</a>
              of the <a class='dfnref' href='#dfn-module'>module</a> is “::dom”, then
              the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> of the
              module is the <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              “::org::w3c::dom”.
            </li>
            <li>
              Otherwise, if the <a class='dfnref' href='#dfn-module'>module</a> has
              no <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>,
              then the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> of the
              module is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              constructed by concatenating the string “::org::w3c::dom::” and the
              module’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </li>
            <li>
              Otherwise, the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a>
              of the module is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
              constructed by concatenating the prefixed name of the module’s
              <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              and the module’s <a class='dfnref' href='#dfn-identifier'>identifier</a>.
            </li>
          </ul>
          <p>
            In the Java language binding, the name of the Java package is
            derived by taking the <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a>
            and replacing occurrences of “::” with “.” (see <a href='#java-modules'>section <?sref java-modules?></a>).
            It is expected that bindings for other languages that typically
            use reversed domain names for namespacing will also use the prefixed
            name of a module to determine namespace names.
          </p>
          <p>
            The ECMAScript language binding allows a namespacing mechanism based
            on the <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>
            of a module by using the <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
          </p>
          <p>
            The following <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            are applicable to <a class='dfnref' href='#dfn-module'>modules</a>:
            <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a>,
            <a class='xattr' href='#Prefix'>[Prefix]</a>.
          </p>

          <?productions grammar Module?>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              illustrates how related <a class='dfnref' href='#dfn-interface'>interfaces</a>
              can be grouped together in <a class='dfnref' href='#dfn-module'>modules</a>:
            </p>
            <x:codeblock language='idl'>module gfx {

  module geom {
    interface Shape { /* ... */ };
    interface Rectangle : Shape { /* ... */ };
    interface Path : Shape { /* ... */ };
  };

  interface GraphicsContext {
    void fillShape(in geom::Shape s);
    void strokeShape(in geom::Shape s);
  };
};

module gui {

  interface Widget { /* ... */  };

  interface Window : Widget {
    gfx::GraphicsContext getGraphicsContext();
  };

  interface Button : Widget { /* ... */  };
};</x:codeblock>
          </div>
        </div>

        <div id='idl-interfaces' class='section'>
          <h3>Interfaces</h3>

          <div class='ednote'>
            <p>A request for static members. <a href='http://www.w3.org/mid/e29a0b640911130535o7fd10300vc0a3b18f644c161f@mail.gmail.com'>(Mail.)</a></p>
          </div>
          <p>
            An <dfn id='dfn-interface'>interface</dfn> is a definition that matches the
            <a class='nt' href='#prod-Interface'>Interface</a> non-terminal<!-- whose
            <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a> is not empty
            (that is, it is not the case that <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a> ⇒ ε)-->.
            An interface is a specification of a set of
            <dfn id='dfn-interface-member'>interface members</dfn>, which are the
            <a class='dfnref' href='#dfn-constant'>constants</a>,
            <a class='dfnref' href='#dfn-attribute'>attributes</a> and
            <a class='dfnref' href='#dfn-operation'>operations</a>
            given by the <a class='nt' href='#prod-InterfaceMembers'>InterfaceMembers</a>
            part of the <a class='nt' href='#prod-Interface'>Interface</a>.
            Objects implementing the interface will have members that correspond
            to each of the interface’s members.
          </p>
          <p>
            An interface <dfn id='dfn-inherit'>inherits</dfn> from another if there is a
            <a class='dfnref' href='#dfn-scoped-name'>scoped name</a> in the
            <a class='nt' href='#prod-ScopedNameList'>ScopedNameList</a> that,
            with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
            of the interface, <a class='dfnref' href='#dfn-resolve'>resolves</a> to that inherited
            interface.  Every scoped name in the <a class='nt' href='#prod-ScopedNameList'>ScopedNameList</a>
            <span class='rfc2119'>MUST</span> resolve to an interface whose definition
            occurs before the definition of the inheriting interface.
            An object that implements an interface that inherits from another
            also implements that inherited interface.  The object therefore will also
            have members that correspond to the
            interface members from the inherited interface.
          </p>
          <div class='ednote'>
            <p>Multiple inheritance “might not be needed”. <a href='http://www.w3.org/2009/11/02-webapps-minutes.html#item06'>(Minutes.)</a></p>
          </div>
          <p>
            An interface
            <span class='rfc2119'>MUST NOT</span> be declared such that
            its inheritance hierarchy has a cycle.  That is, an interface
            <var>A</var> cannot inherit from itself, nor can it inherit from another
            interface <var>B</var> that inherits from <var>A</var>, and so on.
          </p>
          <p>
            Each interface member
            can be preceded by a list of <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a> (matching
            <a class='nt' href='#prod-ExtendedAttributeList'>ExtendedAttributeList</a>),
            which can control how the interface member will be handled in language bindings.
          </p>

          <p>
            The relevant language binding determines how interfaces correspond to constructs
            in the language.  Many object-oriented languages support interfaces, in which
            case the mapping of IDL interfaces to language interfaces is simple.
          </p>
          <!--
          <p>
            An <dfn id='dfn-interface-forward-declaration'>interface forward declaration</dfn>
            is a definition that matches the <a class='nt' href='#prod-Interface'>Interface</a> non-terminal
            whose <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a> is empty
            (that is, <a class='nt' href='#prod-InterfaceBody'>InterfaceBody</a> ⇒ ε).  A forward declaration
            is used to introduce an interface name to allow for the definition of mutually
            recursive interfaces, since scoped names
            need to resolve to types that have been
            <a class='dfnref' href='#dfn-declared-previously'>declared previously</a>.
          </p>
          -->

          <p>
            The following extended attributes are applicable to interfaces:
            <a class='xattr' href='#Callback'>[Callback]</a>,
            <a class='xattr' href='#Constructor'>[Constructor]</a>,
            <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>,
            <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>,
            <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>.
          </p>

          <?productions grammar Interface InterfaceInheritance InterfaceMembers InterfaceMember ScopedNameList ScopedNames?>

          <div class='example'>
            <!--
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates the use of an
              <a class='dfnref' href='#dfn-interface-forward-declaration'>interface forward declaration</a>
              to allow the definition of mutually referential <a class='dfnref' href='#dfn-interface'>interfaces</a>.
              Both <span class='idltype'>Human</span> and <span class='idltype'>Dog</span>
              inherit from <span class='idltype'>Animal</span>.  Objects that implement
              either of those two interfaces will thus have a <code>name</code> attribute.
            </p>
            -->
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates the definition of two mutually referential <a class='dfnref' href='#dfn-interface'>interfaces</a>.
              Both <span class='idltype'>Human</span> and <span class='idltype'>Dog</span>
              inherit from <span class='idltype'>Animal</span>.  Objects that implement
              either of those two interfaces will thus have a <code>name</code> attribute.
            </p>
            <x:codeblock language='idl'>interface Animal {
  attribute DOMString name;
};

interface Human : Animal {
  attribute Dog pet;
};

interface Dog : Animal {
  attribute Human owner;
};</x:codeblock>
          </div>

          <div id='idl-constants' class='section'>
            <h4>Constants</h4>

            <p>
              A <dfn id='dfn-constant'>constant</dfn> is a declaration that matches the
              <a class='nt' href='#prod-Const'>Const</a> non-terminal, and is used to
              bind a constant value to a name.  Constants can appear on
              <a class='dfnref' href='#dfn-interface'>interfaces</a> and
              <a class='dfnref' href='#dfn-exception'>exceptions</a>.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-identifier'>identifier</a> of a
              <a class='dfnref' href='#dfn-constant'>constant</a>
              <span class='rfc2119'>MUST NOT</span> be the same as the identifier
              of another <a class='dfnref' href='#dfn-interface-member'>interface member</a>
              defined on the same interface
              or another <a class='dfnref' href='#dfn-exception-member'>exception member</a>
              defined on the same exception.
            </p>
            <p>
              The <a class='nt' href='#prod-ConstExpr'>ConstExpr</a> part of a
              constant definition gives the value of the constant, which can be
              one of the two boolean literal terminals (<span class='terminal'>"true"</span>
              and <span class='terminal'>"false"</span>), an
              <a class='nt' href='#prod-integer'>integer</a> terminal or a
              <a class='nt' href='#prod-float'>float</a> terminal.
            </p>
            <p>
              The value of the boolean literal terminals are as follows:
            </p>
            <ul>
              <li>
                The value of the <span class='terminal'>"true"</span> terminal
                is the <a class='idltype' href='#idl-boolean'>boolean</a> value
                <span class='idlvalue'>true</span>.
              </li>
              <li>
                The value of the <span class='terminal'>"false"</span> terminal
                is the <a class='idltype' href='#idl-boolean'>boolean</a> value
                <span class='idlvalue'>false</span>.
              </li>
            </ul>
            <p>
              The value of an <a class='nt' href='#prod-integer'>integer</a> terminal
              is an integer, and is determined as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>S</var> be the string value of the <a class='nt' href='#prod-integer'>integer</a> terminal.</li>
              <li>Let <var>n</var> be the length of <var>S</var>.</li>
              <li>Initialize <var>mag</var> to 0.</li>
              <li>Initialize <var>sign</var> to 1.</li>
              <li>Initialize <var>base</var> to 10.</li>
              <li>Initialize <var>i</var> to 0.</li>
              <li>
                If the first character of <var>S</var> is <span class='char'>U+002D HYPHEN-MINUS ("-")</span>,
                then:
                <ol>
                  <li>Set <var>sign</var> to −1.</li>
                  <li>Set <var>i</var> to 1.</li>
                </ol>
              </li>
              <li>
                If the <var>i</var>th zero-based character of <var>S</var> is
                <span class='char'>U+0030 DIGIT ZERO ("0")</span>, then:
                <ol>
                  <li>Set <var>i</var> to <var>i</var> + 1.</li>
                  <li>If the <var>i</var>th zero-based character of <var>S</var> is
                    <span class='char'>U+0058 LATIN CAPITAL LETTER X ("X")</span> or
                    <span class='char'>U+0078 LATIN SMALL LETTER X ("x")</span>, then:
                    <ol>
                      <li>Set <var>i</var> to <var>i</var> + 1.</li>
                      <li>Set <var>base</var> to 16.</li>
                    </ol>
                  </li>
                  <li>Otherwise, set <var>base</var> to 8.</li>
                </ol>
              </li>
              <li>While <var>i</var> &lt; n:
                <ol>
                  <li>Let <var>c</var> be the <var>i</var>th zero-based character of <var>S</var>.</li>
                  <li x:step='b'>
                    Let <var>digit</var> be a value as follows, according to <var>c</var>:
                    <dl class='switch'>
                      <dt>In the range <span class='char'>U+0030 DIGIT ZERO ("0")</span> to <span class='char'>U+0039 DIGIT NINE ("9")</span></dt>
                      <dd>The value is the Unicode codepoint of <var>c</var> minus 48.</dd>
                      <dt>In the range <span class='char'>U+0041 LATIN CAPITAL LETTER A ("A")</span> to <span class='char'>U+0046 LATIN CAPITAL LETTER F ("F")</span></dt>
                      <dd>The value is the Unicode codepoint of <var>c</var> minus 65.</dd>
                      <dt>In the range <span class='char'>U+0061 LATIN SMALL LETTER A ("a")</span> to <span class='char'>U+0066 LATIN SMALL LETTER F ("f")</span></dt>
                      <dd>The value is the Unicode codepoint of <var>c</var> minus 97.</dd>
                    </dl>
                  </li>
                  <li>Set <var>mag</var> to <var>mag</var> * <var>base</var> + <var>digit</var>.</li>
                  <li>Set <var>i</var> to <var>i</var> + 1.</li>
                </ol>
              </li>
              <li>
                The value of the <a class='nt' href='#prod-integer'>integer</a> terminal
                is <var>sign</var> * <var>mag</var>.
              </li>
            </ol>
            <div class='note'>
              <p>
                The algorithm above specifies nothing unexpected.  It interprets
                strings that match the regular expressions <span class='regex'>^-?0[Xx][0-9A-Fa-f]+$</span>,
                <span class='regex'>^-?0[0-7]+$</span> and <span class='regex'>^-?[0-9]+$</span>
                as hexadecimal, octal and decimal integers, respectively.  It
                differs from the Java <code>java.lang.Long.parseLong(String)</code>
                method only in that it can parse integers outside the range
                of a Java <span class='javatype'>long</span>.
              </p>
            </div>
            <p>
              The type of an <a class='nt' href='#prod-integer'>integer</a> terminal is the same
              as the type of the constant it is being used as the value of.  The value of the
              <a class='nt' href='#prod-integer'>integer</a> terminal <span class='rfc2119'>MUST NOT</span>
              lie outside the valid range of values for its type, as given in
              <a href='#idl-types'>section <?sref idl-types?></a> <?sdir idl-types?>.
            </p>
            <p id='float-terminal-value'>
              The value of a <a class='idltype' href='#idl-float'>float</a> terminal is
              either an IEEE 754 single-precision floating point number or an IEEE 754
              double-precision floating point number, depending on the type of the
              constant it is being used as the value for, determined as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>S</var> be the string value of the <a class='nt' href='#prod-float'>float</a> terminal.</li>
              <li>Let <var>n</var> be the length of <var>S</var>.</li>
              <li>Initialize <var>mant</var> to 0.</li>
              <li>Initialize <var>sign</var> to 1.</li>
              <li>Initialize <var>exp1</var> to 0.</li>
              <li>Initialize <var>exp2</var> to 0.</li>
              <li>Initialize <var>expSign</var> to 1.</li>
              <li>Initialize <var>afterDot</var> to <b>false</b>.</li>
              <li>Initialize <var>i</var> to 0.</li>
              <li>
                If the first character of <var>S</var> is <span class='char'>U+002D HYPHEN-MINUS ("-")</span>, then:
                <ol>
                  <li>Set <var>sign</var> to −1.</li>
                  <li>Set <var>i</var> to 1.</li>
                </ol>
              </li>
              <li>
                While <var>i</var> &lt; <var>n</var> and the <var>i</var>th zero-based character of <var>S</var> is neither
                <span class='char'>U+0045 LATIN CAPITAL LETTER E ("E")</span> nor
                <span class='char'>U+0045 LATIN SMALL LETTER E ("e")</span>, then:
                <ol>
                  <li>If the <var>i</var>th zero-based character of <var>S</var> is <span class='char'>U+002E FULL STOP (".")</span>,
                    then set <var>afterDot</var> to <b>true</b>.</li>
                  <li>Otherwise:
                    <ol>
                      <li>
                        Let <var>digit</var> be the Unicode codepoint of the <var>i</var>th
                        zero-based character of <var>S</var> minus 48.
                      </li>
                      <li>Set <var>mant</var> to <var>mant</var> * 10 + <var>digit</var>.</li>
                      <li>If <var>afterDot</var> is <b>true</b>, set <var>exp1</var> to <var>exp1</var> − 1.</li>
                    </ol>
                  </li>
                  <li>Set <var>i</var> to <var>i</var> + 1.</li>
                </ol>
              </li>
              <li>
                If <var>i</var> &lt; <var>n</var>, then:
                <ol>
                  <li>If the <var>i</var>th zero-based character of <var>S</var> is 
                    <span class='char'>U+002D HYPHEN-MINUS ("-")</span>, then:
                    <ol>
                      <li>Set <var>expSign</var> to −1.</li>
                      <li>Set <var>i</var> to <var>i</var> + 1.</li>
                    </ol>
                  </li>
                  <li>If the <var>i</var>th zero-based character of <var>S</var> is
                    <span class='char'>U+002B PLUS SIGN ("+")</span>, then set
                    <var>i</var> to <var>i</var> + 1.</li>
                  <li>While <var>i</var> &lt; <var>n</var>:
                    <ol>
                      <li>
                        Let <var>digit</var> be the Unicode codepoint of the <var>i</var>th
                        zero-based character of <var>S</var> minus 48.
                      </li>
                      <li>Set <var>exp2</var> to <var>exp2</var> * 10 + <var>digit</var>.</li>
                      <li>Set <var>i</var> to <var>i</var> + 1.</li>
                    </ol>
                  </li>
                </ol>
              </li>
              <li>Let <var>result</var> be <var>sign</var> * <var>mant</var> * 10<sup><var>expSign</var> * <var>exp2</var> + <var>exp1</var></sup>.</li>
              <li x:step='f'>
                If the <a class='nt' href='#prod-float'>float</a> terminal is being
                used as the value for a <span class='idltype'>float</span>, then
                the value of the <a class='nt' href='#prod-float'>float</a> terminal
                is the IEEE 754 single-precision floating point number closest to
                <var>result</var>.  Otherwise, the <a class='nt' href='#prod-float'>float</a> terminal is being
                used as the value for a <span class='idltype'>double</span>, and
                the value of the <a class='nt' href='#prod-float'>float</a> terminal
                is the IEEE 754 double-precision floating point number closest to
                <var>result</var>.
                <a href='#ref-IEEE-754'>[IEEE-754]</a>
              </li>
            </ol>
            <p>
              It is not possible to specify an infinite or not-a-number
              <span class='idltype'>float</span> constant.
            </p>
            <p>
              The type of a <a class='nt' href='#prod-float'>float</a> terminal is the same
              as the type of the constant it is being used as the value of.  The value of the
              <a class='nt' href='#prod-float'>float</a> terminal <span class='rfc2119'>MUST NOT</span>
              lie outside the valid range of values for its type, as given in
              <a href='#idl-types'>section <?sref idl-types?></a> <?sdir idl-types?>.
            </p>
            <p>
              The value assigned to a constant <span class='rfc2119'>MUST</span>
              have the same type as the type that the constant is declared to be.
            </p>
            <p>
              No <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              are applicable to constants.
            </p>

            <?productions grammar Const ConstExpr BooleanLiteral?>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                demonstrates how <a class='dfnref' href='#dfn-constant'>constants</a>
                of the above types can be defined.
              </p>
              <x:codeblock language='idl'>interface Util {
  const boolean DEBUG = false;
  const octet LF = 10;
  const unsigned long BIT_MASK = 0x0000fc00;
  const float AVOGADRO = 6.022e23;
};

exception Error {
  const short ERR_UNKNOWN = 0;
  const short ERR_OUT_OF_MEMORY = 1;

  short errorCode;
};</x:codeblock>
            </div>
          </div>

          <div id='idl-attributes' class='section'>
            <h4>Attributes</h4>

            <p>
              An <dfn id='dfn-attribute'>attribute</dfn> is an <a class='dfnref' href='#dfn-interface-member'>interface member</a>
              that matches an <a class='nt' href='#prod-AttributeOrOperation'>AttributeOrOperation</a> non-terminal with
              an <a class='nt' href='#prod-Attribute'>Attribute</a> non-terminal in its derivation, and is used to declare that
              objects implementing the <a class='dfnref' href='#dfn-interface'>interface</a> will have an attribute with the given
              <a class='dfnref' href='#dfn-identifier'>identifier</a> whose value can
              be retrieved and (in some cases) changed.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-identifier'>identifier</a> of an
              <a class='dfnref' href='#dfn-attribute'>attribute</a>
              <span class='rfc2119'>MUST NOT</span> be the same as the identifier
              of another <a class='dfnref' href='#dfn-interface-member'>interface member</a>
              defined on the same <a class='dfnref' href='#dfn-interface'>interface</a>.
            </p>
            <p>
              The type of the attribute is given by the <a class='nt' href='#prod-Type'>Type</a>
              non-terminal.  If the <a class='nt' href='#prod-Type'>Type</a> is a
              <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>, then it <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-resolve'>resolve</a>,
              with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              of the interface on which the attribute
              is defined, to an interface or <a class='dfnref' href='#dfn-typedef'>typedef</a>.
            </p>
            <p>
              The attribute is <dfn id='dfn-read-only'>read only</dfn> if the
              <span class='terminal'>"readonly"</span> terminal is used in the definition.
              An object that implements the interface on which a read only attribute
              is defined will not allow assignment to that attribute.  It is language
              binding specific whether assignment is simply disallowed by the language,
              ignored or an exception is thrown.
            </p>
            <p>
              The <a class='nt' href='#prod-GetRaises'>GetRaises</a> and
              <a class='nt' href='#prod-SetRaises'>SetRaises</a> clauses are used
              to declare the possible exceptions that can be thrown when retrieving
              the value of and assigning a value to the attribute, respectively.
              Each scoped name in the 
              <a class='nt' href='#prod-GetRaises'>GetRaises</a> and
              <a class='nt' href='#prod-SetRaises'>SetRaises</a> clauses
              <span class='rfc2119'>MUST</span> resolve,
              with respect to the enclosing module
              of the interface on which the attribute
              is defined, to an <a class='dfnref' href='#dfn-exception'>exception</a>.
            </p>
            <p>
              When the <span class='terminal'>"stringifier"</span> keyword is used
              in an attribute declaration, it indicates that objects implementing the
              interface will be stringified to the value of the attribute.  See
              <a href='#idl-stringifiers'>section <?sref idl-stringifiers?></a>
              <?sdir idl-stringifiers?> for details.
            </p>
            <p id='callback-attribute-exceptions'>
              If an implementation attempts to get or set the value of an
              <a class='dfnref' href='#dfn-attribute'>attribute</a> on an
              object implemented by user code (for example, when a callback object
              has been supplied to the implementation), and that attempt results in an
              exception being thrown, then, unless otherwise specified, that
              exception will be propagated to the user code that caused the
              implementation to access the attribute.  Similarly, if a value
              returned from getting the attribute cannot be converted to
              an IDL type, then any exception resulting from this will also
              be propagated to the user code that resulted in the implementation
              attempting to get the value of the attribute.
            </p>

            <p>
              The following <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              are applicable to attributes:
              <a class='xattr' href='#PutForwards'>[PutForwards]</a>,
              <a class='xattr' href='#Replaceable'>[Replaceable]</a>,
              <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a>,
              <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>.
            </p>

            <?productions grammar AttributeOrOperation StringifierAttributeOrOperation Attribute ReadOnly GetRaises SetRaises ExceptionList?>

            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                demonstrates how <a class='dfnref' href='#dfn-attribute'>attributes</a>
                can be declared on an <a class='dfnref' href='#dfn-interface'>interface</a>:
              </p>
              <x:codeblock language='idl'>exception InvalidName {
  DOMString reason;
};

exception NoSuchPet { };

interface Person {

  <span class='comment'>// A simple attribute that can be set to any value in the range an unsigned</span>
  <span class='comment'>// short can take.</span>
  attribute unsigned short age;

  <span class='comment'>// An attribute that can raise an exception if it is set to an invalid value.</span>
  attribute DOMString name setraises (InvalidName);

  <span class='comment'>// An attribute whose value cannot be assigned to, and which can raise an</span>
  <span class='comment'>// exception in some circumstances.</span>
  readonly attribute DOMString petName getraises (NoSuchPet);
};</x:codeblock>
            </div>
          </div>

          <div id='idl-operations' class='section'>
            <h4>Operations</h4>

            <p>
              An <dfn id='dfn-operation'>operation</dfn> is an <a class='dfnref' href='#dfn-interface-member'>interface member</a> that matches an
              <a class='nt' href='#prod-AttributeOrOperation'>AttributeOrOperation</a> non-terminal with no
              <a class='nt' href='#prod-Attribute'>Attribute</a> non-terminal in its derivation.  There are three
              kinds of operation:
            </p>
            <ol>
              <li><a class='dfnref' href='#dfn-regular-operation'>regular operations</a>, which
              are those used to declare that objects implementing the
              <a class='dfnref' href='#dfn-interface'>interface</a> will have a method with 
              the given <a class='dfnref' href='#dfn-identifier'>identifier</a>,</li>
              <li><a class='dfnref' href='#dfn-special-operation'>special operations</a>,
              which are used to declare special behavior on objects
              implementing the interface, such as object indexing and stringification, and</li>
              <li><a class='dfnref' href='#dfn-static-operation'>static operations</a>,
              which are used to declare operations that are not associated with
              a particular object implementing the interface.</li>
            </ol>
            <p>
              If an operation has an identifier but no <span class='terminal'>static</span>
              keyword, then it declares a <dfn id='dfn-regular-operation'>regular operation</dfn>.
              If the operation has one or more
              <a class='dfnref' href='#dfn-special-keyword'>special keywords</a>
              used in its declaration (that is, any keyword matching
              <a class='nt' href='#prod-Special'>Special</a>, or
              the <span class='terminal'>"stringifier"</span> keyword),
              then it declares a special operation.  A single operation can declare
              both a regular operation and a special operation; see
              <a href='#idl-special-operations'>section <?sref idl-special-operations?></a> <?sdir idl-special-operations?>
              for details on special operations.
            </p>
            <p>
              If an operation has no identifier,
              then it <span class='rfc2119'>MUST</span>
              be declared to be a special operation using one of the
              special keywords.
            </p>
            <p>
              The identifier of a
              <a class='dfnref' href='#dfn-regular-operation'>regular operation</a>
              or <a class='dfnref' href='#dfn-static-operation'>static operation</a>
              <span class='rfc2119'>MUST NOT</span> be the same as the identifier
              of a <a class='dfnref' href='#dfn-constant'>constant</a> or
              <a class='dfnref' href='#dfn-attribute'>attribute</a>
              defined on the same <a class='dfnref' href='#dfn-interface'>interface</a>.
            </p>
            <div class='note'>
              <p>
                The identifier can be the same as that of another operation on the
                interface, however.  This is how operation overloading is specified.
              </p>
            </div>
            <div class='ednote'>
              <p>Travis requests no operation overloading. <a href='http://www.w3.org/mid/49142F02149340458FDD20841AD0AD564B38DE1A@TK5EX14MBXW652.wingroup.windeploy.ntdev.microsoft.com'>(Mail).</a></p>
            </div>
            <p>
              The <dfn id='dfn-return-type'>return type</dfn> of the operation is given
              by the <a class='nt' href='#prod-ReturnType'>ReturnType</a> non-terminal.
              A return type of <span id='idl-void' class='terminal'>"void"</span> indicates that the operation returns no value.
              If the <a class='nt' href='#prod-Type'>Type</a> is a
              <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>, then it <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-resolve'>resolve</a>,
              with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              of the interface on which the operation
              is defined, to an interface or <a class='dfnref' href='#dfn-typedef'>typedef</a>.
            </p>
            <p>
              The <a class='nt' href='#prod-ArgumentList'>ArgumentList</a> non-terminal gives
              the list of arguments for the operation.  The identifier
              of an argument is given by the <a class='nt' href='#prod-identifier'>identifier</a>
              terminal in the <a class='nt' href='#prod-Argument'>Argument</a>, and the type
              of the argument is given by the <a class='nt' href='#prod-Type'>Type</a>.
              If the <a class='nt' href='#prod-Type'>Type</a> is a
              scoped name, then it <span class='rfc2119'>MUST</span> resolve,
              with respect to the enclosing module
              of the <a class='dfnref' href='#dfn-interface'>interface</a> on which the operation
              is defined, to an interface or <a class='dfnref' href='#dfn-typedef'>typedef</a>.
            </p>
            <p>
              Each argument can be preceded by a list of
              <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a> (matching
              <a class='nt' href='#prod-ExtendedAttributeList'>ExtendedAttributeList</a>),
              which can control how a value passed as the argument will be handled in
              language bindings.
            </p>
            <p>
              The <span class='terminal'>"in"</span> keyword used in the declaration
              of each argument is optional.  No other types of arguments (such as <em>out</em>
              or <em>in-out</em> arguments) can be specified with Web IDL.
            </p>

            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                demonstrates how <a class='dfnref' href='#dfn-regular-operation'>regular operations</a>
                can be declared on an <a class='dfnref' href='#dfn-interface'>interface</a>:
              </p>
              <x:codeblock language='idl'>interface Dimensions {
  attribute unsigned long width;
  attribute unsigned long height;
};

exception NoPointerDevice { };

interface Button {

  <span class='comment'>// An operation that takes no arguments, returns a boolean, and could possibly</span>
  <span class='comment'>// raise an exception.</span>
  boolean isMouseOver() raises (NoPointerDevice);

  <span class='comment'>// Overloaded operations.</span>
  void setDimensions(in Dimensions size);
  void setDimensions(in unsigned long width, in unsigned long height);
};</x:codeblock>
            </div>

            <p>
              An operation is considered to be a <dfn id='dfn-variadic-operation'>variadic operation</dfn>
              if the final argument uses the <span class="terminal">"..."</span> terminal just
              after the argument type.  Declaring an operation to be variadic indicates that
              the operation can be invoked with any number of arguments after that final argument.
              Those extra implied formal arguments are of the same type as the final explicit
              argument in the operation declaration.  The final argument can also be omitted
              when invoking the operation.  An argument <span class='rfc2119'>MUST NOT</span>
              be declared with the <span class="terminal">"..."</span> terminal unless it
              is the final argument in the operation’s argument list.
            </p>

            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface that has
                two variadic operations:
              </p>
              <x:codeblock language='idl'>interface IntegerSet {
  readonly attribute unsigned long cardinality;

  void union(in long... ints);
  void intersection(in long... ints);
};</x:codeblock>
              <p>
                In the ECMAScript binding, variadic operations are implemented by
                functions that can accept the subsequent arguments:
              </p>
              <x:codeblock language='es'>var s = getIntegerSet();  <span class='comment'>// Obtain an instance of IntegerSet.</span>

s.union();                <span class='comment'>// Passing no arguments corresponding to 'ints'.</span>
s.union(1, 4, 7);         <span class='comment'>// Passing three arguments corresponding to 'ints'.</span></x:codeblock>
              <p>
                A binding for a language that does not support variadic functions
                might specify that an explicit array or list of integers be passed
                to such an operation.
              </p>
            </div>

            <p>
              An argument is considered to be an <dfn id='dfn-optional-argument'>optional argument</dfn>
              if it is declared with the <span class='terminal'>"optional"</span> keyword.
              The final argument of a <a class='dfnref' href='#dfn-variadic-operation'>variadic operation</a>
              is also considered to be an optional argument. Declaring an argument
              to be optional indicates that an the argument value can be omitted
              when the operation is invoked. An argument <span class='rfc2119'>MUST NOT</span>
              be declared to be optional unless any subsequent arguments to the
              operation are also optional.
            </p>

            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines an <a class='dfnref' href='#dfn-interface'>interface</a>
                with a single <a class='dfnref' href='#dfn-operation'>operation</a>
                that can be invoked with two different argument list lengths:
              </p>
              <x:codeblock language='idl'>interface ColorCreator {
  object createColor(in float v1, in float v2, in float v3, in optional float alpha);
};</x:codeblock>
              <p>
                It is equivalent to an <a class='dfnref' href='#dfn-interface'>interface</a>
                that has two <a class='dfnref' href='#dfn-overloaded'>overloaded</a>
                <a class='dfnref' href='#dfn-operation'>operations</a>:
              </p>
              <x:codeblock language='idl'>interface ColorCreator {

  object createColor(in float v1, in float v2, in float v3);
  object createColor(in float v1, in float v2, in float v3, in float alpha);
};</x:codeblock>
            </div>
            <p>
              The <a class='nt' href='#prod-Raises'>Raises</a> clause is used
              to declare the possible <a class='dfnref' href='#dfn-exception'>exceptions</a>
              that can be thrown when invoking the operation.
              Each scoped name in the 
              <a class='nt' href='#prod-Raises'>Raises</a> clause
              <span class='rfc2119'>MUST</span> resolve,
              with respect to the enclosing module
              of the interface on which the operation
              is defined, to an exception.
            </p>

            <p id='callback-operation-exceptions'>
              If an implementation attempts to invoke an
              <a class='dfnref' href='#dfn-operation'>operation</a> on an
              object implemented by user code (for example, when a callback object
              has been supplied to the implementation), and that attempt results in an
              exception being thrown, then, unless otherwise specified, that
              exception will be propagated to the user code that caused the
              implementation to access the attribute.  Similarly, if a value
              returned from invoking the operation cannot be converted to
              an IDL type, then any exception resulting from this will also
              be propagated to the user code that resulted in the implementation
              attempting to invoke the operation.
            </p>

            <p>
              The following extended attributes
              are applicable to operations:
              <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a>,
              <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>.
            </p>
            <p>
              The following extended attributes are applicable to operation arguments:
              <a class='xattr' href='#AllowAny'>[AllowAny]</a>,
              <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a>,
              <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>.
            </p>

            <?productions grammar Operation OperationRest OmittableSpecials Specials Special ReturnType OptionalIdentifier ArgumentList Arguments Argument In Optional Ellipsis Raises?>
          </div>

          <div id='idl-special-operations' class='section'>
            <h4>Special operations</h4>

            <p>
              A <dfn id='dfn-special-operation'>special operation</dfn> is a
              declaration of a certain kind of special behavior on objects implementing
              the interface on which the special operation declarations appear.
              Special operations are declared by using one or more
              <dfn id='dfn-special-keyword'>special keywords</dfn>
              keywords in an operation declaration.
            </p>
            <p>
              There are six kinds of special operations.  The table below indicates
              for a given kind of special operation what special keyword
              is used to declare it and what the purpose of the special operation is:
            </p>
            <table class='vert'>
              <tr>
                <th>Special operation</th>
                <th>Keyword</th>
                <th>Purpose</th>
              </tr>
              <tr>
                <td><dfn id='dfn-getter'>Getters</dfn></td>
                <td><span class='terminal'>"getter"</span></td>
                <td>Defines behavior for when an object is indexed for property retrieval.</td>
              </tr>
              <tr>
                <td><dfn id='dfn-setter'>Setters</dfn></td>
                <td><span class='terminal'>"setter"</span></td>
                <td>Defines behavior for when an object is indexed for property assignment.</td>
              </tr>
              <tr>
                <td><dfn id='dfn-creator'>Creators</dfn></td>
                <td><span class='terminal'>"creator"</span></td>
                <td>Defines behavior for when an object is indexed for property creation.</td>
              </tr>
              <tr>
                <td><dfn id='dfn-deleter'>Deleters</dfn></td>
                <td><span class='terminal'>"deleter"</span></td>
                <td>Defines behavior for when an object is indexed for property deletion.</td>
              </tr>
              <tr>
                <td><dfn id='dfn-caller'>Callers</dfn></td>
                <td><span class='terminal'>"caller"</span></td>
                <td>Defines behavior for when an object is called as if it were a function.</td>
              </tr>
              <tr>
                <td><dfn id='dfn-stringifier'>Stringifiers</dfn></td>
                <td><span class='terminal'>"stringifier"</span></td>
                <td>Defines how an object is converted into a <span class='idltype'>DOMString</span>.</td>
              </tr>
            </table>
            <p>
              Not all language bindings support all of the six kinds of special
              object behavior.  When special operations are declared using
              operations with no identifier, then in language bindings that do
              not support the particular kind of special operations there simply
              will not be such functionality.
            </p>
            <div class='example'>
              <p>The following IDL fragment defines an interface with a getter and a setter:</p>
              <x:codeblock language='idl'>interface Dictionary {
  readonly attribute unsigned long propertyCount;

  getter float (in DOMString propertyName);
  setter void (in DOMString propertyName, in float propertyValue);
};</x:codeblock>
              <p>In language bindings that do not support property getters and setters,
                objects implementing <span class='idltype'>Dictionary</span> will not
                have that special behavior.  For example, in the Java language binding,
                the corresponding Java interface will have only a single method,
                <code>long getPropertyCount()</code>.</p>
            </div>
            <p>
              <a class='dfnref' href='#dfn-special-operation'>Special operations</a>
              can be declared using an <a class='dfnref' href='#dfn-operation'>operation</a>
              that has an <a class='dfnref' href='#dfn-identifier'>identifier</a>
              and the <span class='terminal'>"omittable"</span> keyword to indicate that
              in language bindings that do not support that kind of special operation,
              the <a class='dfnref' href='#dfn-regular-operation'>regular operation</a>
              is to be available on the object for use instead.  Such operations are
              known as <dfn id='dfn-omittable'>omittable</dfn>.
            </p>
            <div class='example'>
              <p>The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                declares <a class='dfnref' href='#dfn-special-operation'>special operations</a>
                with <a class='dfnref' href='#dfn-identifier'>identifiers</a>
                and using the <span class='terminal'>"omittable"</span> keyword:</p>
              <x:codeblock language='idl'>interface Dictionary {
  readonly attribute unsigned long propertyCount;

  omittable getter float getProperty(in DOMString propertyName);
  omittable setter void setProperty(in DOMString propertyName, in float propertyValue);
};</x:codeblock>
              <p>In language bindings that do not support property getters and setters,
                such as Java,
                objects implementing <span class='idltype'>Dictionary</span> will have
                <span class='idlident'>getProperty</span> and <span class='idlident'>setProperty</span>
                operations available.  The corresponding Java interface would be:</p>
              <x:codeblock language='java'>public interface Dictionary {

  long getPropertyCount();
  float getProperty(String propertyName);
  void setProperty(String propertyName, float propertyValue);
}</x:codeblock>
              <p>
                These operations will be omitted in language
                bindings that do support property getters and setters, such as
                ECMAScript, however.
              </p>
              <x:codeblock language='es'>var dictionary = getDictionary();  <span class='comment'>// Get an instance of Dictionary.</span>

dictionary.getProperty;            <span class='comment'>// Actually invokes the property getter with property name "getProperty".</span>
dictionary.x = 1;                  <span class='comment'>// Invokes the property setter with property name "x" and value 1.</span></x:codeblock>
            </div>
            <p>
              Defining a special operation without using the <span class='terminal'>"omittable"</span> keyword
              on an operation but giving the operation an <a class='dfnref' href='#dfn-identifier'>identifier</a>
              is equivalent to separating the special operation out into a separate
              declaration without an identifier.  This approach is admitted to
              simplify prose descriptions of an interface’s operations.
            </p>
            <div class='example'>
              <p>The following two interfaces are equivalent:</p>
              <x:codeblock language='idl'>interface Dictionary {
  readonly attribute unsigned long propertyCount;

  getter float getProperty(in DOMString propertyName);
  setter void setProperty(in DOMString propertyName, in float propertyValue);
};</x:codeblock>
              <x:codeblock language='idl'>interface Dictionary {
  readonly attribute unsigned long propertyCount;

  float getProperty(in DOMString propertyName);
  void setProperty(in DOMString propertyName, in float propertyValue);

  getter float (in DOMString propertyName);
  setter void (in DOMString propertyName, in float propertyValue);
};</x:codeblock>
            </div>
            <p>
              The <span class='terminal'>"omittable"</span> keyword <span class='rfc2119'>MUST NOT</span>
              appear on an operation that has no identifier.
            </p>
            <p>
              A given <a class='dfnref' href='#dfn-special-keyword'>special keyword</a> <span class='rfc2119'>MUST NOT</span>
              appear twice on an operation.
            </p>
            <div class='ednote'>
              <p>There’s a resolution to remove unnamed getters/setters. <a href='http://www.w3.org/2009/11/02-webapps-minutes.html#item06'>(Minutes.)</a></p>
            </div>
            <p>
              Getters, setters, creators and deleters come in two varieties: ones that
              take a <span class='idltype'>DOMString</span> as a property name,
              known as
              <dfn id='dfn-name-getter'>name getters</dfn>,
              <dfn id='dfn-name-setter'>name setters</dfn>,
              <dfn id='dfn-name-creator'>name creators</dfn> and
              <dfn id='dfn-name-deleter'>name deleters</dfn>,
              and ones that take an <span class='idltype'>unsigned long</span>
              as a property index, known as
              <dfn id='dfn-index-getter'>index getters</dfn>,
              <dfn id='dfn-index-setter'>index setters</dfn>,
              <dfn id='dfn-index-creator'>index creators</dfn> and
              <dfn id='dfn-index-deleter'>index deleters</dfn>.
              See <a href='#idl-indexed-properties'>section <?sref idl-indexed-properties?></a>
              and <a href='#idl-named-properties'>section <?sref idl-named-properties?></a>
              for details.
            </p>
            <p>
              On a given <a class='dfnref' href='#dfn-interface'>interface</a>,
              there <span class='rfc2119'>MUST</span> exist at most one
              stringifier and at most one of each variety of getter, setter,
              creator and deleter.  Multiple callers can exist on an interface
              to specify overloaded calling behavior.
            </p>
            <p>
              Special operations declared using operations <span class='rfc2119'>MUST NOT</span>
              be <a class='dfnref' href='#dfn-variadic-operation'>variadic</a> nor have any
              <a class='dfnref' href='#dfn-optional-argument'>optional arguments</a>.
            </p>
            <p>
              If an object implements more than one <a class='dfnref' href='#dfn-interface'>interface</a>
              that defines a given special operation, then it is undefined which (if any)
              special operation is invoked.
            </p>

            <div id='idl-callers' class='section'>
              <h5>Callers</h5>

              <p>
                When an <a class='dfnref' href='#dfn-interface'>interface</a> has one or more
                <a class='dfnref' href='#dfn-caller'>callers</a>, it indicates that objects that implement
                the interface can be called as if they were functions.  As mentioned above,
                callers can be specified using an <a class='dfnref' href='#dfn-operation'>operation</a>
                declared with the <span class='terminal'>"caller"</span> keyword.
              </p>
              <p>
                If multiple callers are specified on an interface, overload resolution
                is used to determine which caller is invoked when the object is called
                as if it were a function.
              </p>

              <div class='example'>
                <p>
                  The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                  defines an <a class='dfnref' href='#dfn-interface'>interface</a>
                  with a <a class='dfnref' href='#dfn-caller'>caller</a>.
                </p>
                <x:codeblock language='idl'>interface NumberQuadrupler {
  <span class='comment'>// This operation simply returns four times the given number x.</span>
  caller float compute(in float x);
};</x:codeblock>
                <p>
                  An ECMAScript implementation supporting this interface would
                  allow a host object that implements <span class='idltype'>NumberQuadrupler</span>
                  to be called as a function:
                </p>
                <x:codeblock language='es'>var f = getNumberQuadrupler();  <span class='comment'>// Obtain an instance of NumberQuadrupler.</span>

f.compute(3);                   <span class='comment'>// This evaluates to 12.</span>
f(3);                           <span class='comment'>// This also evaluates to 12.</span></x:codeblock>
              </div>
            </div>

            <div id='idl-stringifiers' class='section'>
              <h5>Stringifiers</h5>

              <p>
                When an <a class='dfnref' href='#dfn-interface'>interface</a> has a
                <a class='dfnref' href='#dfn-stringifier'>stringifier</a>, it indicates that objects that implement
                the interface have a non-default conversion to a string.  As mentioned above,
                stringifiers can be specified using an <a class='dfnref' href='#dfn-operation'>operation</a>
                declared with the <span class='terminal'>"stringifier"</span> keyword.
              </p>
              <p>
                If an operation used to declare a stringifier does not have an 
                <a class='dfnref' href='#dfn-identifier'>identifier</a>, then prose
                accompanying the interface <span class='rfc2119'>MUST</span> define
                the <dfn id='dfn-stringification-behavior'>stringification behavior</dfn>
                of the interface.  If the operation does have an identifier,
                then the object is converted to a string by invoking the
                operation to obtain the string.
              </p>
              <p>
                Stringifiers declared with operations <span class='rfc2119'>MUST</span>
                be declared to take zero arguments and return a <span class='idltype'>DOMString</span>.
              </p>
              <p>
                As a shorthand, if the <span class='terminal'>"stringifier"</span> keyword
                is declared using an operation with no identifier, then the
                operation’s <a class='dfnref' href='#dfn-return-type'>return type</a> and 
                argument list can be omitted.
              </p>
              <div class='example'>
                <p>The following two interfaces are equivalent:</p>
                <x:codeblock language='idl'>interface A {
  stringifier DOMString ();
};</x:codeblock>
                <x:codeblock language='idl'>interface A {
  stringifier;
};</x:codeblock>
              </div>
              <p>
                The <span class='terminal'>"stringifier"</span> keyword
                can also be placed on an <a class='dfnref' href='#dfn-attribute'>attribute</a>.
                In this case, the string to convert the object to is the
                value of the attribute.  The <span class='terminal'>"stringifier"</span> keyword
                <span class='rfc2119'>MUST NOT</span> be placed on an attribute unless
                it is declared to be of type <span class='idltype'>DOMString</span>.
              </p>

              <div class='example'>
                <p>
                  The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                  defines an interface that will stringify to the value of its
                  <a class='idlattr'>name</a> attribute:
                </p>
                <x:codeblock language='idl'>[Constructor]
interface Student {
  attribute unsigned long id;
  stringifier attribute DOMString name;
};</x:codeblock>
                <p>
                  In the ECMAScript binding, using a <span class='idltype'>Student</span>
                  object in a context where a string is expected will result in the
                  value of the object’s <span class='prop'>name</span> property being
                  used:
                </p>
                <x:codeblock language='es'>var s = new Student();
s.id = 12345678;
s.name = '周杰倫';

var greeting = 'Hello, ' + s + '!';  <span class='comment'>// Now greeting == 'Hello, 周杰倫!'.</span></x:codeblock>
                <p>
                  The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                  defines an interface that has custom stringification behavior that is
                  not specified in the IDL itself.
                </p>
                <x:codeblock language='idl'>[Constructor]
interface Student {
  attribute unsigned long id;
  attribute DOMString? familyName;
  attribute DOMString givenName;

  stringifier DOMString ();
};</x:codeblock>
                <p>
                  Thus, prose is required to explain the stringification behavior, such
                  as the following paragraph:
                </p>
                <blockquote>
                  <p>
                    Objects that implement the <span class='idltype'>Student</span>
                    interface must stringify as follows.  If the value of the
                    <span class='idlattr'>familyName</span> attribute is
                    <span class='idlvalue'>null</span>, the stringification of the
                    object is the value of the <span class='idlattr'>givenName</span>
                    attribute.  Otherwise, if the value of the
                    <span class='idlattr'>familyName</span> attribute is not <span class='idlvalue'>null</span>,
                    the stringification of the object is the concatenation of the
                    the value of the <span class='idlattr'>givenName</span> attribute,
                    the string <span class='idlvalue'>" "</span> and the value of
                    the <span class='idlattr'>familyName</span> attribute.
                  </p>
                </blockquote>
                <p>
                  An ECMAScript implementation of the IDL would behave as follows:
                </p>
                <x:codeblock language='es'>var s = new Student();
s.id = 12345679;
s.familyName = 'Smithee';
s.givenName = 'Alan';

var greeting = 'Hi ' + s;  <span class='comment'>// Now greeting == 'Hi Alan Smithee'.</span></x:codeblock>
              </div>
            </div>

            <div id='idl-indexed-properties' class='section'>
              <h5>Indexed properties</h5>

              <p>
                An <a class='dfnref' href='#dfn-interface'>interface</a> that defines
                an <a class='dfnref' href='#dfn-index-getter'>index getter</a>,
                <a class='dfnref' href='#dfn-index-setter'>index setter</a>,
                <a class='dfnref' href='#dfn-index-creator'>index creator</a>
                and/or an <a class='dfnref' href='#dfn-index-deleter'>index deleter</a>
                is said to <dfn id='dfn-support-indexed-properties'>support indexed properties</dfn>.
              </p>
              <p>
                If an interface <a class='dfnref' href='#dfn-support-indexed-properties'>supports indexed properties</a>,
                then the interface definition <span class='rfc2119'>MUST</span> be accompanied by
                a description of what indices the object can be indexed with at
                any given time. These indices are called the <dfn id='dfn-supported-property-indices'>supported property indices</dfn>.
              </p>
              <p>
                Index getters and deleters <span class='rfc2119'>MUST</span>
                be declared to take a single <span class='idltype'>unsigned long</span> argument.
                Index setters and creators <span class='rfc2119'>MUST</span>
                be declared to take two arguments, where the first is an <span class='idltype'>unsigned long</span>.
              </p>
              <p>
                The following requirements apply to the definitions of index getters, setters, creators and deleters:
              </p>
              <ul>
                <li>
                  If an <a class='dfnref' href='#dfn-index-getter'>index getter</a> was specified using an <a class='dfnref' href='#dfn-operation'>operation</a>
                  with an <a class='dfnref' href='#dfn-identifier'>identifier</a>,
                  then the value returned when indexing the object with a given index
                  will be the value that is returned by invoking the operation, passing
                  the index as its only argument.  If the operation used to declare the index getter
                  did not have an identifier, then the interface definition must be accompanied
                  by a description of how to <dfn id='dfn-determine-the-value-of-an-indexed-property'>determine the value of an indexed property</dfn>
                  for a given index.
                </li>
                <li>
                  If an <a class='dfnref' href='#dfn-index-setter'>index setter</a> was specified using an operation
                  with an identifier,
                  then the behavior that occurs when indexing the object for property assignment with a given property index and value
                  will be that the operation is invoked, passing
                  the index as the first argument and the value as the second argument.  If the operation used to declare the index setter
                  did not have an identifier, then the interface definition must be accompanied
                  by a description of how to <dfn id='dfn-set-the-value-of-an-existing-indexed-property'>set the value of an existing indexed property</dfn>
                  for a given property index and value.
                </li>
                <li>
                  If an <a class='dfnref' href='#dfn-index-creator'>index creator</a> was specified using an operation
                  with an identifier,
                  then the behavior that occurs when indexing the object for property creation with a given property index and value
                  will be that the operation is invoked, passing
                  the index as the first argument and the value as the second argument.  If the operation used to declare the index creator
                  did not have an identifier, then the interface definition must be accompanied
                  by a description of how to <dfn id='dfn-set-the-value-of-a-new-indexed-property'>set the value of a new indexed property</dfn>
                  for a given property index and value.
                </li>
                <li>
                  If an <a class='dfnref' href='#dfn-index-deleter'>index deleter</a> was specified using an operation
                  with an identifier,
                  then the behavior that occurs when indexing the object for property deletion with a given property index
                  will be that the operation is invoked, passing
                  the index as the only argument.  If the operation used to declare the index deleter
                  did not have an identifier, then the interface definition must be accompanied
                  by a description of how to <dfn id='dfn-delete-an-existing-indexed-property'>delete an existing indexed property</dfn>
                  for a given property index.
                </li>
              </ul>

              <div class='example'>
                <p>
                  The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface
                  <span class='idltype'>OrderedMap</span> which allows
                  retrieving and setting values by name or by index number:
                </p>
                <x:codeblock language='idl'>interface OrderedMap {
  readonly attribute unsigned long size;

  getter any getByIndex(in unsigned long index);
  setter void setByIndex(in unsigned long index, in any value);
  deleter void removeByIndex(in unsigned long index);

  getter any get(in DOMString name);
  setter creator void set(in DOMString name, in any value);
  deleter void remove(in DOMString name);
};</x:codeblock>
                <p>
                  Since all of the special operations are declared using
                  operations with identifiers, the only additional prose
                  that is necessary is that which describes what keys those sets
                  have.  Assuming that the <code>get()</code> operation is
                  defined to return <span class='idlvalue'>null</span> if an
                  attempt is made to look up a non-existing entry in the
                  <span class='idlvalue'>OrderedMap</span>, then the following
                  two sentences would suffice:
                </p>
                <blockquote>
                  <p>
                    Objects implementing <span class='idlvalue'>OrderedMap</span>
                    support index properties with indices in the range
                    0 ≤ <var>index</var> &lt; <code>OrderedMap::length</code>.
                  </p>
                  <p>
                    Such objects also support a named property for every name that,
                    if passed to <code>get()</code>, would return a non-null value.
                  </p>
                </blockquote>
                <p>
                  As described in section <a href='#host-objects'>section <?sref host-objects?></a>,
                  an ECMAScript implementation would create
                  properties on a host object implementing
                  <span class='idltype'>OrderedMap</span> that correspond to
                  entries in both the named and indexed property sets.
                  These properties can then be used to interact
                  with the object in the same way as invoking the object’s
                  methods, as demonstrated below:
                </p>
                <x:codeblock language='es'><span class='comment'>// Assume map is a host object implementing the OrderedMap interface.</span>
var map = getOrderedMap();
var x, y;

x = map[0];       <span class='comment'>// If map.length > 0, then this is equivalent to:
                  //
                  //   x = map.getByIndex(0)
                  //
                  // since a property named "0" will have been placed on map.
                  // Otherwise, x will be set to undefined, since there will be
                  // no property named "0" on map.</span>

map[1] = false;   <span class='comment'>// If map.length > 1, then this will set the property named
                  // "1" on map to false, and then will do the equivalent of:
                  //
                  //   map.setByIndex(1, false)
                  //
                  // Otherwise, if map.length ≤ 1, then it will set the
                  // property but have no other effect (since an index creator
                  // was not specified).</span>

y = map.apple;    <span class='comment'>// If there exists a named property named "apple", then this
                  // will be equivalent to:
                  //
                  //   y = map.get('apple')
                  //
                  // since a property named "apple" will have been placed on
                  // map.  Otherwise, y will be set to undefined, since there
                  // will be no property named "apple" on map.</span>

map.berry = 123;  <span class='comment'>// Regardless of whether there exists a named property named
                  // "berry", this will set the "berry" property to 123, and
                  // then do the equivalent of:
                  //
                  //   map.set('berry', 123)</span>

delete map.cake;  <span class='comment'>// If a named property named "cake" exists, then the "cake"
                  // property will be deleted, and then the equivalent to the
                  // following will be performed:
                  //
                  //   map.remove("cake")</span>
</x:codeblock></div>
            </div>

            <div id='idl-named-properties' class='section'>
              <h5>Named properties</h5>

              <p>
                An <a class='dfnref' href='#dfn-interface'>interface</a> that defines
                a <a class='dfnref' href='#dfn-name-getter'>name getter</a>,
                <a class='dfnref' href='#dfn-name-setter'>name setter</a>,
                <a class='dfnref' href='#dfn-name-creator'>name creator</a>
                and/or a <a class='dfnref' href='#dfn-name-deleter'>name deleter</a>
                is said to <dfn id='dfn-support-named-properties'>support named properties</dfn>.
              </p>
              <p>
                If an interface <a class='dfnref' href='#dfn-support-named-properties'>supports named properties</a>,
                then the interface definition <span class='rfc2119'>MUST</span> be accompanied by
                a description of what names the object can be indexed with at
                any given time. These names are called the <dfn id='dfn-supported-property-names'>supported property names</dfn>.
              </p>
              <p>
                Name getters and deleters <span class='rfc2119'>MUST</span>
                be declared to take a single <span class='idltype'>DOMString</span> argument.
                Index setters and creators <span class='rfc2119'>MUST</span>
                be declared to take two arguments, where the first is an <span class='idltype'>DOMString</span>.
              </p>
              <p>
                The following requirements apply to the definitions of name getters, setters, creators and deleters:
              </p>
              <ul>
                <li>
                  If a <a class='dfnref' href='#dfn-name-getter'>name getter</a> was specified using an <a class='dfnref' href='#dfn-operation'>operation</a>
                  with an <a class='dfnref' href='#dfn-identifier'>identifier</a>,
                  then the value returned when indexing the object with a given name
                  will be the value that is returned by invoking the operation, passing
                  the name as its only argument.  If the operation used to declare the name getter
                  did not have an identifier, then the interface definition must be accompanied
                  by a description of how to <dfn id='dfn-determine-the-value-of-a-named-property'>determine the value of a named property</dfn>
                  for a given property name.
                </li>
                <li>
                  If a <a class='dfnref' href='#dfn-name-setter'>name setter</a> was specified using an operation
                  with an identifier,
                  then the behavior that occurs when indexing the object for property assignment with a given property name and value
                  will be that the operation is invoked, passing
                  the name as the first argument and the value as the second argument.  If the operation used to declare the name setter
                  did not have an identifier, then the interface definition must be accompanied
                  by a description of how to <dfn id='dfn-set-the-value-of-an-existing-named-property'>set the value of an existing named property</dfn>
                  for a given property name and value.
                </li>
                <li>
                  If a <a class='dfnref' href='#dfn-name-creator'>name creator</a> was specified using an operation
                  with an identifier,
                  then the behavior that occurs when indexing the object for property creation with a given property name and value
                  will be that the operation is invoked, passing
                  the name as the first argument and the value as the second argument.  If the operation used to declare the name creator
                  did not have an identifier, then the interface definition must be accompanied
                  by a description of how to <dfn id='dfn-set-the-value-of-a-new-named-property'>set the value of a new named property</dfn>
                  for a given property name and value.
                </li>
                <li>
                  If a <a class='dfnref' href='#dfn-name-deleter'>name deleter</a> was specified using an operation
                  with an identifier,
                  then the behavior that occurs when indexing the object for property deletion with a given property name
                  will be that the operation is invoked, passing
                  the name as the only argument.  If the operation used to declare the name deleter
                  did not have an identifier, then the interface definition must be accompanied
                  by a description of how to <dfn id='dfn-delete-an-existing-named-property'>delete an existing named property</dfn>
                  for a given property name.
                </li>
              </ul>
            </div>
          </div>

          <div id='idl-static-operations' class='section'>
            <h4>Static operations</h4>

            <p>
              A <dfn id='dfn-static-operation'>static operation</dfn> is one that is
              not called on a particular instance of the <a class='dfnref' href='#dfn-interface'>interface</a>
              on which it is declared, and is instead associated with the interface
              itself.  Static operations are declared by using the
              <span class='terminal'>"static"</span> keyword in an operation
              declaration.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface
                <span class='idltype'>Circle</span> that has a static
                operation declared on it:
              </p>
              <x:codeblock language='idl'>interface Point { /* ... */ };

interface Circle {
  attribute float cx;
  attribute float cy;
  attribute float radius;

  static Point triangulate(in Circle c1, in Circle c2, in Circle c3);
};</x:codeblock>
              <p>
                In the ECMAScript language binding, the <span class='estype'>Function</span> object for
                <code>triangulate</code> will exist on the <a class='dfnref' href='#dfn-interface-object'>interface object</a>
                for <span class='idltype'>Circle</span>:
              </p>
              <x:codeblock language='es'>var circles = getCircles();    <span class='comment'>// an Array of Circle objects</span>

typeof Circle.triangulate;     <span class='comment'>// Evaluates to "function"</span>
Circle.prototype.triangulate;  <span class='comment'>// Evaluates to undefined</span>
circles[0].triangulate;        <span class='comment'>// Also evaluates to undefined</span>

<span class='comment'>// Call the static operation</span>
var triangulationPoint = Circle.triangulate(circles[0], circles[1], circles[2]);</x:codeblock>
              <p>
                In the Java language binding, however, the <code>triangulate</code> method
                will exist on an abstract class:
              </p>
              <x:codeblock language='java'>Circle[] circles = getCircles();  <span class='comment'>// an array of Circle objects</span>

<span class='comment'>// Call the static operation</span>
Point triangulationPoint = CircleUtils.triangulate(circles[0], circles[1], circles[2]);</x:codeblock>
            </div>
          </div>

          <div id='idl-overloading' class='section'>
            <h4>Overloading</h4>

            <p>
              If a <a class='dfnref' href='#dfn-regular-operation'>regular operation</a>
              or <a class='dfnref' href='#dfn-static-operation'>static operation</a>
              defined on an <a class='dfnref' href='#dfn-interface'>interface</a>
              has an <a class='dfnref' href='#dfn-identifier'>identifier</a>
              that is the same as the identifier of another operation on that
              interface of the same kind (regular or static), then the operation is said to be
              <dfn id='dfn-overloaded'>overloaded</dfn>.  When the identifier
              of an overloaded operation is used to invoke one of the
              operations on an object that implements the interface, the
              number and types of the arguments passed to the operation
              determine which of the overloaded operations is actually
              invoked.  If an interface has multiple
              <a class='dfnref' href='#dfn-caller'>callers</a> defined on it,
              then those callers are also said to be overloaded.
              In the ECMAScript language binding, <a href='#Constructor'>constructors</a>
              can be overloaded too.  There are some restrictions on the arguments
              that overloaded operations, callers and constructors can be
              specified to take, and in order to describe these restrictions,
              the notion of an <em>effective overload set</em> is used.
            </p>
            <p>
              An <dfn id='dfn-effective-overload-set'>effective overload set</dfn>
              for a given 
              <a class='dfnref' href='#dfn-identifier'>identifier</a>,
              argument count,
              <a class='dfnref' href='#dfn-interface'>interface</a> and
              target language binding represents
              the allowable invocations in that language binding
              of operations or constructors
              (specified with <a class='xattr' href='#Constructor'>[Constructor]</a>
              and <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>)
              that have the specified identifier on that interface.  The
              set is used to determine whether there are ambiguities in the 
              overloaded operations or constructors specified on the interface.
              The effective overload set is stated to be
              “for regular operations”, “for static operations”, “for constructors” or “for callers”,
              to distinguish between these four uses.  Effective overload sets for
              callers do not use an identifier; only an argument count,
              interface and target language binding are needed.
            </p>
            <p>
              The elements of an effective overload set are triples of the form
              &lt;<var>f</var>, <var>types</var>, <var>any</var>>.  If the effective overload
              set is for regular operations, static operations or callers, then <var>f</var> is an operation,
              and if it is for constructors, then <var>f</var> is an
              extended attribute.  In either case, <var>types</var> is a list
              of IDL types and <var>any</var> is a list of boolean values.
              Each triple represents an allowable invocation of the operation,
              constructor or caller with an argument value list of the given types.
              <var>any</var> specifies whether a particular argument has been
              annotated with the <a class='xattr' href='#AllowAny'>[AllowAny]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
              Due to the use of <a class='dfnref' href='#dfn-optional-argument'>optional arguments</a>
              and <a class='dfnref' href='#dfn-variadic-operation'>variadic operations</a>
              and constructors, there may
              be multiple entries in an effective overload set identifying
              the same operation or constructor.
            </p>
            <p>
              The effective overload set for identifier <var>A</var>,
              argument count <var>N</var>,
              interface <var>I</var> and a given target language binding
              is derived as follows.  Whenever an argument of an extended
              attribute is mentioned, it is referring to an argument of the
              extended attribute’s <a class='dfnref' href='#dfn-xattr-named-argument-list'>named argument list</a>.
            </p>
            <ol class='algorithm'>
              <li>Initialize <var>S</var> to ∅.</li>
              <li>Let <var>F</var> be a set with elements as follows, according to the kind of effective overload set:
                <dl class='switch'>
                  <dt>For regular operations</dt>
                  <dd>
                    The elements of <var>F</var> are the <a class='dfnref' href='#dfn-regular-operation'>regular operations</a> with
                    identifier <var>A</var> defined on interface <var>I</var>.
                  </dd>
                  <dt>For static operations</dt>
                  <dd>
                    The elements of <var>F</var> are the <a class='dfnref' href='#dfn-static-operation'>static operations</a> with
                    identifier <var>A</var> defined on interface <var>I</var>.
                  </dd>
                  <dt>For constructors</dt>
                  <dd>
                    The elements of <var>F</var> are the
                    <a class='nt' href='#NamedConstructor'>[NamedConstructor]</a>
                    <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a> on interface <var>I</var> whose
                    <a class='dfnref' href='#dfn-xattr-named-argument-list'>named argument lists’</a>
                    identifiers are <var>A</var>.  If <var>A</var> is the same as the identifier of
                    interface <var>I</var>, then <var>F</var> also includes the
                    <a class='nt' href='#Constructor'>[Constructor]</a> extended
                    attributes on <var>I</var>.
                  </dd>
                  <dt>For callers</dt>
                  <dd>
                    The elements of <var>F</var> are the <a class='dfnref' href='#dfn-caller'>callers</a>
                    defined on interface <var>I</var>.
                  </dd>
                </dl>
              </li>
              <li>If the effective overload set is for regular operations, then:
                <ol>
                  <li>
                    If the target language binding supports object indexing,
                    then remove from <var>F</var> any operation that is declared
                    to be an <a class='dfnref' href='#dfn-omittable'>omittable</a>
                    <a class='dfnref' href='#dfn-getter'>getter</a>,
                    <a class='dfnref' href='#dfn-setter'>setter</a>,
                    <a class='dfnref' href='#dfn-creator'>creator</a> or
                    <a class='dfnref' href='#dfn-deleter'>deleter</a>.
                  </li>
                  <li>
                    If the target language binding supports object calling,
                    then remove from <var>F</var> any operation that is declared
                    to be an omittable <a class='dfnref' href='#dfn-caller'>caller</a>.
                  </li>
                  <li>
                    If the target language binding supports object stringification,
                    then remove from <var>F</var> any operation that is declared
                    to be an omittable <a class='dfnref' href='#dfn-stringifier'>stringifier</a>.
                  </li>
                </ol>
              </li>
              <li>Let <var>maxarg</var> be the maximum number of arguments the operations or constructor extended attributes in <var>F</var> are declared to take.</li>
              <li>Let <var>m</var> be the maximum of <var>maxarg</var> and <var>N</var>.</li>
              <li>For each operation or extended attribute <var>X</var> in <var>F</var>:
                <ol class='algorithm'>
                  <li>Let <var>n</var> be the number of arguments <var>X</var> is declared to take.</li>
                  <li>Let <var>t</var><sub>0..<var>n</var>−1</sub> be the types of the arguments <var>X</var> is defined to take.</li>
                  <li>Let <var>a</var><sub>0..<var>n</var>−1</sub> be boolean values indicating whether each argument <var>X</var> is defined to take is declared with the <a class='xattr' href='#AllowAny'>[AllowAny]</a> extended attribute.</li>
                  <li>Add to <var>S</var> the triple &lt;<var>X</var>, <var>t</var><sub>0..<var>n</var>−1</sub>, <var>a</var><sub>0..<var>n</var>−1</sub>>.</li>
                  <li>If <var>n</var> > 0 and <var>X</var> is declared to be <a class='dfnref' href='#dfn-variadic-operation'>variadic</a>, then:
                    <ol class='algorithm'>
                      <li>Add to <var>S</var> the triple &lt;<var>X</var>, <var>t</var><sub>0..<var>n</var>−2</sub>, <var>a</var><sub>0..<var>n</var>−2</sub>>.</li>
                      <li>For every integer <var>i</var>, such that <var>n</var> ≤ <var>i</var> ≤ <var>m</var>−1:
                        <ol class='algorithm'>
                          <li>Let <var>u</var><sub>0..<var>i</var></sub> be a list of types, where <var>u</var><sub>j</sub> = <var>t</var><sub>j</sub> (for <var>j</var> &lt; <var>n</var>) and <var>u</var><sub>j</sub> = <var>t</var><sub><var>n</var>−1</sub> (for <var>j</var> ≥ <var>n</var>).</li>
                          <li>Let <var>b</var><sub>0..<var>i</var></sub> be a list of booleans, where <var>b</var><sub>j</sub> = <var>a</var><sub>j</sub> (for <var>j</var> &lt; <var>n</var>) and <var>b</var><sub>j</sub> = <var>a</var><sub><var>n</var>−1</sub> (for <var>j</var> ≥ <var>n</var>).</li>
                          <li>Add to <var>S</var> the triple &lt;<var>X</var>, <var>u</var><sub>0..<var>i</var></sub>, <var>b</var><sub>0..<var>i</var></sub>>.</li>
                        </ol>
                      </li>
                    </ol>
                  </li>
                  <li>For every integer <var>i</var>, such that 0 &lt; <var>i</var> &lt; <var>n</var>:
                    <ol class='algorithm'>
                      <li>If argument <var>i</var> of <var>X</var> is <a class='dfnref' href='#dfn-optional-argument'>optional</a>, then add to <var>S</var> the triple &lt;<var>X</var>, <var>t</var><sub>0..<var>i−1</var></sub>, <var>a</var><sub>0..<var>i−1</var></sub>>.</li>
                    </ol>
                  </li>
                  <li>If <var>n</var> > 0 and the first argument of <var>X</var> is optional, then add to <var>S</var> the triple &lt;<var>X</var>, (), ()> (where “()” represents the empty list).</li>
                </ol>
              </li>
              <li>
                The effective overload set for identifier <var>A</var> and interface <var>X</var> is <var>S</var>.
              </li>
            </ol>
            <p>
              For each pair of entries in an
              <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
              at least one of the following <span class='rfc2119'>MUST</span> be true:
            </p>
            <ul>
              <li>the type list lengths of the two entries are different, or</li>
              <li>there is an index <var>i</var> such that the types in the two type lists at index <var>i</var> are <a class='dfnref' href='#dfn-distinguishable'>distinguishable</a>.</li>
            </ul>
            <p>
              Two types are
              <dfn id='dfn-distinguishable'>distinguishable</dfn> if there is
              a “●” mark in the corresponding entry in the following table:
            </p>
            <table id='distinguishable-table' class='matrix'>
              <tr>
                <th class='corner'></th>
                <th>primitive</th>
                <th>primitive?</th>
                <th>DOMString</th>
                <th>DOMString?</th>
                <th>interface</th>
                <th>object</th>
                <th>sequence&lt;<var>T</var>&gt;</th>
                <th>sequence&lt;<var>T</var>&gt;?</th>
                <th><var>T</var>[]</th>
              </tr>
              <tr>
                <th>primitive</th>
                <td></td>
                <td></td>
                <td>●</td>
                <td>●</td>
                <td>●</td>
                <td>●</td>
                <td>●</td>
                <td>●</td>
                <td>●</td>
              </tr>
              <tr>
                <th>primitive?</th>
                <td class='belowdiagonal'></td>
                <td></td>
                <td>●</td>
                <td></td>
                <td></td>
                <td></td>
                <td>●</td>
                <td></td>
                <td>●</td>
              </tr>
              <tr>
                <th>DOMString</th>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td></td>
                <td></td>
                <td>●</td>
                <td>●</td>
                <td>●</td>
                <td>●</td>
                <td>●</td>
              </tr>
              <tr>
                <th>DOMString?</th>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td></td>
                <td></td>
                <td></td>
                <td>●</td>
                <td></td>
                <td>●</td>
              </tr>
              <tr>
                <th>interface</th>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td>● <a id='distinguishable-interface-note-ref' class='note-link' href='#distinguishable-interface-note'>[1]</a></td>
                <td></td>
                <td>●</td>
                <td></td>
                <td>●</td>
              </tr>
              <tr>
                <th>object</th>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
              <tr>
                <th>sequence&lt;<var>T</var>></th>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
              <tr>
                <th>sequence&lt;<var>T</var>>?</th>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td></td>
                <td></td>
              </tr>
              <tr>
                <th><var>T</var>[]</th>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td class='belowdiagonal'></td>
                <td></td>
              </tr>
            </table>
            <ul class='notes'>
              <li id='distinguishable-interface-note'><a class='note-link' href='#distinguishable-interface-note-ref'>[1]</a> Two <a href='#idl-interface'>interface types</a> are distinguishable only if two different <a class='dfnref' href='#dfn-interface'>interfaces</a> are identified.</li>
            </ul>
            <div class='note'>
              <p>
                These restrictions on argument types reduce 
                the possibility of resolution ambiguity in
                <a class='dfnref' href='#dfn-overloaded'>overloaded</a> operations
                and constructors, but do not
                eliminate it.  In the ECMAScript language binding, the
                restrictions still can result in overloaded operation and constructor invocations
                that cannot be distinguished solely based on the values passed to
                the corresponding function.  For example, with the following
                <a class='dfnref' href='#dfn-interface'>interfaces</a>:
              </p>
              <x:codeblock language='idl'>interface A {
  <span class='comment'>// ...</span>
};

interface B {
  <span class='comment'>// ...</span>
};

interface C {
  void f(in A x);
  void f(in B x);
};</x:codeblock>
              <p>
                it is possible to pass an object that implements both <span class='idlvalue'>A</span>
                and <span class='idlvalue'>B</span> to <code>f</code>.  Similarly,
                passing <span class='esvalue'>null</span> to <code>f</code>
                would also be ambiguous.  Since the ECMAScript
                language binding provides no way to disambiguate such calls,
                the interface description will need to
                describe which operation is invoked in these cases.  (It is
                acceptable not to describe this if there is no observable
                difference in behavior for a particular choice of operation
                or constructor to disambiguate the call, or if no object will
                actually implement the two interfaces, for example.)
              </p>
            </div>
            <div class='example'>
              <p>
               For the following interface:
              </p>
              <x:codeblock language='idl'>interface A {
  /* f1 */ void f(in DOMString a);
  /* f2 */ void f([AllowAny] in DOMString a, in DOMString b, in float... c);
  /* f3 */ void f();
  /* f4 */ void f(in long a, in DOMString b, in optional DOMString c, in float... d);
};</x:codeblock>
              <p>
                the <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                for identifier <code>f</code> with argument count 4 (for the
                ECMAScript language binding) is:
              </p>
              <div class='set'>
                { &lt;f1, (DOMString), (false)>,<br/>
                  &lt;f2, (DOMString, DOMString), (true, false)>,<br/>
                  &lt;f2, (DOMString, DOMString, float), (true, false, false),<br/>
                  &lt;f2, (DOMString, DOMString, float, float, (true, false, false, false))>,<br/>
                  &lt;f3, (), ()>,<br/>
                  &lt;f4, (long, DOMString), (false, fase)>,<br/>
                  &lt;f4, (long, DOMString, DOMString), (false, false)>,<br/>
                  &lt;f4, (long, DOMString, DOMString, float), (false, false, false, false)> }
              </div>
              <p>
                There are thus no overloaded operation resolution ambiguities
                for the interface.
              </p>
            </div>
          </div>
        </div>

        <div id='idl-exceptions' class='section'>
          <h3>Exceptions</h3>

          <p>
            An <dfn id='dfn-exception'>exception</dfn> is a definition that matches the
            <a class='nt' href='#prod-Exception'>Exception</a> non-terminal, and is used
            to declare a type of exception that can be thrown by implementations.
            The <a class='dfnref' href='#dfn-identifier'>identifier</a> of the exception
            is given by the <a class='nt' href='#prod-identifier'>identifier</a> terminal.
          </p>
          <p>
            Exceptions are different from <a class='dfnref' href='#dfn-interface'>interfaces</a>
            in that they can have only <a class='dfnref' href='#dfn-constant'>constants</a>
            and <a class='dfnref' href='#dfn-exception-field'>exception fields</a>
            declared on them (together known as <dfn id='dfn-exception-member'>exception members</dfn>),
            rather than the three types of <a class='dfnref' href='#dfn-interface-member'>interface members</a>.
          </p>
          <p>
            <dfn id='dfn-exception-field'>Exception fields</dfn> declared using the
            <a class='nt' href='#prod-ExceptionField'>ExceptionField</a> production.
            An exception field’s type is given by the <a class='nt' href='#prod-Type'>Type</a>
            non-terminal of the <a class='nt' href='#prod-ExceptionField'>ExceptionField</a>.
            If the <a class='nt' href='#prod-Type'>Type</a>
            is a <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>, then it
            <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-resolve'>resolve</a>,
            with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
            of the exception on which the exception field is declared, to an
            interface or <a class='dfnref' href='#dfn-typedef'>typedef</a>.
          </p>
          <p>
            The identifier of an exception field <span class='rfc2119'>MUST</span> not be
            the same as that of another <a class='dfnref' href='#dfn-exception-member'>exception member</a>
            of a <a class='dfnref' href='#dfn-constant'>constant</a> defined on the exception.
          </p>
          <p>
            Exception fields are
            similar to <a class='dfnref' href='#dfn-attribute'>attributes</a> in that they
            will correspond to attributes of the same name and type on exception objects
            that are thrown by implementations.
          </p>
          <p>
            The following extended attributes are applicable to exceptions:
            <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>.
          </p>
          <p>
            No <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            are applicable to exception fields.
          </p>
          <?productions grammar Exception ExceptionMembers ExceptionMember ExceptionField?>
          <div class='example'>
            <p>
              See <a href='#idl-attributes'>section <?sref idl-attributes?></a>
              <?sdir idl-attributes?> for an example of an
              <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> that
              declares <a class='dfnref' href='#dfn-exception'>exceptions</a>.
            </p>
          </div>
        </div>

        <div id='idl-typedefs' class='section'>
          <h3>Typedefs</h3>

          <p>
            A <dfn id='dfn-typedef'>typedef</dfn> is a definition that matches the
            <a class='nt' href='#prod-Typedef'>Typedef</a> non-terminal, and is
            used to declare a new name for a type.
          </p>
          <p>
            The type is given by the <a class='nt' href='#prod-Type'>Type</a>
            non-terminal, and the new name for the type is
            the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the
            typedef, as given by the <a class='nt' href='#prod-identifier'>identifier</a>
            terminal.
          </p>
          <p>
            No <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            are applicable to <a class='dfnref' href='#dfn-typedef'>typedefs</a>.
          </p>

          <?productions grammar Typedef TypedefRest?>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates the use of <a class='dfnref' href='#dfn-typedef'>typedefs</a>
              to allow the use of a short
              <a class='dfnref' href='#dfn-identifier'>identifier</a> instead of a long
              <a class='dfnref' href='#dfn-scoped-name'>scoped name</a> or
              <a href='#idl-sequence'>sequence type</a>.
            </p>
            <x:codeblock language='idl'><![CDATA[module gfx {
  module geom {
    module geom2d {

      interface Point {
        attribute float x;
        attribute float y;
      };

      typedef sequence<Point> PointSequence;

      interface Rect {
        attribute Point topleft;
        attribute Point bottomright;
      };
    };
  };
};

module gui {

  typedef gfx::geom::geom2d::Point Point;
  typedef gfx::geom::geom2d::PointSequence PointSequence;
  typedef gfx::geom::geom2d::Rect Rect;

  interface Widget {

    readonly attribute Rect bounds;

    boolean pointWithinBounds(in Point p);
    boolean allPointsWithinBounds(in PointSequence ps);
  };
};]]></x:codeblock>
          </div>
        </div>

        <div id='idl-implements-statements' class='section'>
          <h3>Implements statements</h3>

          <p>
            An <dfn id='dfn-implements-statement'>implements statement</dfn> is a definition
            matching <a class='nt' href='#prod-ImplementsStatement'>ImplementsStatement</a>,
            which declares that all objects implementing an interface <var>A</var>
            (identified by the first <a class='dfnref' href='#dfn-scoped-name'>scoped name</a>)
            <span class='rfc2119'>MUST</span> also implement interface <var>B</var>
            (identified by the second scoped name).
          </p>
          <p>
            <a class='dfnref' href='#dfn-implements-statement'>Implements statements</a>
            can appear on a <a class='dfnref' href='#dfn-module'>module</a>
            or at the <a class='dfnref' href='#dfn-outermost-scope'>outermost scope</a>.
          </p>
          <p>
            The two <a class='dfnref' href='#dfn-scoped-name'>scoped names</a> <span class='rfc2119'>MUST</span>
            <a class='dfnref' href='#dfn-resolve'>resolve</a>,
            with respect to the <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
            of the implements statement, to an interface or <a class='dfnref' href='#dfn-typedef'>typedef</a>.
          </p>
          <p>
            No <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            are applicable to <a class='dfnref' href='#dfn-implements-statement'>implements statements</a>.
          </p>

          <?productions grammar ImplementsStatement?>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              defines two <a class='dfnref' href='#dfn-interface'>interfaces</a>, stating
              that one interface is always implemented on objects implementing the other.
            </p>
            <x:codeblock language='idl'>module dom {
  interface Node {
    readonly attribute unsigned short nodeType;
    <span class='comment'>// ...</span>
  };
};

module events {

  interface EventTarget {
    void addEventListener(in DOMString type,
                          in EventListener listener,
                          in boolean useCapture);
    <span class='comment'>// ...</span>
  };

  dom::Node implements EventTarget;
};</x:codeblock>
            <p>
              An ECMAScript implementation would thus have an <span class='prop'>addEventListener</span>
              property in the prototype chain of every <span class='idltype'>Node</span>:
            </p>
            <x:codeblock language='es'>var n = getNode();          <span class='comment'>// Obtain an instance of Node.</span>
typeof n.addEventListener;  <span class='comment'>// Evaluates to "function".</span></x:codeblock>
            <p>
              Similarly, in Java, any <span class='javatype'>Node</span>
              object could be cast to <span class='javatype'>EventTarget</span>:
            </p>
            <x:codeblock language='java'>Node n = getNode();               <span class='comment'>// Obtain an instance of Node.</span>
EventTarget et = (EventTarget) n; <span class='comment'>// This should never throw ClassCastException.</span></x:codeblock>
            <p>
              Note that it is not the case that all <span class='idltype'>EventTarget</span>
              objects implement <span class='idltype'>Node</span>.
            </p>
          </div>
        </div>

        <!--
        <div id='idl-valuetypes' class='section'>
          <h3>Valuetypes</h3>

          <p>
            Valuetypes in OMG IDL are used to define types similar to structs in C.
            That is, they define composite types that can have zero or more
            member variables that are passed by value.  OMG IDL valuetypes have the
            additional feature of allowing <span class='idlvalue'>null</span> to
            be passed in place of an object with those member variables.  An
            OMG IDL boxed valuetype is a special case, where the valuetype has
            a single member.
          </p>
          <p>
            The IDL defined in this specification supports only
            <dfn id='dfn-boxed-valuetype'>boxed valuetypes</dfn>, which are definitions
            that match the <a class='nt' href='#prod-Valuetype'>Valuetype</a> non-terminal.
            The <a class='dfnref' href='#dfn-identifier'>identifier</a> of the valuetype
            is given by the <a class='nt' href='#prod-identifier'>identifier</a> terminal,
            and the type being boxed is given by the
            <a class='nt' href='#prod-BoxedType'>BoxedType</a> non-terminal.  If the
            <a class='nt' href='#prod-BoxedType'>BoxedType</a> is a
            <a class='nt' href='#prod-ScopedName'>ScopedName</a>, then it
            <span class='rfc2119'>MUST</span> refer to a type that does not allow
            <span class='idlvalue'>null</span> as a value (i.e.,
            <a class='idltype' href='#idl-boolean'>boolean</a>,
            <a class='idltype' href='#idl-octet'>octet</a>,
            <a class='idltype' href='#idl-short'>short</a>,
            <a class='idltype' href='#idl-unsigned-short'>unsigned short</a>,
            <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>,
            <a class='idltype' href='#idl-long-long'>long long</a>,
            <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a>,
            <a class='idltype' href='#idl-float'>float</a>,
            <a class='idltype' href='#idl-double'>double</a> or
            <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>.
          </p>
          <p>
            Boxed valuetypes are essentially used just for allowing a <span class='idlvalue'>null</span>
            value to be used where normally a non-null value could only be used.
          </p>

          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              demonstrates the use of <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetypes</a>:
            </p>
            <x:codeblock language='idl'>valuetype OptionalFloat float;

interface Person {

  <span class='comment'>// This attribute can be a float or null.  In this case, null might be used</span>
  <span class='comment'>// to represent the case where the height of the person is unknown.</span>
  readonly attribute OptionalFloat height;
};</x:codeblock>
          </div>

          <?productions grammar Valuetype ValuetypeRest?>
        </div>
        -->

        <div id='idl-types' class='section'>
          <h3>Types</h3>

          <p>
            This section lists the types supported by the IDL, the set of values
            each type correspond to, and how <a class='dfnref' href='#dfn-constant'>constants</a>
            of that type are represented.
          </p>
          <p>
            The following types are known as <dfn id='dfn-primitive-type'>primitive types</dfn>:
            <a class='idltype' href='#idl-boolean'>boolean</a>,
            <a class='idltype' href='#idl-octet'>octet</a>,
            <a class='idltype' href='#idl-short'>short</a>,
            <a class='idltype' href='#idl-unsigned-short'>unsigned short</a>,
            <a class='idltype' href='#idl-long'>long</a>,
            <a class='idltype' href='#idl-unsigned-long'>unsigned long</a>,
            <a class='idltype' href='#idl-long-long'>long long</a>,
            <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a>,
            <a class='idltype' href='#idl-float'>float</a> and
            <a class='idltype' href='#idl-float'>double</a>.
          </p>
          <p>
            The <a class='idltype' href='#idl-object'>object</a> type and
            all <a class='dfnref' href='#idl-interface'>interface types</a>
            are known as <dfn id='dfn-object-type'>object types</dfn>.
          </p>
          <p>
            Every type has a <dfn id='dfn-type-name'>type name</dfn>, which
            is a string, not necessarily unique, that identifies the type.
            Each sub-section below defines what the type name is for each
            type.
          </p>
          <p id='type-conversion-exceptions'>
            When conversions are made from language binding specific types to
            IDL types in order to invoke an <a class='dfnref' href='#dfn-operation'>operation</a>
            or assign a value to an <a class='dfnref' href='#dfn-attribute'>attribute</a>,
            all conversions necessary will be performed before the operation
            is invoked or the attribute updated.  If the conversion cannot
            be performed, then the operation will not be invoked or
            the attribute will not be updated.  In some language bindings,
            type conversions could result in an exception being thrown.
            In such cases, these exceptions will be propagated to the
            code that made the attempt to invoke the operation or
            assign to the attribute.
          </p>

          <?productions grammar Type NullableType Nullable UnsignedIntegerType IntegerType OptionalLong Array?>

          <div id='idl-any' class='section'>
            <h4>any</h4>

            <p>
              The <a class='idltype' href='#idl-any'>any</a> type is the union of all other possible types.
              Its <a class='dfnref' href='#dfn-type-name'>type name</a> is “Any”.
            </p>
          </div>

          <div id='idl-boolean' class='section'>
            <h4>boolean</h4>

            <p>
              The <a class='idltype' href='#idl-boolean'>boolean</a> type has two values:
              <span class='idlvalue'>true</span> and <span class='idlvalue'>false</span>.
            </p>
            <p>
              <a class='idltype' href='#idl-boolean'>boolean</a> constant values in IDL are
              represented with the <span class='terminal'>"true"</span> and
              <span class='terminal'>"false"</span> terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>boolean</span> type is “Boolean”.
            </p>
          </div>

          <div id='idl-octet' class='section'>
            <h4>octet</h4>

            <div class='ednote'>
              <p>Request for a signed 8-bit type. <a href='http://lists.w3.org/Archives/Public/public-script-coord/2010JanMar/0000.html'>(Mail.)</a></p>
            </div>
            <p>
              The <a class='idltype' href='#idl-octet'>octet</a> type is an unsigned integer
              type that has values in the range [0, 255].
            </p>
            <p>
              <a class='idltype' href='#idl-octet'>octet</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>octet</span> type is “Octet”.
            </p>
          </div>

          <div id='idl-short' class='section'>
            <h4>short</h4>

            <p>
              The <a class='idltype' href='#idl-short'>short</a> type is a signed integer
              type that has values in the range [−32768, 32767].
            </p>
            <p>
              <a class='idltype' href='#idl-short'>short</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>short</span> type is “Short”.
            </p>
          </div>

          <div id='idl-unsigned-short' class='section'>
            <h4>unsigned short</h4>

            <p>
              The <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> type is an unsigned integer
              type that has values in the range [0, 65535].
            </p>
            <p>
              <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>unsigned short</span> type is “UnsignedShort”.
            </p>
          </div>

          <div id='idl-long' class='section'>
            <h4>long</h4>

            <p>
              The <a class='idltype' href='#idl-long'>long</a> type is a signed integer
              type that has values in the range [−2147483648, 2147483647].
            </p>
            <p>
              <a class='idltype' href='#idl-long'>long</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>long</span> type is “Long”.
            </p>
          </div>

          <div id='idl-unsigned-long' class='section'>
            <h4>unsigned long</h4>

            <p>
              The <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> type is an unsigned integer
              type that has values in the range [0, 4294967295].
            </p>
            <p>
              <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>unsigned long</span> type is “UnsignedLong”.
            </p>
          </div>

          <div id='idl-long-long' class='section'>
            <h4>long long</h4>

            <p>
              The <a class='idltype' href='#idl-long-long'>long long</a> type is a signed integer
              type that has values in the range [−9223372036854775808, 9223372036854775807].
            </p>
            <p>
              <a class='idltype' href='#idl-long-long'>long long</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>long long</span> type is “LongLong”.
            </p>
          </div>

          <div id='idl-unsigned-long-long' class='section'>
            <h4>unsigned long long</h4>

            <p>
              The <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> type is an unsigned integer
              type that has values in the range [0, 18446744073709551615].
            </p>
            <p>
              <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> constant values in IDL are
              represented with <a class='nt' href='#prod-integer'>integer</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>unsigned long long</span> type is “UnsignedLongLong”.
            </p>
          </div>

          <div id='idl-float' class='section'>
            <h4>float</h4>

            <p>
              The <a class='idltype' href='#idl-float'>float</a> type is a floating point numeric
              type that corresponds to the set of possible single-precision 32 bit
              IEEE 754 floating point numbers.  <a href='#ref-IEEE-754'>[IEEE-754]</a>
            </p>
            <p>
              <a class='idltype' href='#idl-float'>float</a> constant values in IDL are
              represented with <a class='nt' href='#prod-float'>float</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>float</span> type is “Float”.
            </p>
          </div>

          <div id='idl-double' class='section'>
            <h4>double</h4>

            <p>
              The <a class='idltype' href='#idl-double'>double</a> type is a floating point numeric
              type that corresponds to the set of possible double-precision 64 bit
              IEEE 754 floating point numbers.  <a href='#ref-IEEE-754'>[IEEE-754]</a>
            </p>
            <p>
              <a class='idltype' href='#idl-double'>double</a> constant values in IDL are
              represented with <a class='nt' href='#prod-float'>float</a>
              terminals.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>double</span> type is “Double”.
            </p>
          </div>

          <div id='idl-DOMString' class='section'>
            <h4>DOMString</h4>

            <p>
              The <a class='idltype' href='#idl-DOMString'>DOMString</a> type
              corresponds to the set of all possible sequences of
              16 bit unsigned integer code units (to be interpreted as UTF-16 encoded strings <a href='#ref-RFC2781'>[RFC2781]</a>).
              While <span class='idltype'>DOMString</span> is defined to be an OMG IDL boxed
              <a class='idltype' href='#idl-sequence'>sequence&lt;unsigned short></a>
              valuetype in <cite><a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-C74D1578'>DOM Level 3 Core</a></cite>
              (<a href='#ref-DOM3CORE'>[DOM3CORE]</a>, section 1.2.1),
              this document defines <span class='idltype'>DOMString</span> to be an intrinsic type so as to avoid
              special casing that sequence type in various situations where a
              string is required.
            </p>
            <div class='note'>
              <p>
                Note also that <span class='idlvalue'>null</span>
                is not a value of type <span class='idltype'>DOMString</span>.
                To allow <span class='idlvalue'>null</span>, a
                <a href='#idl-nullable-type'>nullable</a> <span class='idltype'>DOMString</span>,
                written as <code>DOMString?</code> in IDL, can be used.
              </p>
            </div>
            <p>
              There is no way to represent a
              <a class='idltype' href='#idl-DOMString'>DOMString</a> constant
              value in IDL.
            </p>
            <p>
              Nothing in this specification requires a <span class='idltype'>DOMString</span>
              value to be a valid UTF-16 string.  For example, a <span class='idltype'>DOMString</span>
              value might include unmatched surrogate pair characters.  Authors
              of specifications using Web IDL might want to obtain a sequence of
              Unicode characters given a particular sequence of 16 bit unsigned
              integer code units, however.  The following algorithm defines a way to
              <dfn id='dfn-obtain-unicode'>convert a DOMString to a sequence of Unicode characters</dfn>:
            </p>
            <ol class='algorithm'>
              <li>Let <var>S</var> be the <span class='idltype'>DOMString</span> value.</li>
              <li>Let <var>n</var> be the length of <var>S</var>.</li>
              <li>Initialize <var>i</var> to 0.</li>
              <li>Initialize <var>U</var> to be an empty sequence of Unicode characters.</li>
              <li>While <var>i</var> &lt; <var>n</var>:
                <ol>
                  <li>Let <var>c</var> be the code unit in <var>S</var> at index <var>i</var>.</li>
                  <li>Depending on the value of <var>c</var>:
                    <dl class='switch'>
                      <dt><var>c</var> &lt; 0xD800 or <var>c</var> &gt; 0xDFFF</dt>
                      <dd>Append to <var>U</var> the Unicode character with code point <var>c</var>. </dd>

                      <dt>0xDC00 ≤ <var>c</var> ≤ 0xDFFF</dt>
                      <dd>Append to <var>U</var> a U+FFFD REPLACEMENT CHARACTER.</dd>

                      <dt>0xD800 ≤ <var>c</var> ≤ 0xDBFF</dt>
                      <dd>
                        <ol class='only'>
                          <li>If <var>i</var> = <var>n</var>−1, then append to <var>U</var> a U+FFFD REPLACEMENT CHARACTER.</li>
                          <li>Otherwise, <var>i</var> &lt; <var>n</var>−1:
                            <ol>
                              <li>Let <var>d</var> be the code unit in <var>S</var> at index
                                <var>i</var>+1.</li>
                              <li>If 0xDC00 ≤ <var>d</var> ≤ 0xDFFF, then:
                                <ol>
                                  <li>Let <var>a</var> be <var>c</var> &amp; 0x3FF.</li>
                                  <li>Let <var>b</var> be <var>d</var> &amp; 0x3FF.</li>
                                  <li>Append to <var>U</var> the Unicode character with
                                    code point 2<sup>16</sup>+2<sup>10</sup><var>a</var>+<var>b</var>.</li>
                                  <li>Set <var>i</var> to <var>i</var>+1.</li>
                                </ol>
                              </li>
                              <li>Otherwise, <var>d</var> &lt; 0xDC00 or <var>d</var> > 0xDFFF.
                                Append to <var>U</var> a U+FFFD REPLACEMENT CHARACTER.</li>
                            </ol>
                          </li>
                        </ol>
                      </dd>
                    </dl>
                  </li>
                  <li>Set <var>i</var> to <var>i</var>+1.</li>
                </ol>
              </li>
              <li>Return <var>U</var>.</li>
            </ol>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>DOMString</span> type is “String”.
            </p>
          </div>

          <div id='idl-object' class='section'>
            <h4>object</h4>

            <p>
              The <a class='idltype' href='#idl-object'>object</a> type corresponds to the set of
              all possible object references, plus the special value <span class='idlvalue'>null</span>,
              which indicates no object reference.
            </p>
            <p>
              There is no way to represent an <a class='idltype' href='#idl-object'>object</a>
              constant value in IDL.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of the
              <span class='idltype'>object</span> type is “Object”.
            </p>
          </div>

          <div id='idl-interface' class='section'>
            <h4>Interface types</h4>

            <p>
              A <a class='dfnref' href='#dfn-scoped-name'>scoped name</a> that
              <a class='dfnref' href='#dfn-resolve'>resolves</a> to an
              <a class='dfnref' href='#dfn-interface'>interface</a> is used to refer to
              a type that corresponds to the set of all possible references to objects that
              implement that interface, plus the special value <span class='idlvalue'>null</span>,
              which indicates no object reference.
            </p>
            <p>
              There is no way to represent a constant value for interface types in IDL.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of an interface type
              is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the interface.
            </p>
          </div>

          <div id='idl-nullable-type' class='section'>
            <h4>Nullable types — <var>T</var>?</h4>

            <p>
              A <dfn id='dfn-nullable-type'>nullable type</dfn> is an IDL type constructed
              from an existing type (called the <dfn id='dfn-inner-type'>inner type</dfn>),
              which just allows the additional value <span class='idlvalue'>null</span>
              to be a member of its set of values.  <a class='dfnref' href='#dfn-nullable-type'>Nullable types</a>
              are represented in IDL by placing a <span class='char'>U+003F QUESTION MARK ("?")</span>
              character after an existing type.  Only types that do not already allow
              <span class='idlvalue'>null</span> can have a nullable type created
              from them.
            </p>
            <p>
              Nullable type constant values in IDL are represented in the same way as
              constant values of their <a class='dfnref' href='#dfn-inner-type'>inner type</a>
              would be represented.  There is no way to represent the <span class='idlvalue'>null</span>
              constant value, however.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of a nullable type
              is the concatenation of the type name of the inner type <var>T</var> and
              the string “OrNull”.
            </p>
            <div class='example'>
              <p>
                For example, a type that allows the values <span class='idlvalue'>true</span>,
                <span class='idlvalue'>false</span> and <span class='idlvalue'>null</span>
                is written as <span class='idltype'>boolean?</span>:
              </p>
              <x:codeblock language='idl'>interface MyConstants {
  const boolean? ARE_WE_THERE_YET = false;
};</x:codeblock>
              <p>
                The following <a class='dfnref' href='#dfn-interface'>interface</a> has an
                <a class='dfnref' href='#dfn-attribute'>attribute</a> whose value can be
                a <span class='idltype'>DOMString</span> or the <span class='idlvalue'>null</span>
                value:
              </p>
              <x:codeblock language='idl'>interface Node {
  readonly attribute DOMString? namespaceURI;
  <span class='comment'>// ...</span>
};</x:codeblock>
              <p>
                It is not possible to have a type <span class='idltype'>Node?</span>, since
                <a href='#idl-interface'>interface types</a> already
                allow the <span class='idlvalue'>null</span> value.
              </p>
            </div>
          </div>

          <div id='idl-sequence' class='section'>
            <h4>Sequences — sequence&lt;<var>T</var>></h4>

            <div class='ednote'>
              <p>Do we need a ByteArray type defined somewhere? (<a href='http://www.w3.org/mid/op.uu9an8e964w2qv@annevk-t60'>For WebSocket</a> and <a href='http://www.w3.org/mid/278fd46c0805120021p4b772263v675cbd59ae092296@mail.gmail.com'>XHR2</a>.)</p>
            </div>

            <p>
              The <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>
              type is a parameterized type whose values are (possibly zero-length) sequences of
              values of type <var>T</var>.  Sequences are always passed by value.  In
              language bindings where a sequence is represented by an object of
              some kind, passing a sequence to a user agent implemented object
              will not result in a reference to the sequence being kept by that object.
              Similarly, any sequence returned from a user agent implemented object
              will be a copy and modifications made to it will not be visible to the object.
            </p>
            <p>
              There is no way to represent a sequence constant value in IDL.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of a sequence type
              is the concatenation of the type name for <var>T</var> and
              the string “Sequence”.
            </p>
            <div class='note'>
              <p>
                Since sequences are passed by value, a new copy of the object
                representing the sequence is returned every time an attribute
                of a sequence type is fetched.  Thus, it usually is not appropriate
                to use a sequence type for an attribute.  In the following
                example, a new <span class='estype'>Array</span> object is
                allocated twice for every iteration of the loop
                (once in the loop test expression and once
                in the body of the loop):
              </p>
              <x:codeblock language='idl'>interface X {
  readonly attribute sequence&lt;long> numbers;
};</x:codeblock>
              <x:codeblock language='es'>var x = getX();  <span class='comment'>// Obtain an instance of X.</span>
for (var i = 0; i &lt; x.numbers.length; i++) {
  document.write(x.numbers[i] + '\n');
}</x:codeblock>
              <p>
                For attributes, it is recommended that a <a class='dfnref' href='#dfn-read-only-array'>read only array</a>
                is used instead.
              </p>
            </div>
          </div>

          <div id='idl-array' class='section'>
            <h4>Arrays — <var>T</var>[]</h4>

            <p>
              The <a class='idltype' href='#idl-array'><var>T</var>[]</a> type
              is a parameterized type whose values are (possibly zero-length) arrays
              of values of type <var>T</var> or the special value <span class='idlvalue'>null</span>.
              Unlike <a class='dfnref' href='#idl-sequence'>sequences</a>,
              arrays are passed by reference.  Passing an array to a user agent
              implemented object could result in that array being modified
              by the object.  An array returned from a user agent implemented
              object might also be modified by the object, and any modifications
              to the array performed by user code might be acted upon by the
              user agent implemented object.
            </p>
            <p>
              Arrays can either be <dfn id='dfn-fixed-length'>fixed length</dfn> or
              <dfn id='dfn-variable-length'>variable length</dfn>.  Fixed length
              arrays cannot have their length changed by user code after they have been
              created, while variable length arrays can.  Unless otherwise
              specified, arrays are fixed length.
            </p>
            <p>
              Arrays can also be designated as being <dfn id='dfn-read-only-array'>read only</dfn>.
              User code cannot modify the values of read only array elements.
              If an array is read only, then it is also implicitly <a class='dfnref' href='#dfn-fixed-length'>fixed length</a>.
            </p>
            <p>
              There is no way to represent an array constant value in IDL.
            </p>
            <p>
              The <a class='dfnref' href='#dfn-type-name'>type name</a> of an array type
              is the concatenation of the type name for <var>T</var> and
              the string “Array”.
            </p>
          </div>
        </div>

        <div id='idl-extended-attributes' class='section'>
          <h3>Extended attributes</h3>

          <div class='ednote'>
            <p>A request to add a <span class='xattr'>[DoNotCheckDomainSecurity]</span>. <a href='http://lists.w3.org/Archives/Public/public-script-coord/2010JanMar/0003.html'>(Mail.)</a></p>
          </div>
          <p>
            An <dfn id='dfn-extended-attribute'>extended attribute</dfn> is an annotation
            that can appear on
            <!--a class='dfnref' href='#dfn-definition'-->definitions<!--/a-->,
            <a class='dfnref' href='#dfn-interface-member'>interface members</a>,
            <a class='dfnref' href='#dfn-exception-member'>exception members</a> and
            <a class='dfnref' href='#dfn-operation'>operation</a> arguments, and
            is used to control how language bindings will handle those constructs.
            Extended attributes are specified with an
            <a class='nt' href='#prod-ExtendedAttributeList'>ExtendedAttributeList</a>,
            which is a square bracket enclosed, comma separated list of
            <a class='nt' href='#prod-ExtendedAttribute'>ExtendedAttribute</a>s.
          </p>
          <p>
            The <a class='nt' href='#prod-ExtendedAttribute'>ExtendedAttribute</a>
            non-terminal matches nearly any sequence of tokens, however the
            <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            defined in this document only accept a more restricted syntax.
            Any extended attribute encountered in an
            <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> is
            matched against the following five non-terminals to determine
            what form (or forms) it is in:
          </p>
          <table class='vert'>
            <tr>
              <th>Non-terminal</th>
              <th>Form</th>
              <th>Example</th>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeNoArg'>ExtendedAttributeNoArg</a>
              </td>
              <td>
                <dfn id='dfn-xattr-no-argument'>takes no argument</dfn>
              </td>
              <td>
                <code>[Replaceable]</code>
              </td>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeArgList'>ExtendedAttributeArgList</a>
              </td>
              <td>
                <dfn id='dfn-xattr-argument-list'>takes an argument list</dfn>
              </td>
              <td>
                <code>[Constructor(in float x, in float y)]</code>
              </td>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeNamedArgList'>ExtendedAttributeNamedArgList</a>
              </td>
              <td>
                <dfn id='dfn-xattr-named-argument-list'>takes a named argument list</dfn>
              </td>
              <td>
                <code>[NamedConstructor=Image(in DOMString src)]</code>
              </td>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeIdent'>ExtendedAttributeIdent</a>
              </td>
              <td>
                <dfn id='dfn-xattr-identifier'>takes an identifier</dfn>
              </td>
              <td>
                <code>[PutForwards=name]</code>
              </td>
            </tr>
            <tr>
              <td>
                <a class='nt' href='#prod-ExtendedAttributeScopedName'>ExtendedAttributeScopedName</a>
              </td>
              <td>
                <dfn id='dfn-xattr-scoped-name'>takes a scoped name</dfn>
              </td>
              <td>
                <code>[Prefix=org::example]</code>
              </td>
            </tr>
          </table>

          <p>
            This specification defines a number of extended attributes that
            are applicable to all language bindings, which are described in the
            sub-sections below.  In addition, ECMAScript language binding
            specific extended attributes are defined in
            <a href='#es-extended-attributes'>section <?sref es-extended-attributes?></a>.
            Each extended attribute definition will state which of the above
            five forms are allowed.  Although
            <a class='nt' href='#prod-ExtendedAttributeIdent'>ExtendedAttributeIdent</a> and
            <a class='nt' href='#prod-ExtendedAttributeScopedName'>ExtendedAttributeScopedName</a>
            are ambiguous, no extended attribute defined in this document
            can take both of those forms.
          </p>

          <?productions grammar ExtendedAttributeList ExtendedAttribute ExtendedAttributes ExtendedAttributeRest ExtendedAttributeInner Other OtherOrComma ExtendedAttributeNoArg ExtendedAttributeArgList ExtendedAttributeIdent ExtendedAttributeScopedName ExtendedAttributeNamedArgList?>

          <!--
          <div id='ExceptionConsts' class='section'>
            <h4>[ExceptionConsts]</h4>

            <p>
              If the <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-module'>module</a>, it indicates that any
              <a class='dfnref' href='#dfn-constant'>constants</a> declared on that module are intended to
              exist on the language construct that corresponds to the <a class='dfnref' href='#dfn-exception'>exception</a>
              given by the extended attribute’s argument (for languages that
              support constants on exceptions).  Exactly how these constants
              are exposed is language binding specific.
            </p>
            <p>
              The <a class='xattr' href='#ExceptionConsts'>[ExceptionConsts]</a> extended attribute
              <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a>
              that is the <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of an exception defined in that module, on which the constants declared at the
              module scope should live.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> declares an exception and a number of constants
                at the module scope:
              </p>
              <x:codeblock language='idl'>[ExceptionConsts=FileIOException]
module fileio {

  exception FileIOException {
    unsigned short code;
  };

  const unsigned short FILE_NOT_FOUND = 1;
  const unsigned short READ_ERROR = 2;
  const unsigned short WRITE_ERROR = 3;
};</x:codeblock>
              <p>
                In the ECMAScript binding, this will result in properties on the
                <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a> for each of the constants:
              </p>
              <x:codeblock language='es'>typeof FileIOException;          <span class='comment'>// evaluates to "object"</span>
FileIOException.FILE_NOT_FOUND;  <span class='comment'>// evaluates to 1</x:codeblock></span>
            </div>
          </div>
          -->

          <!--
          <div id='NoNull' class='section'>
            <h4>[NoNull]</h4>

            <p>
              If the <a class='xattr' href='#NoNull'>[NoNull]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-attribute'>attribute</a>,
              an <a class='dfnref' href='#dfn-operation'>operation</a> or an operation
              argument, whose type is a
              <a class='dfnref' href='#dfn-boxed-valuetype'>boxed valuetype</a>,
              it indicates that a <span class='idlvalue'>null</span> value is not
              expected and will never be returned.  How
              implementations treat the assignment of a <span class='idlvalue'>null</span>
              value to an attribute with the <a class='xattr' href='#NoNull'>[NoNull]</a>
              extended attribute, or passing a <span class='idlvalue'>null</span> value as a
              <a class='xattr' href='#NoNull'>[NoNull]</a> operation argument,
              is specific to the language binding.
            </p>
            <p>
              The <a class='xattr' href='#NoNull'>[NoNull]</a>
              extended attribute <span class='rfc2119'>MUST</span> take no argument.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface that has one
                attribute with the <a class='xattr' href='#NoNull'>[NoNull]</a>
                extended attribute, and one operation with an argument that has
                the extended attribute:
              </p>
              <x:codeblock language='idl'>interface Dog {
  [NoNull] attribute DOMString name;
  attribute DOMString shortName;

  boolean isMemberOfBreed([NoNull] in DOMString breedName);
};</x:codeblock>
              <p>
                An ECMAScript implementation implementing the <span class='idltype'>Dog</span>
                interface would not allow the <span class='esvalue'>null</span> value to
                be assigned to the <span class='prop'>name</span> property or passed as the
                argument to the <span class='prop'>isMemberOfBreed</span> function:
              </p>
              <x:codeblock language='es'>var d = getDog();         <span class='comment'>// Assume d is a host object implementing the Dog interface.</span>

d.name = null;            <span class='comment'>// This assigns the string "null" to the .name property.</span>
d.isMemberOfBreed(null);  <span class='comment'>// This passes the string "null" to the isMemberOfBreed function.</x:codeblock></span>
            </div>
          </div>
          -->

          <!--
          <div id='Overloads' class='section'>
            <h4>[Overloads]</h4>

            <p>
              If the <a class='xattr' href='#Overloads'>[Overloads]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-operation'>operation</a>, it indicates that
              the operation is to be considered to overload the operation
              with the <a class='nt' href='#prod-identifier'>identifier</a>
              given as the extended attribute argument.
              The extent to which a language supports method overloading
              determines whether an object implementing an interface with
              overloaded operations must implement the operation using the
              overloaded name or the original name, and is specific to the
              language binding.
            </p>
            <p>
              The <a class='xattr' href='#Overloads'>[Overloads]</a>
              extended attribute <span class='rfc2119'>MUST</span> take a single argument,
              an <a class='terminal' href='#prod-identifier'>identifier</a>,
              which <span class='rfc2119'>MUST</span> be the <a class='nt' href='#prod-identifier'>identifier</a>
              of another operation defined on the <a class='dfnref' href='#dfn-interface'>interface</a>,
              which this operation overloads.  The
              <a class='terminal' href='#prod-identifier'>identifier</a> <span class='rfc2119'>MUST NOT</span>
              identify an operation that itself is declared with an
              <a class='xattr' href='#Overloads'>[Overloads]</a> extended
              attribute.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface with
                overloaded operations:
              </p>
              <x:codeblock language='idl'>interface Person;

interface PersonFactory {
  Person createPerson();
  [Overloads=createPerson] Person createPersonWithAge(in short age);
};</x:codeblock>
              <p>
                Since the ECMAScript binding allows overloading, a host object
                implementing the <span class='idltype'>PersonFactory</span>
                interface will have a single property <span class='prop'>createPerson</span>:
              </p>
              <x:codeblock language='es'>var f = getFactory();          <span class='comment'>// Assume f is a host object implementing the PersonFactory interface.</span>

typeof f.createPerson;         <span class='comment'>// Evaluates to "function".</span>
typeof f.createPersonWithAge;  <span class='comment'>// Evaluates to "undefined".</span>

var p1 = f.createPerson();     <span class='comment'>// Corresponds to the createPerson operation.</span>
var p2 = f.createPerson(26);   <span class='comment'>// Corresponds to the createPersonWithAge operation.</x:codeblock></span>
              <p>
                However, a hypothetical C language binding would not, since
                C does not support overloading.  Separate functions would likely
                be used for the two operations:
              </p>
              <x:codeblock language='c'>PersonFactory* f = getFactory();

Person* p1 = PersonFactory_createPerson(f);             <span class='comment'>// Corresponds to the createPerson operation.</span>
Person* p2 = PersonFactory_createPersonWithAge(f, 26);  <span class='comment'>// Corresponds to the createPersonWithAge operation.</x:codeblock></span>
            </div>
          </div>
          -->

          <div id='Prefix' class='section'>
            <h4>[Prefix]</h4>

            <p>
              If the <a class='xattr' href='#Prefix'>[Prefix]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-module'>module</a>,
              it affects the name of the language binding specific namespacing
              construct the module will correspond to.  See the definition of a module’s
              <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a> for
              details.
            </p>
            <p>
              The <a class='xattr' href='#Prefix'>[Prefix]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-scoped-name'>take a scoped name</a>.
            </p>

            <div class='example'>
              <p>
                See <a href='#java-modules'>section <?sref java-modules?></a> for an
                example of the use of <a class='xattr' href='#Prefix'>[Prefix]</a>.
              </p>
            </div>
          </div>


        </div>
      </div>

      <div id='ecmascript-binding' class='section'>
        <h2>ECMAScript binding</h2>

        <p>
          This section describes how definitions written with the IDL defined in
          <a href='#idl'>section <?sref idl?></a> correspond to particular constructs
          in ECMAScript 5th edition.  Section numbers in this section refer to
          sections of <cite>ECMAScript Language Specification, 5th Edition</cite>
          <a href="#ref-ECMA-262">[ECMA-262]</a>.
        </p>
        <p>
          Objects defined in this section have internal properties as described in section 8.12
          unless otherwise specified, in which case one or more of the following are
          redefined in accordance with the rules for host objects:
          <span class="prop">[[Call]]</span>,
          <span class="prop">[[DefineOwnProperty]]</span>,
          <span class="prop">[[Delete]]</span> and
          <span class="prop">[[HasInstance]]</span>.
        </p>
        <p>
          If a value for the internal property
          <span class='prop'>[[Class]]</span> is not given for a particular
          object, its value is implementation specific.
        </p>
        <p>
          Unless otherwise specified, the <span class='prop'>[[Extensible]]</span> internal property
          of objects defined in this section has the value <span class='esvalue'>true</span>.
        </p>
        <p>
          Unless otherwise specified, the <span class='prop'>[[Prototype]]</span> internal property
          of objects defined in this section is the <span class='esvalue'>Object</span> prototype object.
        </p>
        <div class='ednote'>
          <p>We perhaps should specify which global object’s <span class='esvalue'>Object</span> prototype
            object that is, and add spec hooks to allow cross-origin property accesses to effectively
            create separate prototype objects in the window that accesses the property.
            <a href='http://www.w3.org/mid/2A8DF591-6229-44E3-B0D4-A00450E40CE1@apple.com'>(Mail.)</a>
          </p>
        </div>
        <p>
          If an object is defined to be a <dfn id='dfn-function-object'>function object</dfn>, then
          it has characteristics as follows:
        </p>
        <ul>
          <li>Its <span class='prop'>[[Prototype]]</span> internal property is the <span class='esvalue'>Function</span> prototype object.</li>
          <li>Its <span class='prop'>[[Get]]</span> internal property is set as described in section 15.3.5.4.</li>
          <li>Its <span class='prop'>[[Construct]]</span> internal property is set as described in section 13.2.2.</li>
          <li>Its <span class='prop'>[[HasInstance]]</span> internal property is set as described in section 15.3.5.3, unless otherwise specified.</li>
          <li>Its <span class='prop'>[[Class]]</span> internal property is <span class='esstring'>"Function"</span>, unless otherwise specified.</li>
        </ul>
        <p>
          Algorithms in this section use the conventions described in
          section 5.2 and the ToBoolean, ToNumber, ToUint16, ToInt32, ToUint32, ToString and
          ToObject operators referenced in this section are defined in section 9.
        </p>

        <div id='es-type-mapping' class='section'>
          <h3>ECMAScript type mapping</h3>

          <p>
            This section describes how types in the IDL map to types in ECMAScript.
          </p>
          <!--
          <p>
            <dfn id='dfn-pass-to-host-object'>Passing a value to a host object expecting type <var>T</var></dfn>
            is used in this sub-section to describe passing an ECMAScript value as an argument to a function whose corresponding
            <a class='dfnref' href='#dfn-operation'>operation</a> in the IDL specifies that
            the argument is of type <var>T</var>, or assigning to a property whose corresponding
            <a class='dfnref' href='#dfn-attribute'>attribute</a> or
            <a class='dfnref' href='#dfn-exception-member'>exception member</a> in the IDL
            is of type <var>T</var>.  Conversely, <dfn id='dfn-return-from-host-object'>returning a value of type
              <var>T</var> from a host object</dfn> is used to describe obtaining the ECMAScript return value
            from a function whose corresponding operation in the IDL specifies a
            <a class='dfnref' href='#dfn-return-type'>return type</a> <var>T</var>,
            or retrieving a property whose corresponding attribute or exception member in the IDL is of type <var>T</var>.
          </p>
          -->
          <p>
            Each sub-section below describes how values of a given IDL type are represented
            in ECMAScript.  For each IDL type, it is described how ECMAScript values are
            <dfn id='dfn-convert-ecmascript-to-idl-value'>converted to an IDL value</dfn>
            when passed to a host object expecting that type, and how IDL values
            of that type are <dfn id='dfn-convert-idl-to-ecmascript-value'>converted to ECMAScript values</dfn>
            when returned from a host object.
          </p>

          <div id='es-any' class='section'>
            <h4>any</h4>

            <p>
              Since the IDL <a class='idltype' href='#idl-any'>any</a> type
              is the union of all other IDL types, it can correspond to any
              ECMAScript value type.
            </p>
            <p>
              How to <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>convert an ECMAScript value</a> to an IDL <span class='idltype'>any</span> value depends on the type of the
              ECMAScript value:
            </p>
            <dl class='switch'>
              <dt>The <span class='esvalue'>undefined</span> value</dt>
              <dd>
                The IDL value is an
                <a class='idltype' href='#idl-object'>object</a> reference
                to a special object that represents the ECMAScript
                <span class='esvalue'>undefined</span> value.
              </dd>
              <dt>The <span class='esvalue'>null</span> value</dt>
              <dd>
                The IDL value is the <span class='idlvalue'>null</span>
                <a class='idltype' href='#idl-object'>object</a> reference.
              </dd>
              <dt>A <span class='estype'>Boolean</span> value</dt>
              <dd>
                The IDL value is the
                <a class='idltype' href='#idl-boolean'>boolean</a>
                value that represents the same truth value.
              </dd>
              <dt>A <span class='estype'>Number</span> value</dt>
              <dd>
                The IDL value is that which is obtained
                by following the rules for converting the
                <span class='estype'>Number</span> to an IDL
                <a class='idltype' href='#idl-double'>double</a> value,
                as described in <a href='#es-double'>section <?sref es-double?></a>,
                <?sdir es-double?>.
              </dd>
              <dt>A <span class='estype'>String</span> value</dt>
              <dd>
                The IDL value is that which is obtained
                by following the rules for converting the
                <span class='estype'>String</span> to an IDL
                <a class='idltype' href='#idl-DOMString'>DOMString</a> value,
                as described in <a href='#es-DOMString'>section <?sref es-DOMString?></a>,
                <?sdir es-DOMString?>.
              </dd>
              <dt>An <span class='estype'>object</span> value</dt>
              <dd>
                The IDL value is an
                <a class='idltype' href='#idl-object'>object</a> value that
                references the same object.
              </dd>
            </dl>
            <p>
              An IDL <a class='idltype' href='#idl-any'>any</a> value is
              <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converted to an ECMAScript value</a>
              as follows.  If the value is an <a class='idltype' href='#idl-object'>object</a>
              reference to a special object that represents an ECMAScript <span class='esvalue'>undefined</span>
              value, then it is converted to the ECMAScript
              <span class='esvalue'>undefined</span> value.  Otherwise,
              the rules for converting the specific type of the IDL value
              are performed.
            </p>
          </div>

          <div id='es-void' class='section'>
            <h4>void</h4>

            <p>
              The only place that the <a class='idltype' href='#idl-void'>void</a> type may appear
              in IDL is as the <a class='dfnref' href='#dfn-return-type'>return type</a> of an
              <a class='dfnref' href='#dfn-operation'>operation</a>.  Functions on host objects
              that implement an operation whose IDL specifies a
              <a class='idltype' href='#idl-void'>void</a> return type <span class='rfc2119'>MUST</span> return the
              <span class='esvalue'>undefined</span> value.
            </p>
            <p>
              ECMAScript functions that implement an operation whose IDL
              specifies a <a class='idltype' href='#idl-void'>void</a> return type
              <span class='rfc2119'>MAY</span> return any value, which will be discarded.
            </p>
          </div>

          <div id='es-boolean' class='section'>
            <h4>boolean</h4>

            <p>
              IDL <a class='idltype' href='#idl-boolean'>boolean</a> values are represented by
              ECMAScript <span class='estype'>Boolean</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>boolean</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the result of computing ToBoolean(<var>V</var>).</li>
              <li>Return the IDL <a class='idltype' href='#idl-boolean'>boolean</a> value is the one that represents the same truth value as the ECMAScript <span class='estype'>Boolean</span> value <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting
                an IDL <span class='idltype'>boolean</span> value to an ECMAScript
                value</a> is a <span class='estype'>Boolean</span> that
              represents the same truth value as the IDL
              <span class='idltype'>boolean</span> value.
            </p>
          </div>

          <div id='es-octet' class='section'>
            <h4>octet</h4>

            <p>
              IDL <a class='idltype' href='#idl-octet'>octet</a> values are represented by
              integer ECMAScript <span class='estype'>Number</span> values in the range [0, 255].
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>octet</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Initialize <var>x</var> to ToNumber(<var>V</var>).</li>
              <li>If <var>x</var> is <span class='esvalue'>NaN</span>, +0, −0, +∞, or −∞, then return the IDL <span class='idltype'>octet</span> value that represents 0.</li>
              <li>Set <var>x</var> to sign(<var>x</var>) * floor(abs(<var>x</var>)).</li>
              <li>Set <var>x</var> to <var>x</var> modulo 2<sup>8</sup>.</li>
              <li>Return the IDL <span class='idltype'>octet</span> value that represents the same numeric value as <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>octet</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that represents
              the same numeric value as the IDL
              <span class='idltype'>octet</span> value.
            </p>
          </div>

          <div id='es-short' class='section'>
            <h4>short</h4>

            <p>
              IDL <a class='idltype' href='#idl-short'>short</a> values are represented by integer
              ECMAScript <span class='estype'>Number</span> values in the range [−32768, 32767].
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>short</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Initialize <var>x</var> to ToNumber(<var>V</var>).</li>
              <li>If <var>x</var> is <span class='esvalue'>NaN</span>, +0, −0, +∞, or −∞, then return the IDL <span class='idltype'>short</span> value that represents 0.</li>
              <li>Set <var>x</var> to sign(<var>x</var>) * floor(abs(<var>x</var>)).</li>
              <li>Set <var>x</var> to <var>x</var> modulo 2<sup>16</sup>.</li>
              <li>If <var>x</var> ≥ 2<sup>15</sup>, return the IDL <span class='idltype'>short</span> value that represents the same numeric value as <var>x</var> − 2<sup>16</sup>.
                Otherwise, return the IDL <span class='idltype'>short</span> value that represents the same numeric value as <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>short</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that represents the
              same numeric value as the IDL
              <span class='idltype'>short</span> value.
            </p>
          </div>

          <div id='es-unsigned-short' class='section'>
            <h4>unsigned short</h4>

            <p>
              IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> values are represented by integer
              ECMAScript <span class='estype'>Number</span> values in the range [0, 65535].
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>unsigned short</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be ToUint16(<var>V</var>).</li>
              <li>Return the IDL <span class='idltype'>unsigned short</span> value that represents the same numeric value as <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>unsigned short</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>unsigned short</span> value.
            </p>
          </div>

          <div id='es-long' class='section'>
            <h4>long</h4>

            <p>
              IDL <a class='idltype' href='#idl-long'>long</a> values are represented by integer
              ECMAScript <span class='estype'>Number</span> values in the range [−2147483648, 2147483647].
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>long</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be ToInt32(<var>V</var>).</li>
              <li>Return the IDL <span class='idltype'>long</span> value that represents the same numeric value as <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>long</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>long</span> value.
            </p>
          </div>

          <div id='es-unsigned-long' class='section'>
            <h4>unsigned long</h4>

            <div class='ednote'>
              <p>Change this (and unsigned short) <a href='http://krijnhoetmer.nl/irc-logs/whatwg/20090714#l-102'>according to IRC notes</a> and <a href='http://www.w3.org/mid/Pine.LNX.4.62.0907140132530.9397@hixie.dreamhostps.com'>mail</a>.</p>
            </div>
            <p>
              IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> values are represented by integer
              ECMAScript <span class='estype'>Number</span> values in the range [0, 4294967295].
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>unsigned long</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be ToUint32(<var>V</var>).</li>
              <li>Return the IDL <span class='idltype'>unsigned long</span> value that represents the same numeric value as <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>unsigned long</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>unsigned long</span> value.
            </p>
          </div>

          <div id='es-long-long' class='section'>
            <h4>long long</h4>

            <p>
              IDL <a class='idltype' href='#idl-long-long'>long long</a> values are represented by
              ECMAScript <span class='estype'>Number</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>long long</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Initialize <var>x</var> to ToNumber(<var>V</var>).</li>
              <li>If <var>x</var> is <span class='esvalue'>NaN</span>, +0, −0, +∞, or −∞, then return the IDL <span class='idltype'>long long</span> value that represents 0.</li>
              <li>Set <var>x</var> to sign(<var>x</var>) * floor(abs(<var>x</var>)).</li>
              <li>Set <var>x</var> to <var>x</var> modulo 2<sup>64</sup>.</li>
              <li>If <var>x</var> is greater than or equal to 2<sup>63</sup>, return the IDL <span class='idltype'>long long</span> value that represents the same numeric value as <var>x</var> − 2<sup>64</sup>.
                Otherwise, return the IDL <span class='idltype'>long long</span> value that represents the same numeric value as <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>long long</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> value that
              represents the closest numeric value to the <span class='idltype'>long long</span>.
              If the <span class='idltype'>long long</span> is in the range
              (−(2<sup>53</sup> − 1), 2<sup>53</sup> − 1), then the <span class='estype'>Number</span>
              will be able to represent exactly the same value as the
              <span class='idltype'>long long</span>.
            </p>
          </div>

          <div id='es-unsigned-long-long' class='section'>
            <h4>unsigned long long</h4>

            <p>
              IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> values are represented by
              ECMAScript <span class='estype'>Number</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>unsigned long long</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Initialize <var>x</var> to ToNumber(<var>V</var>).</li>
              <li>If <var>x</var> is <span class='esvalue'>NaN</span>, +0, −0, +∞, or −∞, then return the IDL <span class='idltype'>unsigned long long</span> value that represents 0.</li>
              <li>Set <var>x</var> to sign(<var>x</var>) * floor(abs(<var>x</var>)).</li>
              <li>Compute <var>x</var> modulo 2<sup>64</sup>.</li>
              <li>Return the IDL <span class='idltype'>unsigned long long</span> value that represents the same numeric value as <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>unsigned long long</span> value to an ECMAScript
              value is a <span class='estype'>Number</span> value that
              represents the closest numeric value to the <span class='idltype'>unsigned long long</span>,
              choosing the numeric value with an <em>even significand</em> if there are
              two equally close values (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.5).
              If the <span class='idltype'>unsigned long long</span> is less than to 2<sup>53</sup> − 1,
              then the <span class='estype'>Number</span> will be able to
              represent exactly the same value as the
              <span class='idltype'>unsigned long long</span>.
            </p>
          </div>

          <div id='es-float' class='section'>
            <h4>float</h4>

            <p>
              IDL <a class='idltype' href='#idl-float'>float</a> values are represented by
              ECMAScript <span class='estype'>Number</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>float</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be ToNumber(<var>V</var>).</li>
              <li>If <var>x</var> is <span class='esvalue'>NaN</span>, then return the IDL <span class='idltype'>float</span> value that represents the IEEE 754 NaN value with the bit pattern 0x7fc00000 <a href='#ref-IEEE-754'>[IEEE-754]</a>.</li>
              <li>
                Let <var>S</var> be the set of finite IEEE 754 single-precision floating
                point values except −0, but with two special values added: 2<sup>128</sup> and
                −2<sup>128</sup>.
              </li>
              <li>
                Let <var>y</var> be the number in <var>S</var> that is closest
                to <var>x</var>, selecting the number with an
                <em>even significand</em> if there are two equally close values
                (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.5).
                (The two special values 2<sup>128</sup> and −2<sup>128</sup>
                are considered to have even significands for this purpose.)
              </li>
              <li>
                If <var>y</var> is 2<sup>128</sup>, return +∞.
              </li>
              <li>
                If <var>y</var> is −2<sup>128</sup>, return −∞.
              </li>
              <li>
                If <var>y</var> is +0 and <var>x</var> is negative, return −0.
              </li>
              <li>
                Return <var>y</var>.
              </li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>float</span> value to an ECMAScript
              value is a <span class='estype'>Number</span>:
            </p>
            <ul>
              <li>
                If the IDL <span class='idltype'>float</span> value is a NaN,
                then the <span class='estype'>Number</span> value is <span class='esvalue'>NaN</span>.
              </li>
              <li>
                Otherwise, the <span class='estype'>Number</span> value is
                the one that represents the same numeric value as the IDL
                <span class='idltype'>float</span> value.
              </li>
            </ul>
          </div>

          <div id='es-double' class='section'>
            <h4>double</h4>

            <p>
              IDL <a class='idltype' href='#idl-double'>double</a> values are represented by
              ECMAScript <span class='estype'>Number</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>double</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be ToNumber(<var>V</var>).</li>
              <li>If <var>x</var> is <span class='esvalue'>NaN</span>, then return the IDL <span class='idltype'>float</span> value that represents the IEEE 754 NaN value with the bit pattern 0x7ff8000000000000 <a href='#ref-IEEE-754'>[IEEE-754]</a>.</li>
              <li>
                Let <var>S</var> be the set of finite IEEE 754 double-precision floating
                point values except −0, but with two special values added: 2<sup>1024</sup> and
                −2<sup>1024</sup>.
              </li>
              <li>
                Let <var>y</var> be the number in <var>S</var> that is closest
                to <var>x</var>, selecting the number with an
                <em>even significand</em> if there are two equally close values
                (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.5).
                (The two special values 2<sup>1024</sup> and −2<sup>1024</sup>
                are considered to have even significands for this purpose.)
              </li>
              <li>
                If <var>y</var> is 2<sup>1024</sup>, return +∞.
              </li>
              <li>
                If <var>y</var> is −2<sup>1024</sup>, return −∞.
              </li>
              <li>
                If <var>y</var> is +0 and <var>x</var> is negative, return −0.
              </li>
              <li>
                Return <var>y</var>.
              </li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>double</span> value to an ECMAScript
              value is a <span class='estype'>Number</span>:
            </p>
            <ul>
              <li>
                If the IDL <span class='idltype'>double</span> value is a NaN,
                then the <span class='estype'>Number</span> value is <span class='esvalue'>NaN</span>.
              </li>
              <li>
                Otherwise, the <span class='estype'>Number</span> value is
                the one that represents the same numeric value as the IDL
                <span class='idltype'>double</span> value.
              </li>
            </ul>
          </div>

          <div id='es-DOMString' class='section'>
            <h4>DOMString</h4>

            <div class='ednote'>
              <p>Make <span class='esvalue'>null</span> default to the empty string? <a href='http://krijnhoetmer.nl/irc-logs/whatwg/20100909#l-47'>(IRC.)</a></p>
            </div>
            <p>
              IDL <a class='idltype' href='#idl-DOMString'>DOMString</a> values
              are represented by ECMAScript <span class='estype'>String</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>DOMString</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>If <var>V</var> is <span class='esvalue'>null</span>
                and the conversion to an IDL value is being performed due
                to any of the following:
                <ul>
                  <li>
                    <var>V</var> is being passed as an <a class='dfnref' href='#dfn-operation'>operation</a>
                    argument that is annotated with the <a class='xattr' href='#TreatNullAs'>[TreatNullAs=EmptyString]</a>,
                  </li>
                  <li>
                    <var>V</var> is being assigned to an <a class='dfnref' href='#dfn-attribute'>attribute</a>
                    annotated with <a class='xattr' href='#TreatNullAs'>[TreatNullAs=EmptyString]</a>,
                  </li>
                  <li>
                    <var>V</var> is being returned from a native object implementation of an
                    operation annotated with <a class='xattr' href='#TreatNullAs'>[TreatNullAs=EmptyString]</a>, or
                  </li>
                  <li>
                    <var>V</var> is being returned from a native object implementation of an
                    attribute annotated with <a class='xattr' href='#TreatNullAs'>[TreatNullAs=EmptyString]</a>,
                  </li>
                </ul>
                then return the <span class='idltype'>DOMString</span>
                value that represents the empty string.
              </li>
              <li>If <var>V</var> is <span class='esvalue'>undefined</span>
                and the conversion to an IDL value is being performed due
                to any of the following:
                <ul>
                  <li>
                    <var>V</var> is being passed as an <a class='dfnref' href='#dfn-operation'>operation</a>
                    argument that is annotated with the <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs=EmptyString]</a>,
                  </li>
                  <li>
                    <var>V</var> is being assigned to an <a class='dfnref' href='#dfn-attribute'>attribute</a>
                    annotated with <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs=EmptyString]</a>,
                  </li>
                  <li>
                    <var>V</var> is being returned from a native object implementation of an
                    operation annotated with <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs=EmptyString]</a>, or
                  </li>
                  <li>
                    <var>V</var> is being returned from a native object implementation of an
                    attribute annotated with <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs=EmptyString]</a>,
                  </li>
                </ul>
                then return the <span class='idltype'>DOMString</span>
                value that represents the empty string.
              </li>
              <li>Let <var>x</var> be ToString(<var>V</var>).</li>
              <li>Return the IDL <a class='idltype' href='#idl-DOMString'>DOMString</a> value that represents the same sequence of characters as the one the ECMAScript <span class='estype'>String</span> value <var>x</var> represents.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>DOMString</span> value to an ECMAScript
              value is the <span class='estype'>String</span>
              value that represents the same sequence of 16 bit code units that the
              IDL <span class='idltype'>DOMString</span> represents.
            </p>
          </div>

          <div id='es-object' class='section'>
            <h4>object</h4>

            <p>
              IDL <a class='idltype' href='#idl-object'>object</a>
              values are represented by ECMAScript <span class='estype'>Object</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>object</span> value
              by running the following algorithm:
            </p>
            <ol class='algorithm'>
              <li>If <var>V</var> is <span class='esvalue'>null</span> or <span class='esvalue'>undefined</span>, then return the IDL <span class='idltype'>object</span> value <span class='idlvalue'>null</span>.</li>
              <li>Let <var>x</var> be ToObject(<var>V</var>).</li>
              <li>Return the IDL <span class='idltype'>object</span> value that is a reference to the same object as <var>x</var>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <span class='idltype'>object</span> value to an ECMAScript
              value is:
            </p>
            <ul>
              <li>
                If the IDL <span class='idltype'>object</span> value is
                <span class='idlvalue'>null</span>, then the ECMAScript value
                is the <span class='esvalue'>null</span> value.
              </li>
              <li>
                Otherwise, the ECMAScript value is an <span class='estype'>Object</span>
                value that represents a reference to the same object that the
                IDL <span class='idltype'>object</span> represents.
              </li>
            </ul>
          </div>

          <div id='es-interface' class='section'>
            <h4>Interface types</h4>

            <p>
              IDL <a href='#idl-interface'>interface type</a>
              values are represented by ECMAScript <span class='estype'>Object</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <a href='#idl-interface'>interface type</a> value
              by running the following algorithm (where <var>I</var> is the <a class='dfnref' href='#dfn-interface'>interface</a>):
            </p>
            <ol class='algorithm'>
              <li>If <var>V</var> is <span class='esvalue'>null</span> or <span class='esvalue'>undefined</span>, then return the IDL <a href='#idl-interface'>interface type</a> value <span class='idlvalue'>null</span>.</li>
              <li>If <var>V</var> is a host object that implements <var>I</var>, then return the IDL <a href='#idl-interface'>interface type</a> value that represents a reference to that host object.</li>
              <li>Let <var>x</var> be ToObject(<var>V</var>).</li>
              <li>If <var>x</var> is a native object that is considered to implement <var>I</var> according to the rules in <a href='#native-objects'>section <?sref native-objects?></a>, then return the IDL <a href='#idl-interface'>interface type</a> value that represents a reference to that native object.</li>
              <li>Throw a <span class='esvalue'>TypeError</span>.</li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <a href='#idl-interface'>interface type</a>
              value to an ECMAScript value is:
            </p>
            <ul>
              <li>
                If the IDL <a href='#idl-interface'>interface type</a> value is
                <span class='idlvalue'>null</span>, then the ECMAScript value
                is the <span class='esvalue'>null</span> value.
              </li>
              <li>
                Otherwise, the ECMAScript value is an <span class='estype'>Object</span>
                value that represents a reference to the same object that the
                IDL <a href='#idl-interface'>interface type</a> value represents.
              </li>
            </ul>
          </div>

          <div id='es-nullable-type' class='section'>
            <h4>Nullable types — <var>T</var>?</h4>

            <div class='ednote'>
              <p>Should interface types not include null and thus be nullable too? <a href='http://www.w3.org/mid/1264704192.14141.1000.camel@localhost'>(Mail.)</a></p>
            </div>
            <p>
              IDL <a class='dfnref' href='#dfn-nullable-type'>nullable type</a> values are represented
              by values of either the ECMAScript type corresponding to the <a class='dfnref' href='#dfn-inner-type'>inner IDL type</a>, or
              the ECMAScript <span class='esvalue'>null</span> value.
            </p>
            <p>
              An ECMAScript value <var>V</var> is
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <a class='dfnref' href='#dfn-nullable-type'>nullable type</a> value as follows:
            </p>
            <ol class='algorithm'>
              <li>
                If <var>V</var> is <span class='esvalue'>null</span>, then return the IDL
                <a class='dfnref' href='#dfn-nullable-type'>nullable type</a> value <span class='idlvalue'>null</span>.
              </li>
              <li>
                Otherwise, if <var>V</var> is <span class='esvalue'>undefined</span> and the
                IDL type being converted to is <span class='idltype'>DOMString?</span>, then:
                <ol>
                  <li>
                    If the conversion to an IDL value is being performed due
                    to any of the following:
                    <ul>
                      <li>
                        <var>V</var> is being passed as an <a class='dfnref' href='#dfn-operation'>operation</a>
                        argument that is annotated with the <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>,
                      </li>
                      <li>
                        <var>V</var> is being assigned to an <a class='dfnref' href='#dfn-attribute'>attribute</a>
                        annotated with <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>,
                      </li>
                      <li>
                        <var>V</var> is being returned from a native object implementation of an
                        operation annotated with <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>, or
                      </li>
                      <li>
                        <var>V</var> is being returned from a native object implementation of an
                        attribute annotated with <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>,
                      </li>
                    </ul>
                    then:
                    <ol>
                      <li>
                        If the argument given to <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>
                        is <span class='idlident'>EmptyString</span>, then return the <span class='idltype'>DOMString?</span>
                        value that represents the empty string.
                      </li>
                      <li>
                        Otherwise, the argument given to <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>
                        is <span class='idlident'>Null</span>.  Return the <span class='idlvalue'>null</span>
                        <span class='idltype'>DOMString?</span> value.
                      </li>
                    </ol>
                  </li>
                </ol>
              </li>
              <li>
                Otherwise, return the result of 
                <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a> <var>V</var>
                to the <a class='dfnref' href='#dfn-inner-type'>inner IDL type</a>.
              </li>
            </ol>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              an IDL <a class='dfnref' href='#dfn-nullable-type'>nullable type</a> value to an ECMAScript value is:
            </p>
            <ul>
              <li>
                If the IDL <a class='dfnref' href='#dfn-nullable-type'>nullable type</a> value is <span class='idlvalue'>null</span>,
                then the ECMAScript value is <span class='esvalue'>null</span>.
              </li>
              <li>
                Otherwise, the IDL <a class='dfnref' href='#dfn-nullable-type'>nullable type</a> value is the result of
                <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                the ECMAScript value to the <a class='dfnref' href='#dfn-inner-type'>inner IDL type</a>.
              </li>
            </ul>
          </div>

          <div id='es-sequence' class='section'>
            <h4>Sequences — sequence&lt;<var>T</var>&gt;</h4>

            <p>
              IDL <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> values are represented by
              ECMAScript <span class='estype'>Array</span> values.
            </p>
            <p>
              An ECMAScript value <var>V</var> is <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> value as follows:
            </p>
            <ol class='algorithm'>
              <li>If <var>V</var> is <span class='esvalue'>null</span> or <span class='esvalue'>undefined</span>,
                then return a sequence of length zero.</li>
              <li>Let <var>A</var> be the result of calling ToObject(<var>V</var>).</li>
              <li>Let <var>length</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>A</var> with property name <span class='prop'>length</span>.</li>
              <li>Let <var>n</var> be the result of calling ToUint32(<var>length</var>).</li>
              <li>Initialize <var>S</var><sub>0..<var>n</var>−1</sub> to be an IDL sequence with elements of type <var>T</var>, where each element is uninitialized.</li>
              <li>Initialize <var>i</var> to be 0.</li>
              <li>While <var>i</var> &lt; <var>n</var>:
                <ol>
                  <li>Let <var>P</var> be the result of calling ToString(<var>i</var>).</li>
                  <li>Let <var>E</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>A</var> with property name <var>P</var>.</li>
                  <li>Set <var>S</var><sub><var>i</var></sub> to the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                    <var>E</var> to an IDL value of type <var>T</var>.</li>
                  <li>Set <var>i</var> to <var>i</var> + 1.</li>
                </ol>
              </li>
              <li>Return <var>S</var>.</li>
            </ol>
            <p>
              An IDL sequence value <var>S</var><sub>0..<var>n</var>−1</sub> of type
              <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> is
              <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converted</a>
              to an ECMAScript <span class='estype'>Array</span> object as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>A</var> be a new <span class='estype'>Array</span> object created as if by the expression <code>[]</code>.</li>
              <li>Initialize <var>i</var> to be 0.</li>
              <li>While <var>i</var> &lt; <var>n</var>:
                <ol>
                  <li>Let <var>E</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                    <var>S</var><sub><var>i</var></sub> to an ECMAScript value.</li>
                  <li>Let <var>P</var> be the result of calling ToString(<var>i</var>).</li>
                  <li>Call <span class='prop'>[[Put]]</span> on <var>A</var> with property name <var>P</var> and value <var>E</var>.</li>
                  <li>Set <var>i</var> to <var>i</var> + 1.</li>
                </ol>
              </li>
              <li>Return <var>A</var>.</li>
            </ol>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-interface'>interface</a> defines
                an <a class='dfnref' href='#dfn-attribute'>attribute</a> of a sequence
                type as well as an <a class='dfnref' href='#dfn-operation'>operation</a>
                with an argument of a sequence type.
              </p>
              <x:codeblock language='idl'>interface Canvas {

  readonly attribute sequence&lt;DOMString> supportedImageCodecs;

  void drawPolygon(in sequence&lt;float> coordinates);

  <span class='comment'>// ...</span>
};</x:codeblock>
              <p>
                In an ECMAScript implementation of this interface, an <span class='estype'>Array</span>
                object with elements of type <span class='estype'>String</span> is used to
                represent a <span class='idltype'>sequence&lt;DOMString></span>, while an
                <span class='estype'>Array</span> with elements of type <span class='estype'>Number</span>
                represents a <span class='idltype'>sequence&lt;float></span>.  The
                <span class='estype'>Array</span> objects are effectively passed by
                value; every time the <span class='prop'>supportedImageCodecs</span>
                property is fetched a new <span class='estype'>Array</span> is
                returned, and whenever an <span class='estype'>Array</span> is
                passed to <span class='prop'>drawPolygon</span> a reference to
                it will never be kept.
              </p>
              <x:codeblock language='es'>
<span class='comment'>// Obtain an instance of Canvas.  Assume that the supportedImageCodecs</span>
<span class='comment'>// IDL attribute is a sequence with two DOMString values: "image/png"</span>
<span class='comment'>// and "image/svg+xml".</span>
var canvas = getCanvas();

<span class='comment'>// An Array object of length 2.</span>
canvas.supportedImageCodecs;

<span class='comment'>// Evaluates to "image/png".</span>
canvas.supportedImageCodecs[0];

<span class='comment'>// Each time canvas.supportedImageCodecs is evaluated, it returns a</span>
<span class='comment'>// new Array object.  Thus modifying the returned Array will not</span>
<span class='comment'>// affect the sequence that is the value of the IDL attribute.</span>
canvas.supportedImageCodecs[0] = "image/jpeg";

<span class='comment'>// Still evaluates to "image/png".</span>
canvas.supportedImageCodecs[0];

<span class='comment'>// This evaluates to false.</span>
canvas.supportedImageCodecs == canvas.supportedImageCodecs;


<span class='comment'>// An Array of Numbers...</span>
var a = [0, 0, 100, 0, 50, 62.5];

<span class='comment'>// ...can be passed to a host object expecting a sequence&lt;float>.</span>
canvas.drawPolygon(a);

<span class='comment'>// Each element will be converted to a float by first calling ToNumber().</span>
<span class='comment'>// So the following call is equivalent to the previous one, except that</span>
<span class='comment'>// "hi" will be alerted before drawPolygon() returns.</span>
canvas.drawPolygon
  ([false, '',
    { valueOf: function() { alert('hi'); return 100 } }, 0,
    '50', new Number(62.5)]);

<span class='comment'>// Modifying an Array that was passed to drawPolygon() is guaranteed not to</span>
<span class='comment'>// have an effect on the Canvas, since the Array is effectively passed by value.</span>
a[0] = 20;</x:codeblock>
            </div>
            <!--
            <div class='ignore'>
              <p>
                IDL <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> values are represented by
                ECMAScript <span class='estype'>Object</span> values with special properties.
              </p>
              <p>
                Values <a class='dfnref' href='#dfn-pass-to-host-object'>passed to a host object</a> expecting a
                <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>
                <span class='rfc2119'>MUST</span> be objects with a <span class='prop'>length</span> property whose
                value, after being converted to a <span class='estype'>Number</span> by the
                ToUint32 operator, is a non-negative integer that specifies the number
                of elements in the sequence.  This number <span class='rfc2119'>MUST</span> also be equal
                to the result of passing the original <span class='prop'>length</span> property value to the ToNumber algorithm.
                Assigning to the <span class='prop'>length</span> property a non-negative
                integer <span class='estype'>Number</span> <span class='rfc2119'>MUST</span> change the length of the sequence
                to be the given number.  If the sequence is lengthened, new elements <span class='rfc2119'>MUST</span> be given
                the value that the <span class='esvalue'>undefined</span> value is converted to
                when handling it according to the rules in this section for the type <var>T</var>.
                If the sequence is shortened, the values beyond the new length of the sequence
                are lost.
                The object representing the sequence <span class='rfc2119'>MUST</span> return the element in
                the sequence at position <var>n</var> when its
                <span class='prop'>[[Get]]</span> internal method is invoked with
                <var>n</var> as its argument.
              </p>
              <p>
                Note that an ECMAScript <span class='estype'>Array</span>
                is an object that matches this description.  Implementations are free,
                however, to use a host object to implement the sequence in the
                interests of efficiency.
              </p>
              <p>
                When the host object
                gets an element of the sequence using the <span class='prop'>[[Get]]</span> method,
                the returned value <span class='rfc2119'>MUST</span> first be handled according to
                the rules in this section for the type <var>T</var>.
              </p>
              <p>
                If a host object expecting a
                <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>
                is passed a value which is not an object that conforms to the above rules
                (for example, it does not have a <span class='prop'>length</span> property), then
                a <span class='estype'>TypeError</span> exception <span class='rfc2119'>MUST</span> be thrown.
              </p>
              <p>
                While sequences are passed by reference (being objects), it is
                of course up to the interface designer whether, for example,
                after assigning a sequence to a property on a host object
                that same seqence object is returned when getting the property.
                The behavior of storing sequences in the host object in this
                manner should be made clear in prose describing the interface.
              </p>
              <!- p>
                Sequences are passed by reference.  If a reference to a sequence
                passed to a host object is kept (whether internally or as the
                value of an attribute), and the passed sequence is not an ECMAScript
                <span class='estype'>Array</span> object, the kept reference must
                be a newly created ECMAScript <span class='estype'>Array</span> object
                whose contents is the elements of the sequence.
              </p>
              <div class='ednote'>
                <p>Change the above para according to comments in
                  <a href='http://www.w3.org/mid/op.tumn9hy664w2qv@annevk-t60.oslo.opera.com'>this thread</a>.</p>
              </div ->
              <div class='ednote'>
                <p>
                  Should there be a way to declare a sequence whose length cannot be changed
                  from script?
                </p>
              </div>
            </div>
            -->
          </div>

          <div id='es-array' class='section'>
            <h4>Arrays — <var>T</var>[]</h4>

            <p>
              IDL array values are represented by references to objects known
              as <dfn id='dfn-array-host-object'>array host objects</dfn>, with particular
              characteristics that allow them to behave similarly to native <span class='estype'>Array</span>
              objects.
            </p>
            <p>
              The value of the internal <span class='prop'>[[Prototype]]</span> property of an
              <a class='dfnref' href='#dfn-array-host-object'>array host object</a>
              <span class='rfc2119'>MUST</span> be the
              <a class='dfnref' href='#dfn-array-host-object-prototype'>array host object prototype object</a>,
              which is defined below.
            </p>
            <p>
              The value of the internal <span class='prop'>[[Class]]</span> property of an
              array host object <span class='rfc2119'>MUST</span> be
              the <a class='dfnref' href='#dfn-type-name'>type name</a> of the array
              type.
            </p>
            <p>
              Array host objects <span class='rfc2119'>MUST</span> have a property named <span class='esstring'>"length"</span>
              whose value is a <span class='estype'>Number</span> that is the length
              of the array.  If the array is <a class='dfnref' href='#dfn-fixed-length'>fixed length</a>,
              then this property has attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>.
              Otherwise, the array is <a class='dfnref' href='#dfn-variable-length'>variable length</a>,
              and the property has attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>.
            </p>
            <p>
              Array host objects <span class='rfc2119'>MUST</span> always have a property named
              ToString(<var>i</var>) for every integer index 0 &lt; <var>i</var> &lt; <var>n</var>,
              where <var>n</var> is the length of the array.  These properties have attributes
              <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>true</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span> if the array is
              <a class='dfnref' href='#dfn-read-only-array'>read only</a> and
              <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>true</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span> otherwise.  The values of these properties
              <span class='rfc2119'>MUST</span> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              the value of the array element at the corresponding index to an ECMAScript value.
            </p>
            <p>
              Array host objects <span class='rfc2119'>MUST</span> have a property named
              <span class='esstring'>"toString"</span> with attributes
              <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>true</span> }</span>
              and whose value
              is an object with an internal <span class='prop'>[[Call]]</span> method that behaves as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>N</var> be the result of invoking <span class='prop'>[[Get]]</span> on <span class='esvalue'>this</span>
                with <span class='esstring'>"length"</span> as the property name.</li>
              <li>Initialize <var>i</var> to 0.</li>
              <li>Initialize <var>s</var> to be an empty sequence of 16 bit code units.</li>
              <li>While <var>i</var> &lt; ToUint32(<var>N</var>):
                <ol>
                  <li>If <var>i</var> ≠ 0, then append to the end of <var>s</var> the 16 bit code unit 0x002C (the UTF-16 encoding of the <span class='char'>U+002C COMMA (",")</span> character).</li>
                  <li>Let <var>V</var> be the result of invoking <span class='prop'>[[Get]]</span> on <span class='esvalue'>this</span>
                    with property name ToString(<var>i</var>).</li>
                  <li>Append to the end of <var>s</var> the sequence of 16 bit code units that ToString(<var>V</var>) represents.</li>
                  <li>Set <var>i</var> to be <var>i</var> + 1.</li>
                </ol>
              </li>
              <li>Return the <span class='estype'>String</span> value that represents the same sequence of 16 bit code units as <var>s</var>.</li>
            </ol>
            <p>
              The <span class='esstring'>"toString"</span> object <span class='rfc2119'>MUST</span> itself
              have a property named <span class='esstring'>"length"</span>
              with attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>
              whose value is the <span class='estype'>Number</span> value 0.
            </p>

            <p>
              Array host objects have an internal <span class='prop'>[[DefineOwnProperty]]</span>
              method <a href='#array-host-object-defineownproperty'>as defined in section <?sref array-host-object-defineownproperty?></a>
              <?sdir array-host-object-defineownproperty?>.
            </p>

            <p>
              An ECMAScript value <var>V</var> is <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted</a>
              to an IDL array value of type <span class='idltype'><var>T</var>[]</span> as follows:
            </p>
            <ul>
              <li>If <var>V</var> is an <a class='dfnref' href='#dfn-array-host-object'>array host object</a>,
                then the IDL array value is the array value that the array host object represents.</li>
              <li>Otherwise, if <var>V</var> is <span class='esvalue'>null</span> or <span class='esvalue'>undefined</span>, then
                the IDL array value is <span class='idlvalue'>null</span>.</li>
              <li>Otherwise, if <var>V</var> is a native object, then the IDL array value is determined as follows:
                <ol class='algorithm'>
                  <li>Initialize <var>n</var> to be the result of calling <span class='prop'>[[Get]]</span> on <var>V</var> with property name <span class='esstring'>"length"</span>.</li>
                  <li>Set <var>n</var> to ToUint32(<var>n</var>).</li>
                  <li>Initialize <var>E</var><sub>0..<var>n</var></sub> to be a list of IDL values.</li>
                  <li>Initialize <var>i</var> to be 0.</li>
                  <li>While <var>i</var> &lt; <var>n</var>:
                    <ol>
                      <li>Let <var>x</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>V</var> with
                        property name ToString(<var>i</var>).</li>
                      <li>Set <var>E</var><sub><var>i</var></sub> to be the result of
                        <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                        <var>x</var> to an IDL value of type <var>T</var>.</li>
                      <li>Set <var>i</var> to <var>i</var> + 1.</li>
                    </ol>
                  </li>
                  <li>The IDL array value is a <a class='dfnref' href='#dfn-fixed-length'>fixed length</a>
                    array of length <var>n</var> whose values are <var>E</var><sub>0..<var>n</var></sub>.</li>
                </ol>
              </li>
              <li>Otherwise, throw a <span class='estype'>TypeError</span>.</li>
            </ul>

            <p>
              An IDL array value <var>V</var> of type <span class='idltype'><var>T</var>[]</span> is
              <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converted</a> to an
              ECMAScript value as follows:
            </p>
            <ul>
              <li>If <var>V</var> is <span class='idlvalue'>null</span>, then the ECMAScript value is
                the <span class='esvalue'>null</span> value.</li>
              <li>Otherwise, if <var>V</var> is already represented by an <a class='dfnref' href='#dfn-array-host-object'>array host object</a>,
                then the ECMAScript value is that array host object.</li>
              <li>Otherwise, the ECMAScript value is a newly created array host object that represents <var>V</var>.</li>
            </ul>

            <div class='ednote'>
              <p>Should we somehow allow for the definition of constructors to create array host objects?
                E.g. like <code>new UnsignedShortArray()</code>?</p>
            </div>

            <div class='example'>
              <p>
                The following IDL defines an interface that has an
                <span class='idltype'>unsigned short[]</span> attribute.
              </p>
              <x:codeblock language='idl'>[Constructor]
interface LotteryResults {
  readonly attribute unsigned short[] numbers;
};</x:codeblock>
              <p>
                Assuming that the array has a <a class='dfnref' href='#dfn-fixed-length'>fixed length</a>
                of 6, the following ECMAScript code illustrates how the array
                attribute in the above interface would behave:
              </p>
              <x:codeblock language='es'>var results = new LotteryResults();  <span class='comment'>// results is a new host object</span>
                                     <span class='comment'>// implementing the LotteryResults interface.</span>

var a = [4, 8, 15, 16, 23, 42];      <span class='comment'>// Numbers can be assigned into the array.</span>
for (var i = 0; i &lt; 6; i++) {
  results.numbers[i] = a[i];
}

results.numbers = a;                 <span class='comment'>// This has no effect, since numbers is</span>
                                     <span class='comment'>// read only.</span>

a[0] = 5;                            <span class='comment'>// Change the array.</span>
results.numbers[0];                  <span class='comment'>// Evaluates to 4, since results.numbers is</span>
                                     <span class='comment'>// not a reference to 'a'.</span>

results.numbers[0] = 5;              <span class='comment'>// Modifies the array stored in the host</span>
                                     <span class='comment'>// object.</span>
results.numbers[0];                  <span class='comment'>// Now evaluates to 5.</span>

results.numbers[0] = 6.25;           <span class='comment'>// Assigns 6 to the first element of the array</span>
                                     <span class='comment'>// since that is how 6.5 is converted to an</span>
                                     <span class='comment'>// unsigned short.</span>

results.numbers.length = 7;          <span class='comment'>// Has no effect, since numbers is</span>
                                     <span class='comment'>// fixed length.</span>
results.numbers[6];                  <span class='comment'>// Evaluates to undefined.</span>

results.numbers.slice(0, 2);         <span class='comment'>// Evaluates to an Array [4, 8].</span>

results.numbers.push(108);           <span class='comment'>// Has no effect, since the definition of</span>
                                     <span class='comment'>// push() relies on calling [[Put]] on a</span>
                                     <span class='comment'>// non-existent array index property</span>
                                     <span class='comment'>// and on "length", both of which will</span>
                                     <span class='comment'>// be silently ignored.</span>

delete results.numbers[3];           <span class='comment'>// Has no effect and evaluates to false,</span>
                                     <span class='comment'>// since the array index properties are</span>
                                     <span class='comment'>// non-configurable.</span></x:codeblock>
              <p>
                If passing an <span class='estype'>Array</span> object to a host object
                expecting an IDL array value, a new <a class='dfnref' href='#dfn-array-host-object'>array host object</a>
                will be created to represent an IDL array value determined from that <span class='estype'>Array</span>.
                If the <span class='idltype'>LotteryResults</span> interface is instead defined as:
              </p>
              <x:codeblock language='idl'>[Constructor]
interface LotteryResults {
  attribute unsigned short[] numbers;
};</x:codeblock>
              <p>
                then an <span class='estype'>Array</span> object can be assigned to the
                <span class='prop'>numbers</span> property.  Unless the prose accompanying
                the interface said otherwise, this would result in a
                <a class='dfnref' href='#dfn-fixed-length'>fixed length</a>
                array of whatever length the <span class='estype'>Array</span>
                has being assigned to the IDL attribute.
              </p>
              <x:codeblock language='es'>var results = new LotteryResults();

results.numbers.length;       <span class='comment'>// Evaluates to 6.</span>

var a = [1, 3, 5];

results.numbers = a;          <span class='comment'>// Assigns a fixed length IDL array of length 3 to</span>
                              <span class='comment'>// the numbers attribute.</span>

results.numbers;              <span class='comment'>// This now evaluates to an array host object</span>
                              <span class='comment'>// that represents the fixed length IDL array,</span>
                              <span class='comment'>// not the Array object assigned in the previous</span>
                              <span class='comment'>// statement.</span>

results.numbers.length;       <span class='comment'>// Evaluates to 3.</span></x:codeblock>
            </div>

            <div id='array-host-object-prototype' class='section'>
              <h5>Array host object prototype object</h5>

              <p>
                The <dfn id='dfn-array-host-object-prototype'>array host object prototype object</dfn>
                is an object that is the prototype of every <a class='dfnref' href='#dfn-array-host-object'>array host object</a>.
                It allows functions from the <span class='estype'>Array</span> prototype object
                to be called on array host objects.<!-- while ensuring that those function that
                would modify the length of the array fail appropriately when called on
                <a class='dfnref' href='#dfn-fixed-length'>fixed length</a> arrays.-->
              </p>
              <p>
                The internal <span class='prop'>[[Prototype]]</span> property of
                the array host object prototype object <span class='rfc2119'>MUST</span> be the
                <span class='estype'>Array</span> prototype object.
              </p>
              <div class='note'>
                <p>
                  Note that some of the functions from the <span class='estype'>Array</span> prototype object
                  will not behave on a <a class='dfnref' href='#dfn-fixed-length'>fixed length</a> array
                  host object as they do on an <span class='estype'>Array</span> object, since
                  attempting to assign to the <span class='prop'>length</span> property will fail.
                  Similarly, most of the functions from the <span class='estype'>Array</span>
                  prototype object will not perform any useful operation on
                  <a class='dfnref' href='#dfn-read-only-array'>read only arrays</a>.
                </p>
              </div>
              <!--
              <p>
                The array host object prototype object <span class='rfc2119'>MUST</span>
                have properties
                <span class='prop'>pop</span>,
                <span class='prop'>push</span>,
                <span class='prop'>shift</span>,
                <span class='prop'>splice</span> and
                <span class='prop'>unshift</span>
                with attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>true</span> }</span>
                and whose values are objects whose internal <span class='prop'>[[Call]]</span>
                methods behave as follows, assuming <var>P</var> is the name of
                the property and <var>args</var> is the list of
                argument values passed to <span class='prop'>[[Call]]</span>:
              </p>
              <ol class='algorithm'>
                <li>
                  If <span class='esvalue'>this</span> is a
                  <a class='dfnref' href='#dfn-fixed-length'>fixed length</a>
                  <a class='dfnref' href='#dfn-array-host-object'>array host object</a>,
                  then throw a <span class='estype'>RangeError</span>.
                </li>
                <li>
                  Initialize <var>O</var> be the value of the <span class='prop'>[[Prototype]]</span>
                  property of <span class='esvalue'>this</span>.
                </li>
                <li>
                  Set <var>O</var> to be the result of calling ToObject(<var>O</var>).
                </li>
                <li>
                  Initialize <var>F</var> be the result of calling <span class='prop'>[[Get]]</span>
                  on <var>O</var> with property name <var>P</var>.
                </li>
                <li>
                  Set <var>F</var> be the result of calling ToObject(<var>F</var>).
                </li>
                <li>
                  If <var>F</var> has no <span class='prop'>[[Call]]</span> property,
                  then throw a <span class='estype'>TypeError</span>.
                </li>
                <li>
                  Let <var>R</var> be the result of invoking <span class='prop'>[[Call]]</span>
                  on <var>F</var> with <span class='esvalue'>this</span> as the
                  value of <span class='esvalue'>this</span> and <var>args</var> as
                  the list of arguments.
                </li>
                <li>
                  Return <var>R</var>.
                </li>
              </ol>
              -->
            </div>

            <div id='array-host-object-defineownproperty' class='section'>
              <h5>Array host object [[DefineOwnProperty]] method</h5>

              <p>
                The internal <span class='prop'>[[DefineOwnProperty]]</span> method of every
                <a class='dfnref' href='#dfn-array-host-object'>array host object</a>
                <var>A</var> with element type <var>T</var>
                <span class='rfc2119'>MUST</span> behave as follows,
                assuming <var>P</var> is the property name, <var>Desc</var> is
                the Property Descriptor and <var>Throw</var> is a boolean:
              </p>

              <div class='note'>
                <p>
                  This algorithm does basically the same thing as the one defined for native array instances
                  (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 15.4.5.1), with the exception of ensuring
                  that arrays are never sparse and also that array element values are coerced to the
                  array element type.
                </p>
              </div>

              <ol class='algorithm'>
                <li>Let <var>oldLenDesc</var> be the result of calling the <span class='prop'>[[GetOwnProperty]]</span> internal method of <var>A</var> passing <span class='esstring'>"length"</span> as the argument.</li>

                <li>Initialize <var>oldLen</var> to <var>oldLenDesc</var>.<span class='prop'>[[Value]]</span>.</li>

                <li>If <var>P</var> is <span class='esstring'>"length"</span>, then:
                  <ol>
                    <li>If the <span class='prop'>[[Value]]</span> field of <var>Desc</var> is absent, then:
                      <ol>
                        <li>Return the result of calling the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing <span class='esstring'>"length"</span>, <var>Desc</var>, and <var>Throw</var> as arguments.</li>
                      </ol>
                    </li>
                    <li>Let <var>newLenDesc</var> be a copy of <var>Desc</var>.</li>

                    <li>Let <var>newLen</var> be ToUint32(<var>Desc</var>.<span class='prop'>[[Value]]</span>).</li>

                    <li>If <var>newLen</var> is not equal to ToNumber(<var>Desc</var>.<span class='prop'>[[Value]]</span>), throw a <span class='estype'>RangeError</span> exception.</li>

                    <li>Set <var>newLenDesc</var>.<span class='prop'>[[Value]]</span> to <var>newLen</var>.</li>

                    <li>Reject if <var>oldLenDesc</var>.<span class='prop'>[[Writable]]</span> is <b>false</b>
                      and SameValue(<var>newLen</var>, <var>oldLen</var>) is <b>false</b>.</li>

                    <li>If <var>newLen</var> &gt; <var>oldLen</var>:
                      <ol>
                        <li>Reject if the <span class='prop'>[[Extensible]]</span> property of <var>A</var> is <b>false</b>.</li>
                        <li>Update the IDL array value that <var>A</var> represents to have a length of <var>newLen</var>.</li>
                        <li>Let <var>idlValue</var> be the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                          <span class='esvalue'>undefined</span> to type <var>T</var>.</li>
                        <li>Let <var>value</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                          <var>idlValue</var> to an ECMAScript value.</li>
                        <li>While <var>newLen</var> &gt; <var>oldLen</var>:
                          <ol>
                            <li>Call the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing ToString(<var>oldLen</var>),
                              Property Descriptor <span class='desc'>{ [[Value]]: <var>value</var>, [[Writable]]: <b>true</b>, [[Enumerable]]: <b>true</b>, [[Configurable]]: <b>true</b> }</span>, and <b>false</b> as arguments.</li>
                            <li>Set the IDL array element value at index <var>oldLen</var> to <var>idlValue</var>.</li>
                            <li>Set <var>oldLen</var> to <var>oldLen</var> + 1.</li>
                          </ol>
                        </li>
                        <li>Call the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing <span class='esstring'>"length"</span>, <var>newLenDesc</var>, and <b>false</b> as arguments.</li>
                        <li>Return <b>true</b>.</li>
                      </ol>
                    </li>

                    <li>Initialize <var>newWritable</var> to <b>true</b>.</li>

                    <li>If <var>newLenDesc</var>.<span class='prop'>[[Writable]]</span> is <b>false</b>, then:
                      <ol>
                        <li>Need to defer setting the <span class='prop'>[[Writable]]</span> attribute to <b>false</b> in case any elements cannot be deleted.</li>
                        <li>Set <var>newWritable</var> to <b>false</b>.</li>
                        <li>Set <var>newLenDesc</var>.<span class='prop'>[[Writable]]</span> to <b>true</b>.</li>
                      </ol>
                    </li>

                    <li>Let <var>succeeded</var> be the result of calling the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing <span class='esstring'>"length"</span>, <var>newLenDesc</var>, and <var>Throw</var> as arguments.</li>
                    <li>If <var>succeeded</var> is <b>false</b>, return <b>false</b>.</li>

                    <li>While <var>newLen</var> &lt; <var>oldLen</var>:
                      <ol>
                        <li>Set <var>oldLen</var> to <var>oldLen</var> − 1.</li>
                        <li>Let <var>cannotDelete</var> be the result of calling the <span class='prop'>[[Delete]]</span> internal method of <var>A</var> passing ToString(<var>oldLen</var>) and <b>false</b> as arguments.</li>
                        <li>If <var>cannotDelete</var> is <b>true</b>, then:
                          <ol>
                            <li>Set <var>newLenDesc</var>.<span class='prop'>[[Value]]</span> to <var>oldLen</var> + 1.</li>
                            <li>If <var>newWritable</var> is <b>false</b>, set <var>newLenDesc</var>.<span class='prop'>[[Writable]]</span> to <b>false</b>.</li>
                            <li>Call the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing <span class='esstring'>"length"</span>, <var>newLenDesc</var>, and <b>false</b> as arguments.</li>
                            <li>Update the IDL array value that <var>A</var> represents to have a length of <var>oldLen</var> + 1.</li>
                            <li>Reject.</li>
                          </ol>
                        </li>
                      </ol>
                    </li>

                    <li>Update the IDL array value that <var>A</var> represents to have a length of <var>newLen</var>.</li>

                    <li>If <var>newWritable</var> is <b>false</b>, then
                      <ol>
                        <li>Call the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing <span class='esstring'>"length"</span>, Property Descriptor <span class='desc'>{ [[Writable]]: <span class='esvalue'>false</span> }</span>, and <b>false</b> as arguments. This call will always return <b>true</b>.</li>
                      </ol>
                    </li>

                    <li>Return <b>true</b>.</li>
                  </ol>
                </li>

                <li>Otherwise, if <var>P</var> is an array index (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 15.4), then:

                  <ol>
                    <li>Let <var>index</var> be ToUint32(<var>P</var>).</li>

                    <li>Reject if <var>index</var> ≥ <var>oldLen</var> and <var>oldLenDesc</var>.<span class='prop'>[[Writable]]</span> is <b>false</b>.</li>

                    <li>Reject if IsDataDescriptor(<var>Desc</var>) is <b>false</b>.</li>

                    <li>Let <var>idlValue</var> be the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                      <var>Desc</var>.<span class='prop'>[[Value]]</span> to type <var>T</var>.</li>
                    <li>Let <var>value</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                      <var>idlValue</var> to an ECMAScript value.</li>
                    <li>Let <var>newDesc</var> be a copy of <var>Desc</var>.</li>
                    <li>Set <var>newDesc</var>.<span class='prop'>[[Value]]</span> to <var>idlValue</var>.</li>
                    <li>Let <var>succeeded</var> be the result of calling the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (8.12.9) on <var>A</var> passing <var>P</var>, <var>newDesc</var>, and <b>false</b> as arguments.</li>

                    <li>Reject if <var>succeeded</var> is <b>false</b>.</li>

                    <li>If <var>index</var> ≥ <var>oldLen</var>, then:
                      <ol>
                        <li>Reject if the <span class='prop'>[[Extensible]]</span> property of <var>A</var> is <b>false</b>.</li>
                        <li>Reject if <var>oldLenDesc</var>.<span class='prop'>[[Writable]]</span> is <b>false</b>
                          and SameValue(<var>newLen</var>, <var>oldLen</var>) is <b>false</b>.</li>

                        <li>Let <var>idlValue</var> be the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                          <span class='esvalue'>undefined</span> to type <var>T</var>.</li>
                        <li>Let <var>value</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                          <var>idlValue</var> to an ECMAScript value.</li>
                        <li>Initialize <var>i</var> to <var>oldLen</var>.</li>
                        <li>While <var>i</var> &lt; <var>index</var>:
                          <ol>
                            <li>Call the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing ToString(<var>oldLen</var>),
                              Property Descriptor <span class='desc'>{ [[Value]]: <var>value</var>, [[Writable]]: <b>true</b>, [[Enumerable]]: <b>true</b>, [[Configurable]]: <b>true</b> }</span>, and <b>false</b> as arguments.</li>
                            <li>Set the IDL array element value at index <var>i</var> to <var>idlValue</var>.</li>
                            <li>Set <var>i</var> to <var>i</var> + 1.</li>
                          </ol>
                        </li>

                        <li>Set <var>oldLenDesc</var>.<span class='prop'>[[Value]]</span> to <var>index</var> + 1.</li>

                        <li>Call the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing <span class='esstring'>"length"</span>, <var>oldLenDesc</var>, and <b>false</b> as arguments. This call will always return <b>true</b>.</li>
                      </ol>
                    </li>

                    <li>Return <b>true</b>.</li>
                  </ol>
                </li>

                <li>Return the result of calling the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>A</var> passing <var>P</var>, <var>Desc</var>, and <var>Throw</var> as arguments.</li>
              </ol>
            </div>
          </div>
        </div>

        <div id='es-extended-attributes' class='section'>
          <h3>ECMAScript-specific extended attributes</h3>

          <div class='ednote'>
            <p>HTML 5 is using <span class='xattr'>[Supplemental]</span> to split interface definitions into multiple parts.</p>
          </div>

          <p>
            This section defines a number of
            <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
            whose presence affects only the ECMAScript binding.
          </p>

          <div id='AllowAny' class='section'>
            <h4>[AllowAny]</h4>

            <p>
              If the <a class='xattr' href='#AllowAny'>[AllowAny]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-operation'>operation argument</a>,
              it indicates that any ECMAScript value will be accepted as that
              argument’s value.  Normally, as part of the <a class='dfnref' href='#dfn-overload-resolution-algorithm'>overload resolution algorithm</a>,
              a non-<span class='idltype'>DOMString</span> value will disqualify
              a given overloaded operation that is declared to take a
              <span class='idltype'>DOMString</span> for a given argument.  When
              the <a class='xattr' href='#AllowAny'>[AllowAny]</a> extended
              attribute is present on the argument, that disqualification is
              not performed.
            </p>
            <p>
              The <a class='xattr' href='#AllowAny'>[AllowAny]</a> extended attribute
              <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines two <a class='dfnref' href='#dfn-interface'>interfaces</a>,
                each with two overloaded <a class='dfnref' href='#dfn-operation'>operations</a>.
                One uses <a class='xattr' href='#AllowAny'>[AllowAny]</a> and one does not.
              </p>
              <x:codeblock language='idl'>interface A {
  void f();
  void f(in A a);
  void f(in DOMString s);
};

interface B {
  void g();
  void g(in B b);
  void g([AllowAny] in DOMString s);
};</x:codeblock>
              <p>
                In an ECMAScript implementation of the above two interfaces,
                an <span class='idltype'>A</span> object will not allow a
                <span class='estype'>float</span> value to be passed in as
                an argument, while a <span class='idltype'>B</span> object
                will:
              </p>
              <x:codeblock language='es'>var a = getA();  <span class='comment'>// Obtain an instance of A.</span>
var b = getB();  <span class='comment'>// Obtain an instance of B.</span>

a.f(1.23);       <span class='comment'>// Throws a TypeError.</span>
b.g(1.23);       <span class='comment'>// Equivalent to b.g("1.23").</span>
b.g(a);          <span class='comment'>// Equivalent to calling b.g with ToString(a).</span></x:codeblock>
            </div>
          </div>

          <div id='Callback' class='section'>
            <h4>[Callback]</h4>

            <p>
              If the <a class='xattr' href='#Callback'>[Callback]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates that the interface can be implemented by an ECMAScript native object
              (see <a href='#native-objects'>section <?sref native-objects?></a>
              <?sdir native-objects?>), and such an object can be
              <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converted to an IDL value</a>
              of that interface type.
              A native object implementing the interface is most often
              used to provide callback methods to a host object, hence
              the name of this extended attribute.
            </p>
            <p>
              The <a class='xattr' href='#Callback'>[Callback]</a> extended attribute
              <span class='rfc2119'>MUST</span> either <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>
              or <a class='dfnref' href='#dfn-xattr-identifier'>take the identifier</a> <span class='idlident'>FunctionOnly</span> or <span class='idlident'>PropertyOnly</span>.
              If no argument is given, then any native object is considered
              to implement the interface.  Otherwise, if the
              <span class='idlident'>FunctionOnly</span> argument is given,
              then only <span class='estype'>Function</span> objects can
              be considered to implement the interface.
            </p>
            <p>
              The <a class='xattr' href='#Callback'>[Callback]</a> extended attribute
              <span class='rfc2119'>MUST NOT</span> be used on an interface that
              does not meet the criteria for an interface that can have native object
              implementations, as described in <a href="#native-objects">section <?sref native-objects?></a>
              <?sdir native-objects?>.  If the <a class='xattr' href='#Callback'>[Callback]</a>
              extended attribute is used on an interface that has any
              <a class='dfnref' href='#dfn-attribute'>attributes</a>, has
              zero <a class='dfnref' href='#dfn-operation'>operations</a>, or
              has multiple operations with different
              <a class='dfnref' href='#dfn-identifier'>identifiers</a>,
              then the extended attribute <span class='rfc2119'>MUST</span>
              take no argument.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL
                  fragment</a> defines a simple callback interface and an
                interface for an object that expects an object that
                implements that callback:
              </p>
              <x:codeblock language='idl'>[Callback] interface Listener {
  void eventOccurred();
};

interface Thing {
  void addListener(in Listener listener);
};</x:codeblock>
              <p>
                An ECMAScript implementation of the above two interfaces
                allows any native object to be passed to <span class='prop'>addListener</span>:
              </p>
              <x:codeblock language='es'><span class='comment'>// Obtain an instance of Thing.</span>
var t = getThing();

<span class='comment'>// The function is the implementation of the eventOccurred operation on the</span>
<span class='comment'>// Listener interface.  If Listener had been declared with</span>
<span class='comment'>// [Callback=PropertyOnly] this addListener() call would still succeed, but</span>
<span class='comment'>// a TypeError would be thrown when the user agent attempts to invoke the</span>
<span class='comment'>// callback.</span>
t.addListener(function() { });

<span class='comment'>// This also works, but it is the function with /* 1 */ in it that is the</span>
<span class='comment'>// implementation of eventOccurred.</span>
var x = function() { /* 1 */ };                    
x.eventOccurred = function() { /* 2 */ };          
t.addListener(x);

<span class='comment'>// This works too, and the value of the eventOccurred property is the</span>
<span class='comment'>// implementation of the operation.  If Listener had been declared with</span>
<span class='comment'>// [Callback=FunctionOnly] however, this would have thrown a TypeError.</span>
t.addListener({ eventOccurred: function() { } });</x:codeblock>
            </div>
          </div>

          <div id='Constructor' class='section'>
            <h4>[Constructor]</h4>

            <p>
              If the <a class='xattr' href='#Constructor'>[Constructor]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>, it indicates that
              the <a class='dfnref' href='#dfn-interface-object'>interface object</a> for this interface
              will have an <span class='prop'>[[Construct]]</span> internal method,
              allowing objects implementing the interface to be constructed.
              Multiple <a class='xattr' href='#Constructor'>[Constructor]</a> extended
              attributes may appear on a given interface.
            </p>
            <p>
              The <a class='xattr' href='#Constructor'>[Constructor]</a>
              extended attribute <span class='rfc2119'>MUST</span> either
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a> or
              <a class='dfnref' href='#dfn-xattr-argument-list'>take an argument list</a>.
              The bare form, <code>[Constructor]</code>, has the same meaning as
              using an empty argument list, <code>[Constructor()]</code>.  For each
              <a class='xattr' href='#Constructor'>[Constructor]</a> extended attribute
              on the interface, there will be a way to construct an object that implements
              the interface by passing the specified arguments.
            </p>
            <p>
              See <a href='#es-interface-call'>section <?sref es-interface-call?></a>
              <?sdir es-interface-call?> for details on how a constructor
              is to be implemented.
            </p>

            <div class='example'>
              <p>
                The following IDL defines two interfaces.  The second has the
                <a class='xattr' href='#Constructor'>[Constructor]</a> extended
                attribute, while the first does not.
              </p>
              <x:codeblock language='idl'>interface NodeList {
  Node item(in unsigned long index);
  readonly attribute unsigned long length;
};

[Constructor,
 Constructor(in float radius)]
interface Circle {
  attribute float r;
  attribute float cx;
  attribute float cy;
  readonly attribute float circumference;
};</x:codeblock>
              <p>
                An ECMAScript implementation supporting these interfaces would
                have a <span class='prop'>[[Construct]]</span> property on the
                <span class='idltype'>Circle</span> interface object which would
                return a new object that implements the interface.  It would take
                either zero or one argument.  The
                <span class='idltype'>NodeList</span> interface object would not
                have a <span class='prop'>[[Construct]]</span> property.
              </p>
              <x:codeblock language='es'>var x = new Circle();      <span class='comment'>// The uses the zero-argument constructor to create a</span>
                           <span class='comment'>// reference to a host object that implements the</span>
                           <span class='comment'>// Circle interface.</span>

var y = new Circle(1.25);  <span class='comment'>// This also creates a Circle object, this time using</span>
                           <span class='comment'>// the one-argument constructor.</span>

var z = new NodeList();    <span class='comment'>// This would throw a TypeError, since no</span>
                           <span class='comment'>// [Constructor] is declared.</span></x:codeblock>
            </div>
          </div>

          <div id='NamedConstructor' class='section'>
            <h4>[NamedConstructor]</h4>
            <p>
              If the <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates that the <a class='dfnref' href='#dfn-relevant-namespace-object'>relevant namespace object</a>
              for the interface (often, the ECMAScript global object) will have a property with the
              specified name whose value is a constructor function that can
              create objects that implement the interface.
              Multiple <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a> extended
              attributes may appear on a given interface.
            </p>
            <p>
              The <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              extended attribute <span class='rfc2119'>MUST</span> either
              <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a> or
              <a class='dfnref' href='#dfn-xattr-named-argument-list'>take a named argument list</a>.
              The first form, <code>[NamedConstructor=<a class='terminal' href='#prod-identifier'>identifier</a>]</code>, has the same meaning as
              using an empty argument list, <code>[NamedConstructor=<a class='terminal' href='#prod-identifier'>identifier</a>()]</code>.  For each
              <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a> extended attribute
              on the interface, there will be a way to construct an object that implements
              the interface by passing the specified arguments to the constructor function
              that is the value of the aforementioned property.
            </p>
            <p>
              The identifier used for the named constructor <span class='rfc2119'>MUST NOT</span>
              be the same as that used by an <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              extended attribute on another interface, and it <span class='rfc2119'>MUST NOT</span>
              be the same as an identifier of an interface (or <a class='dfnref' href='#dfn-exception'>exception</a>)
              that has an <a class='dfnref' href='#dfn-interface-object'>interface object</a>
              (or <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>).
            </p>
            <p>
              See <a href='#named-constructors'>section <?sref named-constructors?></a>
              <?sdir named-constructors?> for details on how named constructors
              are to be implemented.
            </p>

            <div class='example'>
              <p>
                The following IDL defines an interface that uses the
                <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a> extended
                attribute.
              </p>
              <x:codeblock language='idl'>[NamedConstructor=Audio,
 NamedConstructor=Audio(in DOMString src)]
interface HTMLAudioElement : HTMLMediaElement {
  <span class='comment'>// ...</span>
};</x:codeblock>
              <p>
                An ECMAScript implementation that supports this interface will
                allow the construction of <span class='estype'>HTMLAudioElement</span>
                objects using the <span class='estype'>Audio</span> constructor.
              </p>
              <x:codeblock language='es'>typeof Audio;                   <span class='comment'>// Evaluates to 'function'.</span>

var a1 = new Audio();           <span class='comment'>// Creates a new object that implements</span>
                                <span class='comment'>// HTMLAudioElement, using the zero-argument</span>
                                <span class='comment'>// constructor.</span>

var a2 = new Audio('a.flac');   <span class='comment'>// Creates an HTMLAudioElement using the</span>
                                <span class='comment'>// one-argument constructor.</span></x:codeblock>
            </div>
          </div>

          <div id='NamespaceObject' class='section'>
            <h4>[NamespaceObject]</h4>
            <p>
              If the <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-module'>module</a>,
              it indicates that the hierarchy of that module and its descendant
              modules will be reflected as <a class='dfnref' href='#dfn-namespace-object'>namespace objects</a>.
              <a class='dfnref' href='#dfn-interface-object'>Interface objects</a> and
              <a class='dfnref' href='#dfn-exception-interface-object'>exception interface objects</a>
              for <a class='dfnref' href='#dfn-interface'>interfaces</a> and
              <a class='dfnref' href='#dfn-exception'>exceptions</a> defined in
              a module annotated with <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a>
              (or in a descendant of such a module) will be placed on
              a namespace object instead of the ECMAScript global object.
            </p>
            <p>
              The <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a>
              extended attribute <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <p>
              The <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a>
              extended attribute <span class='rfc2119'>MUST NOT</span> be
              specified on a module if is specified on one of its ancestor modules.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines a <a class='dfnref' href='#dfn-module'>module</a> hierarchy
                where one of the modules is declared with the
                <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
              </p>
              <x:codeblock language='idl'>[NamespaceObject]
module acme {
  
  exception DeviceException { };

  module pim {

    [Constructor]
    interface Contact { };

    [Constructor,
     NamedConstructor=RecurringEvent(in long freq)]
    interface CalendarEvent { };
  };
};</x:codeblock>
              <p>
                In an ECMAScript implementation, there would exist
                <a class='dfnref' href='#dfn-namespace-object'>namespace objects</a>
                for the <span class='idltype'>acme</span> and <span class='idltype'>pim</span>
                <a class='dfnref' href='#dfn-module'>modules</a>.  The property
                for the <span class='idltype'>Device</span>
                <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>
                would be on the <span class='idltype'>acme</span> namespace object
                and the properties for the <span class='idltype'>Contact</span>
                and <span class='idltype'>CalendarEvent</span>
                <a class='dfnref' href='#dfn-interface-object'>interface objects</a>
                would be on the <span class='idltype'>pim</span> namespace object.
              </p>
              <x:codeblock language='es'>acme;                             <span class='comment'>// A namespace object.</span>
acme.pim;                         <span class='comment'>// Another namespace object.</span>

acme.DeviceException;             <span class='comment'>// An exception interface object.</span>
acme.pim.Contact;                 <span class='comment'>// An interface object.</span>

new acme.pim.Contact();           <span class='comment'>// Creates an object implementing acme::pim::Contact.</span>
new acme.pim.RecurringEvent(10);  <span class='comment'>// Creates an object implementing acme::pim::CalendarEvent.</span></x:codeblock>
            </div>
          </div>

          <div id='NoInterfaceObject' class='section'>
            <h4>[NoInterfaceObject]</h4>

            <p>
              If the <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates that an
              <a class='dfnref' href='#dfn-interface-object'>interface object</a>
              will not exist for the interface in the ECMAScript binding.  Similarly,
              if it appears on an <a class='dfnref' href='#dfn-exception'>exception</a>
              it indicates that an
              <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>
              will not exist for the exception in the ECMAScript binding.
            </p>
            <p>
              The <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a> extended attribute
              <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <p>
              If the <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a> extended attribute
              is specified on an interface, then the <a class='xattr' href='#Constructor'>[Constructor]</a>
              extended attribute <span class='rfc2119'>MUST NOT</span> also be specified on that interface.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL
                  fragment</a> defines two interfaces, one whose interface object
                is exposed on the ECMAScript global object, and one whose isn’t:
              </p>
              <x:codeblock language='idl'>interface Storage {
  void addEntry(in unsigned long key, in any value);
};

[NoInterfaceObject]
interface Query {
  any lookupEntry(in unsigned long key);
};</x:codeblock>
              <p>
                An ECMAScript implementation of the above IDL would allow
                manipulation of <span class='idltype'>Storage</span>’s
                prototype, but not <span class='idltype'>Query</span>’s.
              </p>
              <x:codeblock language='es'>typeof Storage;                        <span class='comment'>// evaluates to "object"</span>

<span class='comment'>// Add some tracing alert() call to Storage.addEntry.</span>
var fn = Storage.prototype.addEntry;
Storage.prototype.addEntry = function(key, value) {
  alert('Calling addEntry()');
  return fn.call(this, key, value);
};

typeof Query;                          <span class='comment'>// evaluates to "undefined"</span>
var fn = Query.prototype.lookupEntry;  <span class='comment'>// exception, Query isn’t defined</span>
</x:codeblock>
            </div>
          </div>

          <div id='OverrideBuiltins' class='section'>
            <h4>[OverrideBuiltins]</h4>

            <p>
              If the <a class='xattr' href='#OverrideBuiltins'>[OverrideBuiltins]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>,
              it indicates that for a host object implementing the interface,
              <a class='dfnref' href='#dfn-corresponding-named-property'>corresponding named properties</a>
              will exist on it, shadowing any properties that would otherwise
              be inherited from its prototype chain.  This is in constrast
              to the usual behavior, which is for corresponding named
              properties to be created only if there is no property with the
              same name somehwere in the object’s prototype chain.
            </p>
            <p>
              The <a class='xattr' href='#OverrideBuiltins'>[OverrideBuiltins]</a>
              extended attribute <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>
              and <span class='rfc2119'>MUST NOT</span> appear on an interface
              that does not define a <a class='dfnref' href='#dfn-name-getter'>name getter</a>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines two <a class='dfnref' href='#dfn-interface'>interfaces</a>,
                one that has a <a class='dfnref' href='#dfn-name-getter'>name getter</a>
                and one that does not.
              </p>
              <x:codeblock language='idl'>interface StringMap {
  readonly attribute unsigned long length;
  getter DOMString lookup(in DOMString key);
};

[OverrideBuiltins]
interface StringMap2 {
  readonly attribute unsigned long length;
  getter DOMString lookup(in DOMString key);
};</x:codeblock>
              <p>
                In an ECMAScript implementation of these two interfaces,
                getting certain properties on objects implementing
                the interfaces will result in different values:
              </p>
              <x:codeblock language='es'><span class='comment'>// Obtain an instance of StringMap.  Assume that it has "abc", "length" and</span>
<span class='comment'>// "toString" as supported property names.</span>
var map1 = getStringMap();  

<span class='comment'>// This invokes the name getter.</span>
map1.abc;

<span class='comment'>// This fetches the "length" property on the object that corresponds to the</span>
<span class='comment'>// length attribute.</span>
map1.length;

<span class='comment'>// This fetches the "toString" property from the object's prototype chain.</span>
map1.toString;


<span class='comment'>// Obtain an instance of StringMap2.  Assume that it also has "abc", "length"</span>
<span class='comment'>// and "toString" as supported property names.</span>
var map2 = getStringMap2();  

<span class='comment'>// This invokes the name getter.</span>
map2.abc;

<span class='comment'>// This also invokes the name getter, despite the fact that the "length"</span>
<span class='comment'>// property on the object corresponds to the length attribute.</span>
map2.length;

<span class='comment'>// This too invokes the name getter, despite the fact that "toString" is</span>
<span class='comment'>// a property in map2's prototype chain.</span>
map2.toString;</x:codeblock>
            </div>
          </div>

          <div id='PrototypeRoot' class='section'>
            <h4>[PrototypeRoot]</h4>

            <div class='ednote'>
              <p>Ian suggests that <span class='xattr'>[PrototypeRoot]</span> might not need to exist.
                <a href='http://www.w3.org/mid/Pine.LNX.4.62.0906200730520.16244@hixie.dreamhostps.com'>(Mail.)</a></p>
            </div>
            <p>
              If the <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-interface'>interface</a>
              <var>A</var>, it indicates that it serves as the root of a prototype
              ancestor hierarchy.  For any interface <var>B</var> that has
              <var>A</var> as an ancestor, each interface in the inheritance
              tree starting with an interface that <var>B</var> inherits from and
              ending with <var>A</var> will be a
              <a class='dfnref' href='#dfn-prototype-ancestor'>prototype ancestor</a>
              of <var>B</var>.  It also plays a role in determining the value
              of a host object’s internal <span class='prop'>[[Prototype]]</span>
              property value when the object implements more than one interface.
              See <a href='#interface-prototype-object'>section <?sref interface-prototype-object?></a>
              and <a href='#host-objects'>section <?sref host-objects?></a> for details.
            </p>
            <p>
              The <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
              extended attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>,
              and <span class='rfc2119'>MUST NOT</span> appear on an
              <a class='dfnref' href='#dfn-interface'>interface</a> that
              <a class='dfnref' href='#dfn-inherit'>inherits</a> from another
              interface.  An interface inheritance hierarchy
              <span class='rfc2119'>MUST NOT</span> have multiple paths from
              one interface to another that has the
              <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
              extended attribute.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines a hierarchy of <a class='dfnref' href='#dfn-interface'>interfaces</a>
                whose rootmost interface is annotated with the
                <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
                Other interfaces are defined to be implemented on objects that
                implement this prototype root interface, but properties for
                these other interfaces will be made available in the prototype
                chain through a <a class='dfnref' href='#dfn-mixin-prototype-object'>mixin prototype object</a>.
              </p>
              <x:codeblock language='idl'>[PrototypeRoot]
interface Node {
  readonly attribute unsigned short nodeType;
};

interface Element : Node {
  void appendChild(in Node n);
  <span class='comment'>// ...</span>
};

interface HTMLElement : Element {
  void focus();
  <span class='comment'>// ...</span>
};

interface EventTarget {
  void addEventListener(/* ... */);
  <span class='comment'>// ...</span>
};

Node implements EventTarget;</x:codeblock>
              <p>
                An ECMAScript implementation implementing these interfaces would
                have a prototype chain as follows, where <var>E</var> is an
                instance of <span class='idltype'>HTMLElement</span>:
              </p>
              <div class='diagram'>
                <object data='PrototypeRoot-example.svg' type='image/svg+xml' style='width: 37em; height: 45em' width='1' height='1'>
                  <img src='PrototypeRoot-example.png' width='500' height='608' alt='The prototype of E is the mixin prototype object for E.  This mixin prototype object has an "addEventListener" property.  The prototype of the mixin prototype object is the HTMLElement prototype object, whose prototype is the Element prototype object, whose prototype is the Node prototype object, whose prototype is the Object prototype object.'/>
                </object>
              </div>
            </div>
          </div>

          <div id='PutForwards' class='section'>
            <h4>[PutForwards]</h4>

            <p>
              If the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-read-only'>read only</a>
              <a class='dfnref' href='#dfn-attribute'>attribute</a> declaration whose type is
              an <a href='#idl-interface'>interface type</a>,
              it indicates that assigning to the attribute will have specific behavior.
              Namely, the assignment is “forwarded” to the attribute (specified by
              the extended attribute argument) on the object that is currently
              referenced by the attribute being assigned to.
            </p>
            <p>
              The <a class='xattr' href='#PutForwards'>[PutForwards]</a> extended
              attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a>.
              Assuming that:
            </p>
            <ul>
              <li>
                <var>A</var> is the <a class='dfnref' href='#dfn-attribute'>attribute</a>
                on which the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
                extended attribute appears,
              </li>
              <li>
                <var>I</var> is the <a class='dfnref' href='#dfn-interface'>interface</a>
                on which <var>A</var> is declared,
              </li>
              <li>
                <var>J</var> is the <a href='#idl-interface'>interface type</a>
                that <var>A</var> is declared to be of, and
              </li>
              <li>
                <var>N</var> is the <a class='dfnref' href='#dfn-identifier'>identifier</a>
                argument of the extended attribute,
              </li>
            </ul>
            <p>
              then there <span class='rfc2119'>MUST</span> be another
              <a class='dfnref' href='#dfn-attribute'>attribute</a> <var>B</var>
              declared on <var>J</var> whose <a class='dfnref' href='#dfn-identifier'>identifier</a>
              is <var>N</var>.  Assignment of a value to the attribute <var>A</var>
              on an object implementing <var>I</var> will result in that value
              being assigned to attribute <var>B</var> of the object that <var>A</var>
              references, instead.
            </p>
            <p>
              Note that <a class='xattr' href='#PutForwards'>[PutForwards]</a>-annotated
              <a class='dfnref' href='#dfn-attribute'>attributes</a> can be
              chained.  That is, an attribute with the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              can refer to an attribute that itself has that extended attribute.
              There <span class='rfc2119'>MUST NOT</span> exist a cycle in a
              chain of forwarded assignments.  A cycle exists if, when following
              the chain of forwarded assignments, a particular attribute on
              an <a class='dfnref' href='#dfn-interface'>interface</a> is
              encountered more than once.
            </p>
            <p>
              An attribute with the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              extended attribute <span class='rfc2119'>MUST NOT</span> also be declared
              with the <a class='xattr' href='#Replaceable'>[Replaceable]</a>
              extended attribute.
            </p>
            <p>
              See the <a href='#es-attributes'>Attributes</a> section <?sdir es-attributes?> for how
              <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              is to be implemented.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines interfaces for names and people.
                The <a class='xattr' href='#PutForwards'>[PutForwards]</a> extended
                attribute is used on the <span class='idlattr'>name</span> attribute
                of the <span class='idltype'>Person</span> interface to indicate
                that assignments to that attribute result in assignments to the
                <span class='idlattr'>full</span> attribute of the
                <span class='idltype'>Person</span> object:
              </p>
              <x:codeblock language='idl'>interface Name {
  attribute DOMString full;
  attribute DOMString family;
  attribute DOMString given;
};

interface Person {
  [PutForwards=full] readonly attribute Name name;
  attribute unsigned short age;
};</x:codeblock>
              <p>
                In the ECMAScript binding, this would allow assignments to the
                <span class='prop'>name</span> property:
              </p>
              <x:codeblock language='es'>var p = getPerson();           <span class='comment'>// Obtain an instance of Person.</span>

p.name = 'John Citizen';       <span class='comment'>// This statement...</span>
p.name.full = 'John Citizen';  <span class='comment'>// ...has the same behavior as this one.</span></x:codeblock>
            </div>
          </div>

          <div id='Replaceable' class='section'>
            <h4>[Replaceable]</h4>

            <p>
              If the <a class='xattr' href='#Replaceable'>[Replaceable]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on a <a class='dfnref' href='#dfn-read-only'>read only</a>
              <a class='dfnref' href='#dfn-attribute'>attribute</a>,
              it indicates that setting the corresponding property on the
              host object will result in that property being reconfigured
              to one that is unrelated to the attribute,
              and which has the value being assigned.
            </p>
            <p>
              The <a class='xattr' href='#Replaceable'>[Replaceable]</a>
              extended attribute <span class='rfc2119'>MUST</span>
              <a class='dfnref' href='#dfn-xattr-no-argument'>take no argument</a>.
            </p>
            <p>
              An attribute with the <a class='xattr' href='#Replaceable'>[READ_ERROR]</a>
              extended attribute <span class='rfc2119'>MUST NOT</span> also be declared
              with the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              extended attribute.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
                defines an <a class='dfnref' href='#dfn-interface'>interface</a>
                with an <a class='dfnref' href='#dfn-operation'>operation</a>
                that increments a counter, and an <a class='dfnref' href='#dfn-attribute'>attribute</a>
                that exposes the counter’s value, which is initially 0:
              </p>
              <x:codeblock language='idl'>interface Counter {
  [Replaceable] readonly attribute unsigned long value;
  void increment();
};</x:codeblock>
              <p>
                Assigning to the <span class='prop'>value</span> property
                on a host object implementing <span class='idltype'>Counter</span>
                will sever the link between the property and the IDL
                <a class='dfnref' href='#dfn-attribute'>attribute</a> it
                initially corresponds to:
              </p>
              <x:codeblock language='es'>var counter = getCounter();  <span class='comment'>// Obtain an instance of Counter.</span>
counter.value;               <span class='comment'>// Evaluates to 0.</span>

counter.increment();
counter.increment();
counter.value;               <span class='comment'>// Evaluates to 2.</span>

counter.value = 'a';         <span class='comment'>// Replaces the property with one that is unrelated</span>
                             <span class='comment'>// to Counter::value.</span>

counter.increment();
counter.value;               <span class='comment'>// Evaluates to 'a'.</span></x:codeblock>
            </div>
          </div>

          <div id='TreatNullAs' class='section'>
            <h4>[TreatNullAs]</h4>

            <div class='ednote'>
              <p>More testing required to see if the defaults for <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a>
                and <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a> are correct.
                (<a href='http://www.w3.org/mid/483C8D65.5030605@sicking.cc'>Mail</a> and <a href='http://www.w3.org/2008/webapps/track/actions/285'>action</a>.)</p>
            </div>

            <p>
              If the <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-attribute'>attribute</a>
              or <a class='dfnref' href='#dfn-operation'>operation</a> argument whose type is
              <a class='idltype' href='#idl-DOMString'>DOMString</a>,
              it indicates that a <span class='esvalue'>null</span> value
              assigned to the attribute or passed as the operation argument will be
              handled differently from its default handling.  Instead of being stringified
              to <span class='idlstring'>"null"</span>, which is the default,
              it will be converted to the empty string <span class='idlstring'>""</span>.
            </p>
            <p>
              If <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a> is specified on
              an operation itself, then it indicates that a <a href='#native-objects'>native object
                implementing the interface</a> will have the return
              value of the function that implements the operation
              handled in the same way as for operation arguments
              and attributes, as above.
            </p>
            <p>
              The <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a>
              extended attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-identifier'>take the identifier</a>
              <span class='idlident'>EmptyString</span>.
            </p>
            <p>
              The <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a> extended attribute
              <span class='rfc2119'>MUST NOT</span> be specified on an operation argument,
              attribute or operation return value whose type is not <span class='idltype'>DOMString</span>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface that has one
                attribute with the <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a>
                extended attribute, and one operation with an argument that has
                the extended attribute:
              </p>
              <x:codeblock language='idl'>interface Dog {
  attribute DOMString name;
  attribute DOMString owner;

  boolean isMemberOfBreed([TreatNullAs=EmptyString] in DOMString breedName);
};</x:codeblock>
              <p>
                An ECMAScript implementation implementing the <span class='idltype'>Dog</span>
                interface would convert a <span class='esvalue'>null</span> value
                assigned to the <span class='prop'>name</span> property or passed as the
                argument to the <span class='prop'>isMemberOfBreed</span> function:
              </p>
              <x:codeblock language='es'>var d = getDog();         <span class='comment'>// Assume d is a host object implementing the Dog</span>
                          <span class='comment'>// interface.</span>

d.name = null;            <span class='comment'>// This assigns the string "null" to the .name</span>
                          <span class='comment'>// property.</span>

d.isMemberOfBreed(null);  <span class='comment'>// This passes the string "" to the isMemberOfBreed</span>
                          <span class='comment'>// function.</span></x:codeblock>
            </div>
          </div>

          <div id='TreatUndefinedAs' class='section'>
            <h4>[TreatUndefinedAs]</h4>

            <p>
              If the <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              appears on an <a class='dfnref' href='#dfn-attribute'>attribute</a>
              or <a class='dfnref' href='#dfn-operation'>operation</a> argument whose type is
              <a class='idltype' href='#idl-DOMString'>DOMString</a> or <span class='idltype'>DOMString?</span>,
              it indicates that an <span class='esvalue'>undefined</span> value
              assigned to the corresponding property or passed as an argument to
              the corresponding function will be handled differently from its
              default handling, which is to stringify to
              <span class='idlstring'>"undefined"</span>:
            </p>
            <ul>
              <li>
                If the argument to <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>
                is <span class='idlident'>EmptyString</span>, then the value assigned to the
                attribute or passed as the operation argument will be the empty string,
                <span class='idlstring'>""</span>.
              </li>
              <li>
                Otherwise, if the argument to <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>
                is <span class='idlident'>Null</span>, then the value assigned to the
                attribute or passed as the operation argument will be the
                <span class='idlvalue'>null</span> value.
              </li>
            </ul>
            <p>
              If <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a> is specified on
              an operation itself, then it indicates that a <a href='#native-objects'>native object
                implementing the interface</a> will have the return
              value of the function that implements the operation
              handled in the same way as for operation arguments
              and attributes, as above.
            </p>
            <p>
              The <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>
              extended attribute <span class='rfc2119'>MUST</span> <a class='dfnref' href='#dfn-xattr-identifier'>take an identifier</a>:
              either <span class='idlident'>EmptyString</span> or <span class='idlident'>Null</span>.
            </p>
            <p>
              <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs=Null]</a>
              <span class='rfc2119'>MUST NOT</span> be specified on operation argument,
              attribute or operation return value whose type is not <span class='idltype'>DOMString?</span>,
              and <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs=EmptyString]</a>
              <span class='rfc2119'>MUST NOT</span> be specified on operation argument,
              attribute or operation return value whose type is neither
              <span class='idltype'>DOMString</span> nor <span class='idltype'>DOMString?</span>.
            </p>
            <div class='example'>
              <p>
                The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> defines an interface that has one
                attribute with the <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>
                extended attribute, and one operation with an argument that has
                the extended attribute:
              </p>
              <x:codeblock language='idl'>interface Cat {
  attribute DOMString name;
  attribute DOMString owner;

  boolean isMemberOfBreed([TreatUndefinedAs=EmptyString] in DOMString breedName);
};</x:codeblock>
              <p>
                An ECMAScript implementation implementing the <span class='idltype'>Cat</span>
                interface would convert an <span class='esvalue'>undefined</span> value
                assigned to the <span class='prop'>name</span> or <span class='prop'>owner</span> property 
                to the string <span class='idlstring'>"undefined"</span>, and
                an <span class='esvalue'>undefined</span> value passed as the
                argument to the <span class='prop'>isMemberOfBreed</span> function
                would be converted to the empty string <span class='idlstring'>""</span>:
              </p>
              <x:codeblock language='es'>var c = getCat();              <span class='comment'>// Obtain an instance of Cat.</span>

c.name = undefined;            <span class='comment'>// This assigns the string "undefined" to the</span>
                               <span class='comment'>// .name property.</span>

c.isMemberOfBreed(undefined);  <span class='comment'>// This passes the string "" to the</span>
                               <span class='comment'>// isMemberOfBreed function.</span></x:codeblock>
            </div>
          </div>
        </div>

        <div id='es-modules' class='section'>
          <h3>Modules</h3>

          <p>
            The hierarchy of <a class='dfnref' href='#dfn-module'>modules</a> in
            an <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a> can,
            but need not be, reflected in an ECMAScript implementation.  Whether
            a module hierarchy is reflected or not depends on the use of the
            <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
          </p>
          <p>
            For every module that is declared with the
            <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a> extended attribute,
            and for every module that has an ancestor module declared with the
            <a class='xattr' href='#NamespaceObject'>[NamespaceObject]</a> extended attribute,
            there exists a unique <dfn id='dfn-namespace-object'>namespace object</dfn>, which
            provides access to the <a class='dfnref' href='#dfn-interface-object'>interface objects</a>
            and <a class='dfnref' href='#dfn-exception-interface-object'>exception interface objects</a>
            for the <a class='dfnref' href='#dfn-interface'>interfaces</a> and
            <a class='dfnref' href='#dfn-exception'>exceptions</a> declared in
            the module.
          </p>
          <p>
            The <dfn id='dfn-relevant-namespace-object'>relevant namespace object</dfn>
            for a module, interface or exception <var>A</var> is determined as follows:
          </p>
          <ul>
            <li>
              If <var>A</var> has an <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
              and that module has a <a class='dfnref' href='#dfn-namespace-object'>namespace object</a>,
              than that namespace object is <var>A</var>’s
              <a class='dfnref' href='#dfn-relevant-namespace-object'>relevant namespace object</a>.
            </li>
            <li>
              Otherwise, <var>A</var>’s relevant namespace object is the ECMAScript global object.
            </li>
          </ul>
          <p>
            For every <a class='dfnref' href='#dfn-module'>module</a> that has a
            <a class='dfnref' href='#dfn-namespace-object'>namespace object</a>,
            a corresponding property <span class='rfc2119'>MUST</span> exist on
            the <a class='dfnref' href='#dfn-relevant-namespace-object'>relevant namespace object</a> for
            the module.  The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a>
            of the module, its value is the <a class='dfnref' href='#dfn-namespace-object'>namespace object</a> for the module,
            and the property has the attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>.
          </p>
        </div>

        <div id='es-interfaces' class='section'>
          <h3>Interfaces</h3>

          <p>
            For every <a class='dfnref' href='#dfn-interface'>interface</a> that is not declared with the
            <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
            a corresponding property <span class='rfc2119'>MUST</span> exist on the
            interface’s <a class='dfnref' href='#dfn-relevant-namespace-object'>relevant namespace object</a>.
            The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the interface,
            and its value is an object called the
            <dfn id='dfn-interface-object'>interface object</dfn>, which provides access to the
            <a class='dfnref' href='#dfn-constant'>constants</a>, <a class='dfnref' href='#dfn-attribute'>attributes</a>
            and <a class='dfnref' href='#dfn-operation'>operations</a> defined on the interface.
            The property has the attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>.
            The characteristics of an interface object is described in <a href='#interface-object'>section <?sref interface-object?></a>
            <?sdir interface-object?>.
          </p>
          
          <p>
            In addition, for every <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
            extended attribute on an interface, a corresponding property <span class='rfc2119'>MUST</span>
            exist on the interface’s <a class='dfnref' href='#dfn-relevant-namespace-object'>relevant namespace object</a>.
            The name of the property is the
            <a class='terminal' href='#prod-identifier'>identifier</a> that occurs directly after the
            “<span class='terminal'>=</span>”, and its value is an object called a
            <dfn id='dfn-named-constructor'>named constructor</dfn>, which allows
            construction of objects that implement the interface.  The property has the
            attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>.
            The characteristics of a named constructor is described in
            <a href='#named-constructors'>section <?sref named-constructors?></a>
            <?sdir named-constructors?>.
          </p>

          <div id='interface-object' class='section'>
            <h4>Interface object</h4>

            <p>
              There exists an interface object for every <a class='dfnref' href='#dfn-interface'>interface</a>
              not declared with the <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
              If the interface is declared with a <a class='xattr' href='#Constructor'>[Constructor]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
              then the interface object is a <a class='dfnref' href='#dfn-function-object'>function object</a>.
            </p>
            <p>
              The <span class='prop'>[[Class]]</span> property of the interface object <span class='rfc2119'>MUST</span>
              be the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the interface.
            </p>
            <p>
              The interface object also has properties that correspond to
              the <a class='dfnref' href='#dfn-constant'>constants</a> and
              <a class='dfnref' href='#dfn-static-operation'>static operations</a>
              defined on that interface, as described in sections
              <a href='#es-constants'><?sref es-constants?></a> and
              <a href='#es-operations'><?sref es-operations?></a>
              <?sdir es-constants?>.
            </p>
            <p>
              The interface object <span class='rfc2119'>MUST</span> also have a property named
              <span class='prop'>prototype</span> with attributes
              <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>
              whose value is an object called the <dfn id='dfn-interface-prototype-object'>interface prototype
                object</dfn>.  This object has properties
              that correspond to the <a class='dfnref' href='#dfn-attribute'>attributes</a> and
              <a class='dfnref' href='#dfn-operation'>operations</a> defined on the interface,
              and is described in more detail in
              <a href='#interface-prototype-object'>section <?sref interface-prototype-object?></a>
              <?sdir interface-prototype-object?>.
            </p>

            <div id='es-interface-call' class='section'>
              <h5>Interface object [[Call]] method</h5>

              <p>
                If the interface is declared with a
                <a class='xattr' href='#Constructor'>[Constructor]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                then the interface object <span class='rfc2119'>MUST</span> have a
                <span class='prop'>[[Call]]</span> internal property, which allows
                construction of objects that implement the given interface.<!--  The behavior
                of this <span class='prop'>[[Construct]]</span> method is not
                necessarily the same as that described for <span class='estype'>Function</span> objects in
                section 13.2.2 of the
                <cite>ECMAScript Language Specification, 5th Edition</cite>
                <a href='#ref-ECMA-262'>[ECMA-262]</a>, but it
                <span class='rfc2119'>MUST</span> return an object that implements
                the given interface if it returns normally (that is, if it does not
                throw an exception).
              </p>
              <p>-->
                In order to define how overloaded constructor invocations
                are resolved within the <span class='prop'>[[Call]]</span> method, the
                <dfn id='dfn-overload-resolution-algorithm'>overload resolution algorithm</dfn>
                is defined.  Its input is an <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>,
                <var>S</var>, and a list of ECMAScript values, <var>arg</var><sub>0..<var>n</var>−1</sub>.
                The algorithm behaves as follows:
              </p>
              <div class='ednote'>
                <p>Need to test how implementations actually behave when passed too few or too many arguments.
                  <a href='http://www.w3.org/mid/Pine.LNX.4.62.0804110237010.7575@hixie.dreamhostps.com'>(Mail.)</a></p>
              </div>
              <ol class='algorithm'>
                <li>
                  Initialize <var>R</var> to a set with the same values as <var>S</var>.
                </li>
                <!--
                <li>
                  Remove from <var>R</var> all entries whose type list is
                  longer than <var>n</var>.
                </li>
                -->
                <li>
                  Remove from <var>R</var> all entries whose type list is
                  not equal to <var>n</var>.
                </li>
                <li>
                  If <var>R</var> contains more than one entry:
                  <ol>
                    <li>
                      Initialize <var>i</var> to 0.
                    </li>
                    <li>
                      While <var>i</var> &lt; <var>n</var>:
                      <ol>
                        <li>
                          Initialize <var>types</var> to the set of IDL types
                          { <span class='idltype'>any</span> }.
                        </li>
                        <li>
                          Depending on the value of <var>arg</var><sub><var>i</var></sub>:
                          <dl class='switch'>
                            <dt>An <span class='estype'>Undefined</span>,
                              <span class='estype'>Boolean</span> or
                              <span class='estype'>Number</span> value</dt>
                            <dd>
                              Add to <var>types</var> the <a class='dfnref' href='#dfn-primitive-type'>primitive types</a> and
                              <a class='dfnref' href='#dfn-nullable-type'>nullable</a> primitive types.
                            </dd>
                            <dt>A <span class='estype'>String</span> value</dt>
                            <dd>
                              Add to <var>types</var> the <span class='idltype'>DOMString</span> and <span class='idltype'>DOMString?</span> types.
                            </dd>
                            <dt><span class='esvalue'>null</span></dt>
                            <dd>
                              Add to <var>types</var> the <a class='dfnref' href='#dfn-object-type'>object types</a>,
                              all nullable types and all <a href='#idl-array'>array types</a>.
                            </dd>
                            <dt>A <a class='dfnref' href='#dfn-array-host-object'>array host object</a></dt>
                            <dd>
                              Add to <var>types</var> the <span class='idltype'>object</span> type
                              and an <a href='#idl-array'>array type</a> that corresponds to
                              the type of the IDL array the host array object represents.
                            </dd>
                            <dt>Any other host object</dt>
                            <dd>
                              Add to <var>types</var> the <span class='idltype'>object</span> type
                              and an <a href='#idl-interface'>interface type</a>
                              for all <a class='dfnref' href='#dfn-interface'>interfaces</a>
                              that are equal to, or <a class='dfnref' href='#dfn-inherit'>inherit</a> from, at least one
                              of the interfaces that the host object implements.
                            </dd>
                            <dt>A native <span class='estype'>Array</span> object</dt>
                            <dd>
                              (That is, a native object whose <span class='prop'>[[Class]]</span> is <span class='esstring'>"Array"</span>.)
                              Add to <var>types</var> the <span class='idltype'>object</span> type,
                              an <a href='#idl-interface'>interface type</a>
                              for each interface annotated with the <a class='xattr' href='#Callback'>[Callback]</a>
                              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                              and all <a href='#idl-array'>array types</a>.
                            </dd>
                            <dt>Any other native object</dt>
                            <dd>
                              Add to <var>types</var> the <span class='idltype'>object</span> type
                              and an <a href='#idl-interface'>interface type</a>
                              for each interface annotated with the <a class='xattr' href='#Callback'>[Callback]</a>
                              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
                            </dd>
                          </dl>
                        </li>
                        <li>
                          Remove from <var>R</var> all entries with type list
                          <var>t</var> and boolean list <var>a</var> where
                          <var>a</var><sub><var>i</var></sub> is <span class='idlvalue'>false</span>
                          and <var>t</var><sub><var>i</var></sub> ∉ <var>types</var>.
                        </li>
                        <li>
                          If there exists an entry in <var>R</var>
                          with type list <var>t</var> where
                          <var>t</var><sub><var>i</var></sub> ∈ <var>types</var>,
                          then remove from <var>R</var> all entries with type list
                          <var>t</var> where
                          <var>t</var><sub><var>i</var></sub> ∉ <var>types</var>.
                        </li>
                        <li>Set <var>i</var> to <var>i</var> + 1.</li>
                      </ol>
                    </li>
                  </ol>
                </li>
                <li>Return <var>R</var>.</li>
              </ol>
              <p>
                The internal <span class='prop'>[[Call]]</span> method
                of the interface object behaves as follows, assuming
                <var>arg</var><sub>0..<var>n</var>−1</sub> is the list
                of argument values passed to the constructor, and <var>I</var>
                is the <a class='dfnref' href='#dfn-interface'>interface</a>:
              </p>
              <ol class='algorithm'>
                <li>
                  Let <var>id</var> be the identifier of interface <var>I</var>.
                </li>
                <li>
                  Initialize <var>S</var> to the
                  <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                  for constructors with <a class='dfnref' href='#dfn-identifier'>identifier</a>
                  <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                  <var>I</var> and with argument count <var>n</var> (for the ECMAScript language binding).
                </li>
                <li>
                  Set <var>S</var> to the result of passing <var>S</var> and
                  <var>arg</var><sub>0..<var>n</var>−1</sub> to the
                  <a class='dfnref' href='#dfn-overload-resolution-algorithm'>overload resolution algorithm</a>.
                </li>
                <li>
                  If <var>S</var> is empty, throw a <span class='estype'>TypeError</span>.
                </li>
                <li>
                  If <var>S</var> contains more than one entry, then the
                  constructor call is ambiguous.  Remove all but one entry from
                  <var>S</var> according to rules specified in the description
                  of <a class='dfnref' href='#dfn-interface'>interface</a>
                  <var>I</var>, or arbitrarily if no such rules exist.
                </li>
                <li>
                  Let <var>x</var> be the <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                  that represents the constructor and <var>t</var><sub>0..<var>m</var>−1</sub> be the type
                  list of the single entry in <var>S</var>.
                </li>
                <li>
                  Let <var>idlarg</var><sub>0..<var>m</var>−1</sub> be a list
                  of IDL values, where <var>idlarg</var><sub><var>i</var></sub>
                  is the result of
                  <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                  <var>arg</var><sub><var>i</var></sub> to an IDL value.
                </li>
                <li x:step='a'>
                  Let <var>R</var> be the result of performing the actions listed in the description of
                  the constructor represented by <var>x</var>
                  with <var>idlarg</var><sub>0..<var>m</var>−1</sub>
                  as the argument values.
                </li>
                <li>
                  If the actions performed in the previous step resulted
                  in an exception being thrown, then allow that exception
                  to propagate out from this algorithm.  Otherwise,
                  return the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                  <var>R</var> to an ECMAScript <a href='#idl-interface'>interface type</a> value
                  <var>I</var>.
                </li>
              </ol>
              <p>
                If the internal <span class='prop'>[[Call]]</span> method
                of the <a class='dfnref' href='#dfn-interface-object'>interface object</a>
                returns normally, then it <span class='rfc2119'>MUST</span>
                return an object that implements interface <var>I</var>.
              </p>
              <p>
                Interface objects for interfaces declared with a <a class='xattr' href='#Constructor'>[Constructor]</a>
                extended attribute <span class='rfc2119'>MUST</span> have a property named <span class='esstring'>"length"</span>
                with attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>
                whose value is a <span class='estype'>Number</span> determined as follows:
              </p>
              <ol class='algorithm'>
                <li>
                  Let <var>id</var> be the identifier of interface <var>I</var>.
                </li>
                <li>
                  Initialize <var>S</var> to the
                  <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                  for constructors with
                  <a class='dfnref' href='#dfn-identifier'>identifier</a>
                  <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                  <var>I</var> and with argument count 0 (for the ECMAScript language binding).
                </li>
                <li>
                  Return the maximum argument list length of the constructors in the entries of <var>S</var>.
                </li>
              </ol>
            </div>

            <div id='es-interface-hasinstance' class='section'>
              <h5>Interface object [[HasInstance]] method</h5>

              <p>
                The internal <span class='prop'>[[HasInstance]]</span> method of every
                <a class='dfnref' href='#dfn-interface-object'>interface object</a>
                <var>A</var> <span class='rfc2119'>MUST</span> behave as follows,
                assuming <var>V</var> is the object
                argument passed to <span class='prop'>[[HasInstance]]</span>:
              </p>
              <ol class='algorithm'>
                <li>If <var>V</var> is not an object, return <span class='esvalue'>false</span>.</li>
                <li>Let <var>O</var> be the result of calling the <span class='prop'>[[Get]]</span> method of <var>A</var> with property name <span class='esstring'>"prototype"</span>.</li>
                <li>If <var>O</var> is not an object, throw a <span class='estype'>TypeError</span> exception.</li>
                <li>If <var>V</var> is a host object that implements the
                  interface for which <var>O</var> is the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>,
                  return <span class='esvalue'>true</span>.</li>
                <li>Repeat:
                  <ol>
                    <li>Set <var>V</var> to the value of the <span class='prop'>[[Prototype]]</span> internal property of <var>V</var>.</li>
                    <li>If <var>V</var> is <span class='esvalue'>null</span>, return <span class='esvalue'>false</span>.</li>
                    <li>If <var>O</var> and <var>V</var> refer to the same object,
                      return <span class='esvalue'>true</span>.</li>
                  </ol>
                </li>
              </ol>
            </div>
          </div>

          <div id='named-constructors' class='section'>
            <h4>Named constructors</h4>

            <p>
              A <a class='dfnref' href='#dfn-named-constructor'>named constructor</a>
              that exists due to one or more
              <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
              with a given <a class='dfnref' href='#dfn-identifier'>identifier</a>
              is a <a class='dfnref' href='#dfn-function-object'>function object</a>.
              It <span class='rfc2119'>MUST</span> have a <span class='prop'>[[Call]]</span>
              internal property, which allows construction of objects that
              implement the interface on which the
              <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              extended attributes appear.  It behaves as follows, assuming
              <var>arg</var><sub>0..<var>n</var>−1</sub> is the list
              of argument values passed to the constructor, <var>id</var>
              is the identifier of the constructor specified in the
              extended attribute <a class='dfnref' href='#dfn-xattr-named-argument-list'>named argument list</a>,
              and <var>I</var> is the <a class='dfnref' href='#dfn-interface'>interface</a>
              on which the <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>
              extended attribute appears:
            </p>
            <ol class='algorithm'>
              <li>
                Initialize <var>S</var> to the
                <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                for constructors with <a class='dfnref' href='#dfn-identifier'>identifier</a>
                <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                <var>I</var> and with argument count <var>n</var> (for the ECMAScript language binding).
              </li>
              <li>
                Set <var>S</var> to the result of passing <var>S</var> and
                <var>arg</var><sub>0..<var>n</var>−1</sub> to the
                <a class='dfnref' href='#dfn-overload-resolution-algorithm'>overload resolution algorithm</a>.
              </li>
              <li>
                If <var>S</var> is empty, throw a <span class='estype'>TypeError</span>.
              </li>
              <li>
                If <var>S</var> contains more than one entry, then the
                constructor call is ambiguous.  Remove all but one entry from
                <var>S</var> according to rules specified in the description
                of <a class='dfnref' href='#dfn-interface'>interface</a>
                <var>I</var>, or arbitrarily if no such rules exist.
              </li>
              <li>
                Let <var>x</var> be the <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
                that represents the constructor, and <var>t</var><sub>0..<var>m</var>−1</sub> be the type
                list, of the single entry in <var>S</var>.
              </li>
              <li>
                Let <var>idlarg</var><sub>0..<var>m</var>−1</sub> be a list
                of IDL values, where <var>idlarg</var><sub><var>i</var></sub>
                is the result of
                <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                <var>arg</var><sub><var>i</var></sub> to an IDL value.
              </li>
              <li>
                Let <var>R</var> be the result of performing the actions listed in the description of
                the constructor represented by <var>x</var>
                with <var>idlarg</var><sub>0..<var>m</var>−1</sub>
                as the argument values.
              </li>
              <li>
                If the actions performed in the previous step resulted
                in an exception being thrown, then allow that exception
                to propagate out from this algorithm.  Otherwise,
                return the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                <var>R</var> to an ECMAScript
                <a href='#idl-interface'>interface type</a> value
                <var>I</var>.
              </li>
            </ol>
            <p>
              If the internal <span class='prop'>[[Call]]</span> method
              of the <a class='dfnref' href='#dfn-named-constructor'>named constructor</a>
              returns normally, then it <span class='rfc2119'>MUST</span>
              return an object that implements interface <var>I</var>.
            </p>
            <p>
              A named constructor <span class='rfc2119'>MUST</span> have a property named <span class='esstring'>"length"</span>
              with attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>
              whose value is a <span class='estype'>Number</span> determined as follows:
            </p>
            <ol class='algorithm'>
              <li>
                Initialize <var>S</var> to the
                <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                for constructors with
                <a class='dfnref' href='#dfn-identifier'>identifier</a>
                <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                <var>I</var> and with argument count 0 (for the ECMAScript language binding).
              </li>
              <li>
                Return the maximum argument list length of the constructors in the entries of <var>S</var>.
              </li>
            </ol>
          </div>

          <div id='interface-prototype-object' class='section'>
            <h4>Interface prototype object</h4>

            <p>
              There <span class='rfc2119'>MUST</span> exist an
              <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype
                object</a> for every <a class='dfnref' href='#dfn-interface'>interface</a>
              defined, regardless of whether the interface was declared with the
              <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
              The interface prototype object for a particular interface has
              properties that correspond to the <a class='dfnref' href='#dfn-attribute'>attributes</a>
              and <a class='dfnref' href='#dfn-operation'>operations</a>
              defined on that interface.  These properties are described in more detail in
              sections <a href='#es-attributes'><?sref es-attributes?></a> and
              <a href='#es-operations'><?sref es-operations?></a> <?sdir es-operations?>.
            </p>
            <p>
              As with the <a class='dfnref' href='#dfn-interface-object'>interface object</a>,
              the interface prototype object also has properties that correspond to the
              <a class='dfnref' href='#dfn-constant'>constants</a> defined on that
              interface, described in <a href='#es-operations'>section
                <?sref es-constants?></a> <?sdir es-constants?>.
            </p>
            <p>
              The interface prototype object <span class='rfc2119'>MUST</span>
              also have a property named <span class='prop'>constructor</span> with attributes
              <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>true</span> }</span> whose value
              is a reference to the interface object for the interface.
            </p>
            <p>
              The value of the internal <span class='prop'>[[Prototype]]</span>
              property of the <a class='dfnref' href='#dfn-interface-prototype-object'>interface
                prototype object</a> depends on the structure of the interface’s
              inheritance hierarchy — specifically, what the interface’s <em>prototype
                parent</em> is, and whether it has any <em>mixin</em> interfaces.
            </p>
            <p>
              The <dfn id='dfn-prototype-parent'>prototype parent</dfn> of an interface,
              <var>A</var>, is defined as follows.  If interface <var>A</var> is declared to
              <a class='dfnref' href='#dfn-inherit'>inherit</a> from one or more
              other interfaces then the first interface identified by the
              <a class='nt' href='#prod-InterfaceInheritance'>InterfaceInheritance</a>
              non-terminal that has an ancestor interface with the
              <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              is interface <var>A</var>’s prototype parent.  Otherwise,
              interface <var>A</var> has no prototype parent.  The
              <dfn id='dfn-prototype-ancestor'>prototype ancestors</dfn> of <var>A</var>
              is the set of interfaces that includes <var>A</var>’s prototype
              parent (if it exists), and the prototype parent of any other prototype ancestor
              of <var>A</var>.
            </p>
            <p>
              A <dfn id='dfn-mixin'>mixin</dfn> of an interface, <var>A</var>, is
              any interface that is not one of <var>A</var>’s
              <a class='dfnref' href='#dfn-prototype-ancestor'>prototype ancestors</a>,
              and also:
            </p>
            <ul>
              <li>is an explicit ancestor interface of <var>A</var>;</li>
              <li>is identified by an <a class='dfnref' href='#dfn-implements-statement'>implements statement</a>
                as being implemented on all objects of type <var>A</var>;</li>
              <li>is a mixin of any other of <var>A</var>’s mixins; or</li>
              <li>is an explicit ancestor interface of any other of <var>A</var>’s mixins.</li>
            </ul>
            <p>
              The value of the internal <span class='prop'>[[Prototype]]</span>
              property of an interface’s
              <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              is determined as follows:
            </p>
            <ul>
              <li>If the interface has no <a class='dfnref' href='#dfn-mixin'>mixins</a> and
                no <a class='dfnref' href='#dfn-prototype-parent'>prototype parent</a>, then
                the internal <span class='prop'>[[Prototype]]</span> property’s
                value is a reference to the <span class='estype'>Object</span> prototype object.</li>
              <li>Otherwise, if the interface has no <a class='dfnref' href='#dfn-mixin'>mixins</a>
                but does have a <a class='dfnref' href='#dfn-prototype-parent'>prototype parent</a>,
                then the internal <span class='prop'>[[Prototype]]</span> property’s
                value is a reference to the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
                of that prototype parent.</li>
              <li>Otherwise, the interface does have <a class='dfnref' href='#dfn-mixin'>mixins</a>.
                The internal <span class='prop'>[[Prototype]]</span> property’s value
                is a reference to the <a class='dfnref' href='#dfn-mixin-prototype-object'>mixin prototype object</a>
                for the interface (defined below).</li>
            </ul>

            <div id='mixin-prototype' class='section'>
              <h5>Mixin prototype object</h5>
              <div class='ednote'>
                <p>Travis requests no mixin prototype objects. <a href='http://lists.w3.org/Archives/Public/public-webapps/2009JulSep/0903.html'>(Mail).</a></p>
              </div>
              <p>
                The <dfn id='dfn-mixin-prototype-object'>mixin prototype object</dfn>
                for an interface is an object as follows:
              </p>
              <ul>
                <li>The object has properties that are the union of all
                  properties that exist on the interface’s
                  <a class='dfnref' href='#dfn-mixin'>mixins</a>’
                  <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype objects</a>.
                  If there are multiple properties with the same name,
                  then it is undefined which of those properties ends up on
                  the mixin prototype object.
                </li>
                <li>
                  The object’s internal <span class='prop'>[[Prototype]]</span> property
                  value is a reference to the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
                  for the interface’s <a class='dfnref' href='#dfn-prototype-parent'>prototype parent</a>,
                  or, if the interface has no prototype parent, a reference to the <span class='estype'>Object</span>
                  prototype object.</li>
              </ul>
              <div class='ednote'>
                <p>Maybe the functions on mixin prototype objects should just call the relevant function on the original interface’s prototype object.
                  That way you could overwrite EventTarget.prototype.addEventListener, for example, and the addEventListener
                  in the prototype chain of a Node would end up calling that new function. <a href='http://www.w3.org/mid/Pine.LNX.4.62.0804110439230.7575@hixie.dreamhostps.com'>(Mail.)</a></p>
              </div>
              <p>
                If two <a class='dfnref' href='#dfn-interface'>interfaces</a> have the same set
                of <a class='dfnref' href='#dfn-mixin'>mixins</a>, and either both have the same
                <a class='dfnref' href='#dfn-prototype-parent'>prototype parent</a> or both have no
                prototype parent, then their <a class='dfnref' href='#dfn-mixin-prototype-object'>mixin prototype objects</a>
                <span class='rfc2119'>MUST</span> be the same object.
              </p>
            </div>
          </div>

          <div id='es-constants' class='section'>
            <h4>Constants</h4>

            <p>
              For each <a class='dfnref' href='#dfn-constant'>constant</a> defined on
              the <a class='dfnref' href='#dfn-interface'>interface</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding property on
              the <a class='dfnref' href='#dfn-interface-object'>interface object</a>,
              if it exists, if the <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of the constant is not “prototype”.  The property has the following characteristics:
            </p>
            <ul>
              <li>The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the <a class='dfnref' href='#dfn-constant'>constant</a>.</li>
              <li>The value of the property is that which is obtained by <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> the <a class='dfnref' href='#dfn-constant'>constant</a>’s IDL value to an ECMAScript value.</li>
              <li>The property has attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>true</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>.</li>
            </ul>
            <p>
              In addition, a property with the same characteristics <span class='rfc2119'>MUST</span>
              exist on the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>,
              unless:
            </p>
            <ul>
              <li>the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the
                <a class='dfnref' href='#dfn-constant'>constant</a> is “constructor”; or</li>
              <li>the identifier of the constant is “toString” and
                the interface has a <a class='dfnref' href='#dfn-stringifier'>stringifier</a>.</li>
            </ul>
          </div>

          <div id='es-attributes' class='section'>
            <h4>Attributes</h4>

            <p>
              For each <a class='dfnref' href='#dfn-attribute'>attribute</a> defined on
              the <a class='dfnref' href='#dfn-interface'>interface</a> whose <a class='dfnref' href='#dfn-identifier'>identifier</a>
              is not “constructor”, there
              <span class='rfc2119'>MUST</span> be a corresponding property on
              the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>,
              unless:
            </p>
            <ul>
              <li>the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the attribute is “constructor”; or</li>
              <li>the identifier of the attribute is “toString” and the interface has a <a class='dfnref' href='#dfn-stringifier'>stringifier</a>.</li>
            </ul>
            <p>
              The characteristics of these properties are as follows:
            </p>
            <ul>
              <li>
                The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the <a class='dfnref' href='#dfn-attribute'>attribute</a>.
              </li>
              <li>
                The property has attributes <span class='descriptor'>{ [[Get]]: <var>G</var>, [[Set]]: <var>S</var>, [[Enumerable]]: <span class='esvalue'>true</span>, [[Configurable]]: <span class='esvalue'>true</span> }</span>,
                where <var>G</var> is the <a class='dfnref' href='#dfn-attribute-getter'>attribute getter</a>
                and <var>S</var> is the <a class='dfnref' href='#dfn-attribute-setter'>attribute setter</a>,
                both of which are defined below.
              </li>
              <li>
                The <dfn id='dfn-attribute-getter'>attribute getter</dfn> is a <span class='estype'>Function</span>
                object whose behavior when invoked is as follows:
                <ol class='algorithm'>
                  <li>Let <var>O</var> be the result of calling ToObject on the <span class='esvalue'>this</span> value.</li>
                  <li>If <var>O</var> is not an instance of the <a class='dfnref' href='#dfn-interface'>interface</a>
                    on which the attribute was declared, then throw a <span class='estype'>TypeError</span>.</li>
                  <li>
                    Let <var>idlValue</var> be the result of performing the actions listed in the description of the attribute that occur when getting,
                    with <var>O</var> as the object.
                  </li>
                  <li>
                    Let <var>V</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                    the <var>idlValue</var> to an ECMAScript value.
                  </li>
                  <li>
                    Return <var>V</var>.
                  </li>
                </ol>
                The value of the <span class='estype'>Function</span> object’s <span class='prop'>length</span>
                property is the <span class='estype'>Number</span> value <span class='esvalue'>0</span>.
              </li>
              <li>
                The <dfn id='dfn-attribute-setter'>attribute setter</dfn> is <span class='esvalue'>undefined</span>
                if the attribute is declared <code>readonly</code> and has neither a
                <a class='xattr' href='#PutForwards'>[PutForwards]</a> nor a <a class='xattr' href='#Replaceable'>[Replaceable]</a>
                <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a> declared on it.
                Otherwise, it is a <span class='estype'>Function</span> object whose behavior when invoked is as follows:
                <ol class='algorithm'>
                  <li>Let <var>O</var> be the result of calling ToObject on the <span class='esvalue'>this</span> value.</li>
                  <li>If <var>O</var> is not an instance of the <a class='dfnref' href='#dfn-interface'>interface</a>
                    on which the attribute was declared, then throw a <span class='estype'>TypeError</span>.</li>
                  <li>Let <var>V</var> be the value of the first argument passed to the <span class='estype'>Function</span>,
                    or <span class='esvalue'>undefined</span> is no arguments were passed.</li>
                  <li>If the attribute is declared with a <a class='xattr' href='#PutForwards'>[PutForwards]</a>
                    extended attribute, then:
                    <ol>
                      <li>Let <var>Q</var> be the result of calling the <span class='prop'>[[Get]]</span> method
                        on <var>O</var> using the identifier of the attribute as the property name.</li>
                      <li>If <var>Q</var> is not an object, then throw a <span class='estype'>TypeError</span>.</li>
                      <li>Let <var>A</var> be the attribute identified by the <a class='xattr' href='#PutForwards'>[PutForwards]</a> extended attribute.</li>
                      <li>Call the <span class='prop'>[[Put]]</span> method on <var>Q</var>
                        using the identifier of <var>A</var> as the property name and <var>V</var> as the value.</li>
                      <li>Return.</li>
                    </ol>
                  </li>
                  <li>If the attribute is declared with a <a class='xattr' href='#Replaceable'>[Replaceable]</a>
                    extended attribute, then:
                    <ol>
                      <li>Let <var>O</var> be the result of calling ToObject on the <span class='esvalue'>this</span> value.</li>
                      <li>If <var>O</var> is not an instance of the interface on which the attribute was declared,
                        then throw a <span class='estype'>TypeError</span>.</li>
                      <li>Let <var>P</var> be the identifier of the attribute.</li>
                      <li>Call the <span class='prop'>[[DefineOwnProperty]]</span> method of <var>O</var>
                        passing property name <var>P</var>, Property Descriptor
                        <span class='desc'>{ [[Value]]: <var>V</var>, [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>true</span>, [[Configurable]]: <span class='esvalue'>true</span> }</span>,
                        and <b>false</b>.</li>
                      <li>Return <span class='esvalue'>undefined</span>.</li>
                    </ol>
                  </li>
                  <li>Let <var>idlValue</var> be the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                    <var>V</var> to an IDL value.</li>
                  <li>Perform the actions listed in the description of the attribute that occur when setting,
                    with <var>O</var> as the object and <var>idlValue</var> as the value.</li>
                  <li>Return <span class='esvalue'>undefined</span>.</li>
                </ol>
                The value of the <span class='estype'>Function</span> object’s <span class='prop'>length</span>
                property is the <span class='estype'>Number</span> value <span class='esvalue'>1</span>.
              </li>
            </ul>
          </div>

          <div id='es-operations' class='section'>
            <h4>Operations</h4>

            <p>
              For each unique <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of a non-<a class='dfnref' href='#dfn-omittable'>omittable</a>
              <a class='dfnref' href='#dfn-operation'>operation</a>
              defined on the <a class='dfnref' href='#dfn-interface'>interface</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding property on
              the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              (if it is a <a class='dfnref' href='#dfn-regular-operation'>regular operation</a>)
              or the <a class='dfnref' href='#dfn-interface-object'>interface object</a>
              (if it is a <a class='dfnref' href='#dfn-static-operation'>static operation</a>),
              unless:
            </p>
            <ul>
              <li>
                the <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                for that <a class='dfnref' href='#dfn-identifier'>identifier</a> and <a class='dfnref' href='#dfn-operation'>operation</a>
                and with an argument count of 0 (for the ECMAScript language binding) has no
                entries; or
              </li>
              <li>the operation is a <a class='dfnref' href='#dfn-regular-operation'>regular operation</a> and its identifier is “constructor”; or</li>
              <li>the operation is a regular operation, its identifier is “toString” and the interface has a <a class='dfnref' href='#dfn-stringifier'>stringifier</a>; or</li>
              <li>the operation is a <a class='dfnref' href='#dfn-static-operation'>static operation</a> and its identifier is “toString”; or</li>
              <li>the operation is a static operation and its identifier is “prototype”.</li>
            </ul>
            <p>
              The characteristics of such a corresponding property are as follows:
            </p>
            <ul>
              <li>The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a>.</li>
              <li>
                The property has attributes
                <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>true</span> }</span>.
              </li>
              <li>
                The value of the property is a <span class='estype'>Function</span> object whose
                behavior is as follows,
                assuming <var>id</var> is the
                <a class='dfnref' href='#dfn-identifier'>identifier</a>,
                <var>arg</var><sub>0..<var>n</var>−1</sub> is the list
                of argument values passed to the function
                and <var>I</var> is the <a class='dfnref' href='#dfn-interface'>interface</a>:
                <ol class='algorithm'>
                  <li>
                    Initialize <var>S</var> to the
                    <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                    for <a class='dfnref' href='#dfn-regular-operation'>regular operations</a>
                    (if the operation is a regular operation) or for
                    <a class='dfnref' href='#dfn-static-operation'>static operations</a>
                    (if the operation is a static operation) with
                    <a class='dfnref' href='#dfn-identifier'>identifier</a>
                    <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                    <var>I</var> and with argument count <var>n</var> (for the ECMAScript language binding).
                  </li>
                  <li>
                    Set <var>S</var> to the result of passing <var>S</var> and
                    <var>arg</var><sub>0..<var>n</var>−1</sub> to the
                    <a class='dfnref' href='#dfn-overload-resolution-algorithm'>overload resolution algorithm</a>.
                  </li>
                  <li>
                    If <var>S</var> is empty, throw a <span class='estype'>TypeError</span>.
                  </li>
                  <li>
                    If <var>S</var> contains more than one entry, then the
                    operation call is ambiguous.  Remove all but one entry from
                    <var>S</var> according to rules specified in the description
                    of <a class='dfnref' href='#dfn-interface'>interface</a>
                    <var>I</var>, or arbitrarily if no such rules exist.
                  </li>
                  <li>
                    Let <var>op</var> be the operation and <var>t</var><sub>0..<var>m</var>−1</sub>
                    be the type list of the single entry in <var>S</var>.
                  </li>
                  <li>
                    Let <var>idlarg</var><sub>0..<var>m</var>−1</sub> be a list
                    of IDL values, where <var>idlarg</var><sub><var>i</var></sub>
                    is the result of
                    <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                    <var>arg</var><sub><var>i</var></sub> to an IDL value.
                  </li>
                  <li>
                    Let <var>R</var> be the result of performing the actions listed in the description of
                    operation <var>op</var> with <var>idlarg</var><sub>0..<var>m</var>−1</sub>
                    as the argument values.
                  </li>
                  <li>
                    If the actions performed in the previous step resulted
                    in an exception being thrown, then allow that exception
                    to propagate out from this algorithm.  Otherwise,
                    return the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                    <var>R</var> to an ECMAScript value of
                    the type <var>op</var> is declared to return.
                  </li>
                </ol>
              </li>
              <li>
                The value of the <span class='estype'>Function</span> object’s <span class='prop'>length</span>
                property is a <span class='estype'>Number</span> determined as follows:
                <ol class='algorithm'>
                  <li>
                    Let <var>S</var> be the
                    <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                    for <a class='dfnref' href='#dfn-regular-operation'>regular operations</a>
                    (if the operation is a regular operation) or for
                    <a class='dfnref' href='#dfn-static-operation'>static operations</a>
                    (if the operation is a static operation) with
                    <a class='dfnref' href='#dfn-identifier'>identifier</a>
                    <var>id</var> on <a class='dfnref' href='#dfn-interface'>interface</a>
                    <var>I</var> and with argument count 0 (for the ECMAScript language binding).
                  </li>
                  <li>
                    Return the maximum argument list length of the functions in the entries of <var>S</var>.
                  </li>
                </ol>
              </li>
            </ul>

            <p>
              In addition, if the <a class='dfnref' href='#dfn-interface'>interface</a>
              has a <a class='dfnref' href='#dfn-stringifier'>stringifier</a>, then
              a property <span class='rfc2119'>MUST</span> exist on
              the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              whose name is <span class='prop'>toString</span> and whose value is a
              <span class='estype'>Function</span> object.  If <span class='terminal'>"stringifier"</span>
              was specified on an <a class='dfnref' href='#dfn-attribute'>attribute</a> <var>A</var>, then the
              function, when invoked,
              <span class='rfc2119'>MUST</span> behave as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>O</var> be the result of calling ToObject on the <span class='esvalue'>this</span> value.</li>
              <li>
                Let <var>V</var> be the result of invoking the <span class='prop'>[[Get]]</span> method of <var>O</var>
                with <var>P</var> as the argument.
              </li>
              <li>Return ToString(<var>V</var>).</li>
            </ol>
            <p>
              If <span class='terminal'>"stringifier"</span>
              was specified on an <a class='dfnref' href='#dfn-operation'>operation</a>
              with an identifier <var>P</var>, then
              the function, when invoked,
              <span class='rfc2119'>MUST</span> behave as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>O</var> be the result of calling ToObject on the <span class='esvalue'>this</span> value.</li>
              <li>
                Let <var>F</var> be the result of invoking the <span class='prop'>[[Get]]</span> method of object
                <var>O</var> with <var>P</var> as the argument.
              </li>
              <li>If <var>F</var> is not callable, throw a <span class='estype'>TypeError</span>.</li>
              <li>Let <var>V</var> be the result of invoking the <span class='prop'>[[Call]]</span> method of <var>F</var>,
                using <var>O</var> as the <span class='esvalue'>this</span> value
                and passing no arguments.</li>
              <li>Return ToString(<var>V</var>).</li>
            </ol>
            <p>
              If <span class='terminal'>"stringifier"</span>
              was specified on an <a class='dfnref' href='#dfn-operation'>operation</a>
              with no identifier,
              then the behavior of the function
              is the <a class='dfnref' href='#dfn-stringification-behavior'>stringification behavior</a>
              of the interface, as described in the prose for the interface.
            </p>
          </div>

        </div>

        <div id='host-objects' class='section'>
          <h3>Host objects implementing interfaces</h3>

          <p>
            The value of the internal <span class='prop'>[[Prototype]]</span>
            property of a host object implementing one or more interfaces depends on
            exactly what <a class='dfnref' href='#dfn-interface'>interfaces</a> it implements,
            and in particular what its <em>primary prototype interface</em> is.
          </p>
          <p>
            If the host object implements an
            <a class='dfnref' href='#dfn-interface'>interface</a> that has
            the <a class='xattr' href='#PrototypeRoot'>[PrototypeRoot]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
            then the interface the host object implements that has the largest
            <a class='dfnref' href='#dfn-prototype-ancestor'>prototype ancestor</a>
            set is deemed to be the <dfn id='dfn-primary-prototype-interface'>primary prototype interface</dfn>
            of the host object.  (If there are multiple such sets, then it is
            undefined what value the internal <span class='prop'>[[Prototype]]</span>
            property has.)  Otherwise, the host object has no
            primary prototype interface.
          </p>
          <p>
            The value of the host object’s internal <span class='prop'>[[Prototype]]</span>
            property is determined as follows:
          </p>
          <ul>
            <li>
              If the host object implements no <a class='dfnref' href='#dfn-interface'>interfaces</a>,
              then its internal <span class='prop'>[[Prototype]]</span> property
              value is a reference to the <span class='estype'>Object</span>
              prototype object.
            </li>
            <li>
              If the host object implements a single
              <a class='dfnref' href='#dfn-interface'>interface</a>, then its
              internal <span class='prop'>[[Prototype]]</span> property is a
              reference to the
              <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              of that interface.
            </li>
            <li>
              Otherwise, if the host object has a <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>
              and implements no interfaces other than its primary
              prototype interface and all of its ancestors, then the value of
              the internal <span class='prop'>[[Prototype]]</span> property is
              a reference to the
              <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
              for the host object’s primary prototype interface.
            </li>
            <li>
              Otherwise, the host object implements at least two
              <a class='dfnref' href='#dfn-interface'>interfaces</a>, and has no
              <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>
              or implements some interfaces other than its primary prototype
              interface and all of its ancestors.  The value of the
              internal <span class='prop'>[[Prototype]]</span> property is
              a reference to the <a class='dfnref' href='#dfn-host-object-mixin-prototype-object'>host
                object mixin prototype object</a> for the host object (defined below).
            </li>
          </ul>
          <p>
            The value of the internal <span class='prop'>[[Class]]</span>
            property of a host object is determined as follows:
          </p>
          <ul>
            <li>
              If the host object implements a single
              <a class='dfnref' href='#dfn-interface'>interface</a>, then the
              value of the internal <span class='prop'>[[Class]]</span>
              property <span class='rfc2119'>MUST</span> be the
              <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of that interface.
            </li>
            <li>
              Otherwise, if the host object has a
              <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>,
              then the value of the internal <span class='prop'>[[Class]]</span>
              property <span class='rfc2119'>MUST</span> be the
              identifier of that interface.
            </li>
            <li>
              Otherwise, no particular value is required to be used for the
              value of the internal <span class='prop'>[[Class]]</span>
              property.
            </li>
          </ul>
          <div class='ednote'>
            <p>Should there be more restrictions on the <span class='prop'>[[Class]]</span>?
              <a href='http://www.w3.org/mid/Pine.LNX.4.62.0903072358030.2690@hixie.dreamhostps.com'>(Mail.)</a></p>
          </div>

          <div id='host-object-mixin-prototype' class='section'>
            <h4>Host object mixin prototype object</h4>

            <p>
              The <dfn id='dfn-host-object-mixin-prototype-object'>host object mixin prototype object</dfn>
              for a given host object is an object as follows:
            </p>
            <ul>
              <li>The object has properties that are the union of all
                properties that exist on the <a class='dfnref' href='#dfn-interface'>interfaces</a>
                that the host object implements and which are not the host object’s
                <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>
                or one of its ancestors.</li>
              <li>The object’s internal <span class='prop'>[[Prototype]]</span> property value
                is a reference to the <a class='dfnref' href='#dfn-interface-prototype-object'>interface prototype object</a>
                for the host object’s <a class='dfnref' href='#dfn-primary-prototype-interface'>primary prototype interface</a>,
                or, if the host object has no primary prototype interface, a reference to the
                <span class='estype'>Object</span> prototype object.</li>
            </ul>
            <p>
              If two host objects implement the same set of
              <a class='dfnref' href='#dfn-interface'>interfaces</a>
              and have references to
              <a class='dfnref' href='#dfn-host-object-mixin-prototype-object'>host object mixin prototype objects</a>
              as their internal <span class='prop'>[[Prototype]]</span> property values,
              then these host object mixin prototype objects
              <span class='rfc2119'>MUST</span> be the same object.
            </p>
          </div>

          <div id='indexed-properties' class='section'>
            <h4>Indexed properties</h4>

            <p>
              If a host object implements an
              <a class='dfnref' href='#dfn-interface'>interface</a> that
              <a class='dfnref' href='#dfn-support-indexed-properties'>supports indexed properties</a>,
              the object will have additional properties that correspond to the
              object’s indexed properties.
              If the host object implements multiple interfaces that
              support indexed properties,
              then it is undefined what additional properties will exist due to
              these indexed properties.
            </p>
            <p>
              Whenever a given index <var>N</var> becomes <a class='dfnref' href='#dfn-supported-property-indices'>supported property index</a>
              on the host object the following steps <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>O</var> be the host object.</li>
              <li>Let <var>I</var> be the <a class='dfnref' href='#dfn-interface'>interface</a> <var>O</var> implements that <a class='dfnref' href='#dfn-support-indexed-properties'>supports indexed properties</a>.</li>
              <li>If the <span class='prop'>[[Extensible]]</span> property of <var>O</var> is <b>false</b>, return.</li>
              <li>Let <var>P</var> be ToString(<var>N</var>).</li>
              <li>Let <var>hasProp</var> be the result of calling <span class='prop'>[[HasProperty]]</span> on <var>O</var> with <var>P</var> as the property name.</li>
              <li>If <var>hasProp</var> is <span class='esvalue'>true</span> and <var>I</var> is not declared with the
                <a class='xattr' href='#OverrideBuiltins'>[OverrideBuiltins]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                return.</li>
              <li>Let <var>get</var> be the <a class='dfnref' href='#dfn-indexed-property-getter'>indexed property getter</a> for interface <var>I</var> and index <var>N</var>.</li>
              <li>Let <var>set</var> be the <a class='dfnref' href='#dfn-indexed-property-setter'>indexed property setter</a> for interface <var>I</var> and index <var>N</var>
                if <var>I</var> declares an <a class='dfnref' href='#dfn-index-setter'>index setter</a>, and <span class='esvalue'>false</span> otherwise.</li>
              <li>Let <var>configurable</var> be <span class='esvalue'>true</span> if <var>I</var> declares an <a class='dfnref' href='#dfn-index-deleter'>index deleter</a>, and <span class='esvalue'>false</span> otherwise.</li>
              <li>Call the <span class='prop'>[[DefineOwnProperty]]</span> method of <var>O</var> passing <var>P</var>, Property Descriptor
                <span class='desc'>{ [[Get]]: <var>get</var>, [[Set]]: <var>set</var>, [[Enumerable]]: <b>true</b>, [[Configurable]]: <var>configurable</var> }</span>,
                and <span class='esvalue'>false</span> as arguments.</li>
            </ol>
            <p>
              The property created by the above steps, if it was created, is called the
              <dfn id='dfn-corresponding-indexed-property'>corresponding indexed property</dfn>.
              Its name is an <dfn id='dfn-array-index-property-name'>array index property name</dfn>,
              which is a property name for which the following algorithm
              returns <span class='esvalue'>true</span>:
            </p>
            <ol class='algorithm'>
              <li>Let <var>i</var> be ToUint32(<var>P</var>).</li>
              <li>Let <var>s</var> be ToString(<var>i</var>).</li>
              <li>If <var>s</var> ≠ <var>P</var> or <var>i</var> = 2<sup>32</sup> − 1, return <span class='esvalue'>false</span>.</li>
              <li>Return <span class='esvalue'>true</span>.</li>
            </ol>
            <p>
              The <dfn id='dfn-indexed-property-getter'>indexed property getter</dfn> for a given <a class='dfnref' href='#dfn-interface'>interface</a>
              <var>I</var> and index <var>N</var> is a <span class='estype'>Function</span>
              object that, when invoked, behaves as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>O</var> be the result of calling ToObject with the <a class='esvalue'>this</a> value.</li>
              <li>If <var>O</var> does not implement <var>I</var>, throw a <span class='estype'>TypeError</span>.</li>
              <li>If <var>N</var> is not currently the <a class='dfnref' href='#dfn-supported-property-indices'>supported property index</a> on <var>O</var>, then throw a <span class='estype'>TypeError</span>.</li>
              <li>Let <var>idlValue</var> be an uninitialized variable.</li>
              <li>If the index getter was defined using an <a class='dfnref' href='#dfn-operation'>operation</a> with an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then:
                <ol>
                  <li>Let <var>T</var> be the <a class='dfnref' href='#dfn-return-type'>return type</a> of the operation.</li>
                  <li>Let <var>F</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>O</var> with the identifier of the operation as the property name.</li>
                  <li>If <var>F</var> is not a callable object, throw a <span class='estype'>TypeError</span>.</li>
                  <li>Let <var>V</var> be the result of calling <span class='prop'>[[Call]]</span> on <var>F</var>, providing <var>O</var> as the <a class='esvalue'>this</a> value and with ToString(<var>N</var>) as the only argument.</li>
                  <li>Set <var>idlValue</var> to the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a> <var>V</var> to an IDL value of type <var>T</var>.</li>
                </ol>
              </li>
              <li>Otherwise, the index getter was defined using an operation without an identifier:
                <ol>
                  <li>Set <var>idlValue</var> to the result of performing the steps listed in the description of the interface to <a class='dfnref' href='#dfn-determine-the-value-of-an-indexed-property'>determine the value of an indexed property</a> for the index given by <var>N</var>.</li>
                </ol>
              </li>
              <li>Set <var>finalValue</var> to the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> <var>idlValue</var> to an ECMAScript value.</li>
              <li>Return <var>finalValue</var>.</li>
            </ol>
            <p>The <span class='prop'>length</span> property of an indexed property getter is the <span class='estype'>Number</span> value <span class='esvalue'>0</span>.</p>
            <p>
              The <dfn id='dfn-indexed-property-setter'>indexed property setter</dfn> for a given <a class='dfnref' href='#dfn-interface'>interface</a> <var>I</var>
              and index <var>N</var> is a <span class='estype'>Function</span>
              object that, when invoked, behaves as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>O</var> be the result of calling ToObject with the <a class='esvalue'>this</a> value.</li>
              <li>If <var>O</var> does not implement <var>I</var>, throw a <span class='estype'>TypeError</span>.</li>
              <li>If <var>N</var> is not currently the <a class='dfnref' href='#dfn-supported-property-indices'>supported property index</a> on <var>O</var>, then throw a <span class='estype'>TypeError</span>.</li>
              <li>Let <var>T</var> be the <a class='dfnref' href='#dfn-return-type'>return type</a> of the operation used to declare the index setter.</li>
              <li>Let <var>V</var> be the value of the first argument passed to the <span class='estype'>Function</span>, or <span class='esvalue'>undefined</span> if no arguments were passed.</li>
              <li>Let <var>idlValue</var> be the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a> <var>V</var> to an IDL value of type <var>T</var>.</li>
              <li>If the index getter was defined using an <a class='dfnref' href='#dfn-operation'>operation</a> without an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then:
                <ol>
                  <li>Perform the steps listed in the interface description to <a class='dfnref' href='#dfn-set-the-value-of-an-existing-indexed-property'>set the value of an existing indexed property</a> with <var>N</var> as the index and <var>idlValue</var> as the value.</li>
                </ol>
              </li>
              <li>Otherwise, the index setter was defined using an operation with an identifier:
                <ol>
                  <li>Let <var>F</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>O</var> with the identifier of the operation as the property name.</li>
                  <li>If <var>F</var> is not a callable object, throw a <span class='estype'>TypeError</span>.</li>
                  <li>Let <var>finalValue</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> <var>idlValue</var> to an ECMAScript value.</li>
                  <li>Call the <span class='prop'>[[Call]]</span> method of <var>F</var>, providing <var>O</var> as the <span class='esvalue'>this</span> value and <var>finalValue</var> as the only argument.</li>
                </ol>
              </li>
            </ol>
            <p>The <span class='prop'>length</span> property of an indexed property setter is the <span class='estype'>Number</span> value <span class='esvalue'>1</span>.</p>
            <!--
            <p>
              The <a class='dfnref' href='#dfn-indexed-property-getter'>indexed property getter</a>
              for a given <a class='dfnref' href='#dfn-interface'>interface</a> and index
              <span class='rfc2119'>MUST</span> be unique.  If
              a <a class='dfnref' href='#dfn-corresponding-indexed-property'>corresponding indexed property</a>
              for a given index is removed and then later is recreated, it uses the same
              indexed property getter.
            </p>
            -->
            <p>
              As soon as an index <var>N</var> stops being a <a class='dfnref' href='#dfn-supported-property-indices'>supported property index</a>,
              then its <a class='dfnref' href='#dfn-corresponding-indexed-property'>corresponding indexed property</a>,
              if it exists, <span class='rfc2119'>MUST</span> be removed from the host object.
            </p>

            <p>
              Support for <a class='dfnref' href='#dfn-index-creator'>index creators</a>
              is handled by the <a href='#defineownproperty'>host object [[DefineOwnProperty]] method</a>
              defined in section <?sref defineownproperty?>, and
              support for <a class='dfnref' href='#dfn-index-deleter'>index deleters</a>
              is handled by the <a href='#delete'>host object [[Delete]] method</a>
              defined in section <?sref delete?>.
            </p>
          </div>

          <div id='named-properties' class='section'>
            <h4>Named properties</h4>

            <p>
              If a host object implements an
              <a class='dfnref' href='#dfn-interface'>interface</a> that
              <a class='dfnref' href='#dfn-support-named-properties'>supports named properties</a>,
              the object will have additional properties that correspond to the
              object’s named properties.  If the host object implements multiple
              interfaces that support named properties, then it is undefined
              what additional properties will exist due to these named properties.
            </p>
            <p>
              Whenever a given string <var>N</var> becomes <a class='dfnref' href='#dfn-supported-property-names'>a supported property name</a>
              on the host object the following steps <span class='rfc2119'>MUST</span> be followed:
            </p>
            <ol class='algorithm'>
              <li>Let <var>O</var> be the host object.</li>
              <li>Let <var>I</var> be the <a class='dfnref' href='#dfn-interface'>interface</a> <var>O</var> implements that <a class='dfnref' href='#dfn-support-indexed-properties'>supports indexed properties</a>.</li>
              <li>If the <span class='prop'>[[Extensible]]</span> property of <var>O</var> is <b>false</b>, return.</li>
              <li>If <var>I</var> <a class='dfnref' href='#dfn-support-indexed-properties'>supports indexed properties</a> and
                <var>N</var> is a <a class='dfnref' href='#dfn-array-index-property-name'>array index property name</a>, return.</li>
              <li>Let <var>hasProp</var> be the result of calling <span class='prop'>[[HasProperty]]</span> on <var>O</var> with <var>P</var> as the property name.</li>
              <li>If <var>hasProp</var> is <span class='esvalue'>true</span> and <var>I</var> is not declared with the
                <a class='xattr' href='#OverrideBuiltins'>[OverrideBuiltins]</a> <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
                return.</li>
              <li>Let <var>get</var> be the <a class='dfnref' href='#dfn-named-property-getter'>named property getter</a> for interface <var>I</var> and name <var>N</var>.</li>
              <li>Let <var>set</var> be the <a class='dfnref' href='#dfn-named-property-setter'>named property setter</a> for interface <var>I</var> and name <var>N</var>
                if <var>I</var> declares a <a class='dfnref' href='#dfn-name-setter'>name setter</a>, and <span class='esvalue'>false</span> otherwise.</li>
              <li>Let <var>configurable</var> be <span class='esvalue'>true</span> if <var>I</var> declares an <a class='dfnref' href='#dfn-index-deleter'>index deleter</a>, and <span class='esvalue'>false</span> otherwise.</li>
              <li>Call the <span class='prop'>[[DefineOwnProperty]]</span> method of <var>O</var> passing <var>P</var>, Property Descriptor
                <span class='desc'>{ [[Get]]: <var>get</var>, [[Set]]: <var>set</var>, [[Enumerable]]: <b>true</b>, [[Configurable]]: <var>configurable</var> }</span>,
                and <span class='esvalue'>false</span> as arguments.</li>
            </ol>
            <p>
              The property created by the above steps, if it was created, is called the
              <dfn id='dfn-corresponding-named-property'>corresponding named property</dfn>.
            </p>
            <p>
              The <dfn id='dfn-named-property-getter'>named property getter</dfn> for a given <a class='dfnref' href='#dfn-interface'>interface</a> <var>I</var>
              and name <var>N</var> is a <span class='estype'>Function</span>
              object that, when invoked, behaves as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>O</var> be the result of calling ToObject with the <a class='esvalue'>this</a> value.</li>
              <li>If <var>O</var> does not implement the <a class='dfnref' href='#dfn-interface'>interface</a> that defined the <a class='dfnref' href='#dfn-name-getter'>name getter</a>, throw a <span class='estype'>TypeError</span>.</li>
              <li>If <var>N</var> is not currently the <a class='dfnref' href='#dfn-supported-property-names'>supported named property</a> on <var>O</var>, then throw a <span class='estype'>TypeError</span>.</li>
              <li>Let <var>idlValue</var> be an uninitialized variable.</li>
              <li>If the name getter was defined using an <a class='dfnref' href='#dfn-operation'>operation</a> with an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then:
                <ol>
                  <li>Let <var>T</var> be the <a class='dfnref' href='#dfn-return-type'>return type</a> of the operation.</li>
                  <li>Let <var>F</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>O</var> with the identifier of the operation as the property name.</li>
                  <li>If <var>F</var> is not a callable object, throw a <span class='estype'>TypeError</span>.</li>
                  <li>Let <var>V</var> be the result of calling <span class='prop'>[[Call]]</span> on <var>F</var>, providing <var>O</var> as the <a class='esvalue'>this</a> value and with <var>N</var> as the only argument.</li>
                  <li>Set <var>idlValue</var> to the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a> <var>V</var> to an IDL value of type <var>T</var>.</li>
                </ol>
              </li>
              <li>Otherwise, the name getter was defined using an operation without an identifier:
                <ol>
                  <li>Set <var>idlValue</var> to the result of performing the steps listed in the description of the interface to <a class='dfnref' href='#dfn-determine-the-value-of-a-named-property'>determine the value of a named property</a> for the name given by <var>N</var>.</li>
                </ol>
              </li>
              <li>Set <var>finalValue</var> to the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> <var>idlValue</var> to an ECMAScript value.</li>
              <li>Return <var>finalValue</var>.</li>
            </ol>
            <p>The <span class='prop'>length</span> property of an named property getter is the <span class='estype'>Number</span> value <span class='esvalue'>0</span>.</p>
            <p>
              The <dfn id='dfn-named-property-setter'>named property setter</dfn> for a given <a class='dfnref' href='#dfn-interface'>interface</a> <var>I</var>
              and name <var>N</var> is a <span class='estype'>Function</span>
              object that, when invoked, behaves as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>O</var> be the result of calling ToObject with the <a class='esvalue'>this</a> value.</li>
              <li>If <var>O</var> does not implement the <a class='dfnref' href='#dfn-interface'>interface</a> that defined the <a class='dfnref' href='#dfn-name-setter'>name setter</a>, throw a <span class='estype'>TypeError</span>.</li>
              <li>If <var>L</var> is not currently the <a class='dfnref' href='#dfn-supported-property-names'>supported property name</a> on <var>O</var>, then throw a <span class='estype'>TypeError</span>.</li>
              <li>Let <var>T</var> be the <a class='dfnref' href='#dfn-return-type'>return type</a> of the operation used to declare the name setter.</li>
              <li>Let <var>V</var> be the value of the first argument passed to the <span class='estype'>Function</span>, or <span class='esvalue'>undefined</span> if no arguments were passed.</li>
              <li>Let <var>idlValue</var> be the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a> <var>V</var> to an IDL value of type <var>T</var>.</li>
              <li>If the name getter was defined using an <a class='dfnref' href='#dfn-operation'>operation</a> without an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then:
                <ol>
                  <li>Perform the steps listed in the interface description to <a class='dfnref' href='#dfn-set-the-value-of-an-existing-named-property'>set the value of an existing named property</a> with <var>N</var> as the name and <var>idlValue</var> as the value.</li>
                </ol>
              </li>
              <li>Otherwise, the name setter was defined using an operation with an identifier:
                <ol>
                  <li>Let <var>F</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>O</var> with the identifier of the operation as the property name.</li>
                  <li>If <var>F</var> is not a callable object, throw a <span class='estype'>TypeError</span>.</li>
                  <li>Let <var>finalValue</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> <var>idlValue</var> to an ECMAScript value.</li>
                  <li>Call the <span class='prop'>[[Call]]</span> method of <var>F</var>, providing <var>O</var> as the <span class='esvalue'>this</span> value and <var>finalValue</var> as the only argument.</li>
                </ol>
              </li>
            </ol>
            <p>The <span class='prop'>length</span> property of an named property setter is the <span class='estype'>Number</span> value <span class='esvalue'>1</span>.</p>
            <!--
            <p>
              For a given combination of <a class='dfnref' href='#dfn-interface'>interface</a> and
              possible <a class='dfnref' href='#dfn-supported-property-names'>supported name property</a>
              there <span class='rfc2119'>MUST</span> be a unique
              <a class='dfnref' href='#dfn-named-property-getter'>named property getter</a>.  If
              a <a class='dfnref' href='#dfn-corresponding-named-property'>corresponding named property</a>
              for a given name is removed and then later is recreated, it uses the same
              named property getter.
            </p>
            -->
            <p>
              As soon as a given string <var>N</var> stops being <a class='dfnref' href='#dfn-supported-property-names'>supported property name</a>,
              then its <a class='dfnref' href='#dfn-corresponding-named-property'>corresponding named property</a>,
              if it exists, <span class='rfc2119'>MUST</span> be removed from the host object.
            </p>

            <p>
              Support for <a class='dfnref' href='#dfn-name-creator'>name creators</a>
              is handled by the <a href='#defineownproperty'>host object [[DefineOwnProperty]] method</a>
              defined in section <?sref defineownproperty?>, and
              support for <a class='dfnref' href='#dfn-name-deleter'>name deleters</a>
              is handled by the <a href='#delete'>host object [[Delete]] method</a>
              defined in section <?sref delete?>.
            </p>
          </div>

          <div id='defineownproperty' class='section'>
            <h4>Host object [[DefineOwnProperty]] method</h4>

            <p>
              The internal <span class='prop'>[[DefineOwnProperty]]</span> method of every
              host object <var>O</var> that implements an <a class='dfnref' href='#dfn-interface'>interface</a>
              with a <a class='dfnref' href='#dfn-creator'>creator</a>
              <span class='rfc2119'>MUST</span> behave as follows, assuming <var>P</var> is the property name and <var>V</var>
              is the property value passed to <span class='prop'>[[Put]]</span>:
            </p>

            <ol class='algorithm'>
              <li>
                If <var>O</var> implements an interface with an <a class='dfnref' href='#dfn-index-creator'>index creator</a>
                and <var>P</var> is an <a class='dfnref' href='#dfn-array-index-property-name'>array index property name</a>, then:
                <ol>
                  <li>Let <var>T</var> be the <a class='dfnref' href='#dfn-return-type'>return type</a> of the operation used to declare the index creator.</li>
                  <li>Let <var>idlValue</var> be the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a> <var>V</var> to an IDL value of type <var>T</var>.</li>
                  <li>
                    If the index creator was defined using an <a class='dfnref' href='#dfn-operation'>operation</a>
                    without an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then:
                    <ol>
                      <li>Perform the steps listed in the interface description to
                        <a class='dfnref' href='#dfn-set-the-value-of-a-new-indexed-property'>set the value of a new indexed property</a>
                        with ToUint32(<var>P</var>) as the index and <var>idlValue</var> as the value.</li>
                    </ol>
                  </li>
                  <li>
                    Otherwise, the index creator was defined using an operation with an identifier:
                    <ol>
                      <li>Let <var>F</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>O</var> with the identifier of the operation.</li>
                      <li>If <var>F</var> is not a callable object, throw a <span class='estype'>TypeError</span>.</li>
                      <li>Let <var>finalValue</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> <var>idlValue</var> to an ECMAScript value.</li>
                      <li>Invoke the <span class='prop'>[[Call]]</span> method of <var>F</var>, providing <var>O</var> as the this value and with ToUint32(<var>P</var>) and <var>finalValue</var> as the two argument values.</li>
                    </ol>
                  </li>
                  <li>Return.</li>
                </ol>
              </li>
              <li>
                If <var>O</var> implements an interface with a <a class='dfnref' href='#dfn-name-creator'>name creator</a>, then:
                <ol>
                  <li>Let <var>T</var> be the <a class='dfnref' href='#dfn-return-type'>return type</a> of the operation used to declare the name creator.</li>
                  <li>Let <var>idlValue</var> be the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a> <var>V</var> to an IDL value of type <var>T</var>.</li>
                  <li>
                    If the name creator was defined using an <a class='dfnref' href='#dfn-operation'>operation</a>
                    without an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then:
                    <ol>
                      <li>Perform the steps listed in the interface description to
                        <a class='dfnref' href='#dfn-set-the-value-of-a-new-named-property'>set the value of a new named property</a>
                        with <var>P</var> as the name and <var>idlValue</var> as the value.</li>
                    </ol>
                  </li>
                  <li>
                    Otherwise, the name creator was defined using an operation with an identifier:
                    <ol>
                      <li>Let <var>F</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>O</var> with the identifier of the operation.</li>
                      <li>If <var>F</var> is not a callable object, throw a <span class='estype'>TypeError</span>.</li>
                      <li>Let <var>finalValue</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> <var>idlValue</var> to an ECMAScript value.</li>
                      <li>Invoke the <span class='prop'>[[Call]]</span> method of <var>F</var>, providing <var>O</var> as the this value and with <var>P</var> and <var>finalValue</var> as the two argument values.</li>
                    </ol>
                  </li>
                  <li>Return.</li>
                </ol>
              </li>
              <li>Call the default <span class='prop'>[[DefineOwnProperty]]</span> internal method (<a href='#ref-ECMA-262'>[ECMA-262]</a>, section 8.12.9) on <var>O</var> passing <var>P</var>, <var>Desc</var>, and <var>Throw</var> as arguments.</li>
            </ol>
          </div>

          <div id='delete' class='section'>
            <h4>Host object [[Delete]] method</h4>

            <p>
              The internal <span class='prop'>[[Delete]]</span> method of every
              host object <var>O</var> that implements an <a class='dfnref' href='#dfn-interface'>interface</a>
              with a <a class='dfnref' href='#dfn-deleter'>deleter</a>
              <span class='rfc2119'>MUST</span> behave as follows,
              assuming <var>P</var> is the property name passed to <span class='prop'>[[Delete]]</span>:
            </p>

            <ol class='algorithm'>
              <li>Let <var>desc</var> be the result of calling <span class='prop'>[[GetOwnProperty]]</span> internal method of <var>O</var> with property name <var>P</var>.</li>
              <li>If <var>desc</var> is <span class='esvalue'>undefined</span>, then return <span class='esvalue'>true</span>.</li>
              <li>If <var>desc</var>.<span class='prop'>[[Configurable]]</span> is <span class='estype'>false</span>, then:
                <ol>
                  <li>If <var>Throw</var> is <span class='esvalue'>true</span>, then throw a <span class='estype'>TypeError</span>.</li>
                  <li>Otherwise, return <span class='esvalue'>false</span>.</li>
                </ol>
              </li>
              <li>If <var>desc</var> is the descriptor for a <a class='dfnref' href='#dfn-corresponding-indexed-property'>corresponding indexed property</a>,
                and <var>O</var> implements an interface with an <a class='dfnref' href='#dfn-index-deleter'>index deleter</a>, then:
                <ol>
                  <li>
                    If the index deleter was defined using an <a class='dfnref' href='#dfn-operation'>operation</a>
                    without an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then:
                    <ol>
                      <li>Perform the steps listed in the interface description to <a class='dfnref' href='#dfn-delete-an-existing-indexed-property'>delete an existing indexed property</a>
                        with ToUint32(<var>P</var>) as the index.</li>
                      <li>If the steps indicated that the deletion failed, return <span class='esvalue'>false</span>.</li>
                      <li>Return <span class='esvalue'>true</span>.</li>
                    </ol>
                  </li>
                  <li>
                    Otherwise, the index deleter was defined using an operation with an identifier:
                    <ol>
                      <li>Let <var>F</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>O</var> with the operation's identifier as the property name.</li>
                      <li>If <var>F</var> is not a callable object, throw a <span class='estype'>TypeError</span>.</li>
                      <li>Let <var>B</var> be the result of invoking the <span class='prop'>[[Call]]</span> method of <var>F</var>, providing <var>O</var> as the this value and with ToUint32(<var>P</var>) as the argument.</li>
                      <li>Return ToBoolean(<var>B</var>), or <span class='idlvalue'>true</span> if the operation was declared to return <span class='idltype'>void</span>.</li>
                    </ol>
                  </li>
                </ol>
              </li>
              <li>If <var>desc</var> is the descriptor for a <a class='dfnref' href='#dfn-corresponding-named-property'>corresponding named property</a>,
                and <var>O</var> implements an interface with an <a class='dfnref' href='#dfn-name-deleter'>name deleter</a>, then:
                <ol>
                  <li>
                    If the name deleter was defined using an <a class='dfnref' href='#dfn-operation'>operation</a>
                    without an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then:
                    <ol>
                      <li>Perform the steps listed in the interface description to <a class='dfnref' href='#dfn-delete-an-existing-named-property'>delete an existing named property</a>
                        with <var>P</var> as the name.</li>
                      <li>If the steps indicated that the deletion failed, return <span class='esvalue'>false</span>.</li>
                      <li>Return <span class='esvalue'>true</span>.</li>
                    </ol>
                  </li>
                  <li>
                    Otherwise, the name deleter was defined using an operation with an identifier:
                    <ol>
                      <li>Let <var>F</var> be the result of calling <span class='prop'>[[Get]]</span> on <var>O</var> with the operation's identifier as the property name.</li>
                      <li>If <var>F</var> is not a callable object, throw a <span class='estype'>TypeError</span>.</li>
                      <li>Let <var>B</var> be the result of invoking the <span class='prop'>[[Call]]</span> method of <var>F</var>, providing <var>O</var> as the this value and with <var>P</var> as the argument.</li>
                      <li>Return ToBoolean(<var>B</var>), or <span class='idlvalue'>true</span> if the operation was declared to return <span class='idltype'>void</span>.</li>
                    </ol>
                  </li>
                </ol>
              </li>
              <li>Remove the own property with name <var>P</var> from <var>O</var>.</li>
              <li>Return <span class='esvalue'>true</span>.</li>
            </ol>
          </div>

          <div id='call' class='section'>
            <h4>Host object [[Call]] method</h4>

            <p>
              The internal <span class='prop'>[[Call]]</span> method of every
              host object <var>O</var> that implements an <a class='dfnref' href='#dfn-interface'>interface</a>
              <var>I</var> with at least one <a class='dfnref' href='#dfn-caller'>caller</a>
              <span class='rfc2119'>MUST</span> behave as follows, assuming
              <var>arg</var><sub>0..<var>n</var>−1</sub> is the list of argument
              values passed to <span class='prop'>[[Call]]</span>:
            </p>
            <ol class='algorithm'>
              <li>Initialize <var>S</var> to the <a class='dfnref' href='#dfn-effective-overload-set'>effective overload</a>
                for callers on <var>I</var> and with argument count <var>n</var> (for the
                ECMAScript language binding).</li>
              <li>Set <var>S</var> to be the result of passing <var>S</var> and
                <var>arg</var><sub>0..<var>n</var>−1</sub> to the
                <a class='dfnref' href='#dfn-overload-resolution-algorithm'>overload resolution algorithm</a>.</li>
              <li>If <var>S</var> is empty, throw a <span class='estype'>TypeError</span>.</li>
              <li>If <var>S</var> contains more than one entry, then the call is ambiguous.  Remove all but
                one entry from <var>S</var> according to the rules specified in the description of
                <a class='dfnref' href='#dfn-interface'>interface</a> <var>I</var>, or arbitrarily
                if no such rules exist.</li>
              <li>Let <var>op</var> be the operation and <var>t</var><sub>0..<var>m</var>−1</sub> be the type list
                of the single entry in <var>S</var>.</li>
              <li>Let <var>idlarg</var><sub>0..<var>m</var>−1</sub> be a list of IDL values,
                where <var>idlarg</var><sub><var>i</var></sub> is the result of
                <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
                <var>arg</var><sub><var>i</var></sub> to an IDL value.</li>
              <li>Perform the actions listed in the description of caller <var>op</var> with
                <var>idlarg</var><sub>0..<var>m</var>−1</sub> as the argument values.</li>
              <li>If the actions performed in the previous step resulted in an exception being thrown,
                then allow that exception to propagate out from this algorithm.</li>
              <li>Otherwise, return the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                the return value from those actions to an ECMAScript value of the type
                <var>op</var> is declared to return (or <span class='esvalue'>undefined</span>
                if <var>op</var> is declared to return <span class='idltype'>void</span>).</li>
            </ol>
          </div>
        </div>

        <div id='native-objects' class='section'>
          <h3>Native objects implementing interfaces</h3>

          <p>
            Some <a class='dfnref' href='#dfn-interface'>interfaces</a> can be
            implemented in script by an ECMAScript native object.  Only interfaces
            with the following characteristics can have native object implementations:
          </p>
          <ul>
            <li>
              The interface does not <a class='dfnref' href='#dfn-inherit'>inherit</a>
              from any other interface.
              <div class='ednote'>
                <p><a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/load-save.html#LS-LSSerializerFilter'>LSSerializerFilter</a> from DOM3LS would need to be a <span class='xattr'>[Callback]</span> that inherits from another <span class='xattr'>[Callback]</span>.</p>
              </div>
            </li>
            <li>
              The interface has a 
              <a class='xattr' href='#Callback'>[Callback]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
              on it.
            </li>
            <li>
              The interface does not have a
              <a class='xattr' href='#Constructor'>[Constructor]</a> or
              <a class='xattr' href='#NamedConstructor'>[NamedConstructor]</a>,
              extended attribute on it.
            </li>
            <li>
              The interface has no
              <a class='dfnref' href='#dfn-getter'>getters</a>,
              <a class='dfnref' href='#dfn-setter'>setters</a>,
              <a class='dfnref' href='#dfn-creator'>creators</a>,
              <a class='dfnref' href='#dfn-deleter'>deleters</a>,
              <a class='dfnref' href='#dfn-caller'>caller</a> or
              <a class='dfnref' href='#dfn-stringifier'>stringifier</a>.
            </li>
            <li>
              No <a class='dfnref' href='#dfn-attribute'>attribute</a> on the interface
              has a
              <a class='xattr' href='#PutForwards'>[PutForwards]</a>,
              <a class='xattr' href='#Replaceable'>[Replaceable]</a>,
              <a class='xattr' href='#TreatNullAs'>[TreatNullAs]</a> or
              <a class='xattr' href='#TreatUndefinedAs'>[TreatUndefinedAs]</a>
              extended attribute on it.
            </li>
          </ul>
          <p>
            The following cases determine whether and how a given native object implements
            an interface with the above characteristics:
          </p>
          <ul>
            <li>
              If the interface is declared with one or more operations that all
              have the same <a class='dfnref' href='#dfn-identifier'>identifier</a>,
              the <a class='xattr' href='#Callback'>[Callback]</a>
              extended attribute on the interface has the <span class='idlident'>FunctionOnly</span>
              argument and there are no <a class='dfnref' href='#dfn-attribute'>attributes</a>
              on the interface, then the native object is considered to implement that interface if
              it is a <span class='estype'>Function</span> object.  The native object
              itself is the implementation of the operation.
            </li>
            <li>
              Otherwise, if the interface is declared with one or more operations that all
              have the same identifier but the <a class='xattr' href='#Callback'>[Callback]</a>
              extended attribute on the interface does not have the <span class='idlident'>FunctionOnly</span>
              argument, then any native object is considered to implement that interface.
              If the native object is a <span class='estype'>Function</span> object,
              the <a class='xattr' href='#Callback'>[Callback]</a> extended attribute
              does not have the <span class='idlident'>PropertyOnly</span> argument
              and the interface has no <a class='dfnref' href='#dfn-attribute'>attributes</a>,
              then the function itself is the implementation of the operation.
              Otherwise, the implementation of the operation is the result of
              invoking <span class='prop'>[[Get]]</span> on the native object
              with a property name that is the identifier of the operation.
            </li>
            <li>
              Otherwise, the operations declared on the interface have zero or more than
              one distinct identifiers or the interface has attributes declared on it.
              Any native object is considered to implement the interface.
              For each operation declared on the interface, the implementation
              of that operation is the result of invoking
              <span class='prop'>[[Get]]</span> on the native object with a
              property name that is the identifier of the operation.
            </li>
          </ul>
          <p>
            A user agent calls a native object’s operation implementation with a list
            of IDL argument values <var>idlarg</var><sub>0..<var>n</var>−1</sub> by
            following the algorithm below.  The <dfn id='dfn-callback-this-value'>callback this value</dfn>
            is the value to use as the <span class='esvalue'>this</span> value
            when calling the native object’s operation implementation
            <span class='prop'>[[Call]]</span> method.  By default, the native object
            itself is used as the <a class='dfnref' href='#dfn-callback-this-value'>callback this value</a>,
            however this <span class='rfc2119'>MAY</span> be overridden by other
            specifications.
          </p>
          <ol class='algorithm'>
            <li>Let <var>O</var> be the native object.</li>
            <li>Let <var>X</var> be the implementation of the operation.</li>
            <li>If Type(<var>X</var>) is not Object, throw a <span class='estype'>TypeError</span> exception.</li>
            <li>If <var>X</var> does not implement the internal <span class='prop'>[[Call]]</span> method, throw a <span class='estype'>TypeError</span> exception.</li>
            <li>
              Let <var>arg</var><sub>0..<var>n</var>−1</sub> be a list of
              ECMAScript values, where <var>arg</var><sub><var>i</var></sub> is the result
              of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
              <var>idlarg</var><sub><var>i</var></sub> to an ECMAScript value.
            </li>
            <li>Let <var>R</var> be the result of invoking the <span class='prop'>[[Call]]</span> method of <var>X</var>, providing the <a class='dfnref' href='#dfn-callback-this-value'>callback this value</a> as the <span class='esvalue'>this</span> value and <var>arg</var><sub>0..<var>n</var>−1</sub> as the argument values.</li>
            <li>
              If the operation’s return type is <span class='idltype'>void</span>, return.
            </li>
            <li>
              Return the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a>
              <var>R</var> to an IDL value of the same type as the operation’s return type.
            </li>
          </ol>
          <p>
            Note that while an <a class='dfnref' href='#dfn-interface'>interface</a>
            with <a class='dfnref' href='#dfn-constant'>constants</a> can be
            implemented by a native object, no properties corresponding to those
            constants need be on the object.
          </p>
          <p>
            A user agent retrieves the value of a native object’s
            <a class='dfnref' href='#dfn-attribute'>attribute</a> using the following
            algorithm:
          </p>
          <ol class='algorithm'>
            <li>Let <var>O</var> be the native object.</li>
            <li>Let <var>P</var> be the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the attribute.</li>
            <li>Let <var>R</var> be the result of invoking the <span class='prop'>[[Get]]</span> method of <var>O</var> with property name <var>P</var>.</li>
            <li>Return the result of <a class='dfnref' href='#dfn-convert-ecmascript-to-idl-value'>converting</a> <var>R</var> to an IDL value of the same type as the attribute’s type.</li>
          </ol>
          <p>
            A user agent sets the value of a native object’s
            <a class='dfnref' href='#dfn-attribute'>attribute</a> using the following
            algorithm:
          </p>
          <ol class='algorithm'>
            <li>Let <var>O</var> be the native object.</li>
            <li>Let <var>P</var> be the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the attribute.</li>
            <li>Let <var>V</var> be the IDL value to be assigned to the attribute.</li>
            <li>Let <var>W</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a> <var>V</var> to an ECMAScript value.</li>
            <li>Invoke the <span class='prop'>[[Put]]</span> method of <var>O</var> with property name <var>P</var> and value <var>W</var>.</li>
          </ol>
        </div>

        <div id='es-exceptions' class='section'>
          <h3>Exceptions</h3>

          <p>
            For every <a class='dfnref' href='#dfn-exception'>exception</a> that is not declared with the
            <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>,
            a corresponding property <span class='rfc2119'>MUST</span> exist on the 
            exception’s <a class='dfnref' href='#dfn-relevant-namespace-object'>relevant namespace object</a>.
            The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the exception,
            and its value is an object called the
            <dfn id='dfn-exception-interface-object'>exception interface object</dfn>,
            which provides access to any <a class='dfnref' href='#dfn-constant'>constants</a> that
            have been associated with the exception.  The property has the
            attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>true</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>.
          </p>

          <div id='exception-interface-object' class='section'>
            <h4>Exception interface object</h4>

            <p>
              The exception interface object for a particular <a class='dfnref' href='#dfn-exception'>exception</a>
              <span class='rfc2119'>MUST</span> have an internal <span class='prop'>[[Prototype]]</span> object whose
              value is the <span class='esvalue'>Object</span> prototype object.
            </p>
            <p>
              If any <a class='dfnref' href='#dfn-constant'>constants</a> have been declared
              on the exception,
              then the exception interface object will have
              properties corresponding to these constants as described in
              <a href='#es-exception-constants'>section <?sref es-exception-constants?></a>
              <?sdir es-exception-constants?>.
            </p>
            <p>
              The exception interface object <span class='rfc2119'>MUST</span> also have a property named
              <span class='prop'>prototype</span> with attributes
              <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>false</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>
              whose value is an object called the <dfn id='dfn-exception-interface-prototype-object'>exception interface prototype
                object</dfn>.  This object also provides access to the constants
              that are declared on the exception.
            </p>

            <div id='es-exception-hasinstance' class='section'>
              <h5>Exception interface object [[HasInstance]] method</h5>

              <p>
                The internal <span class='prop'>[[HasInstance]]</span> method of every
                <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>
                <var>E</var> <span class='rfc2119'>MUST</span> behave as follows, assuming <var>V</var> is the object
                argument passed to <span class='prop'>[[HasInstance]]</span>:
              </p>
              <ol class='algorithm'>
                <li>If <var>V</var> is not an object, return <span class='esvalue'>false</span>.</li>
                <li>If <var>V</var> is a host object that is an <a class='dfnref' href='#dfn-exception'>exception</a>
                  whose exception interface object is <var>E</var>, return <span class='esvalue'>true</span>.</li>
                <li>Return <span class='esvalue'>false</span>.</li>
              </ol>
            </div>
          </div>

          <div id='es-exception-interface-prototype-object' class='section'>
            <h4>Exception interface prototype object</h4>

            <p>
              There <span class='rfc2119'>MUST</span> exist an
              <a class='dfnref' href='#dfn-exception-interface-prototype-object'>exception interface prototype object</a>
              for every <a class='dfnref' href='#dfn-exception'>exception</a>
              defined, regardless of whether the exception was declared with the
              <a class='xattr' href='#NoInterfaceObject'>[NoInterfaceObject]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>.
              The exception interface prototype object for a particular exception has
              properties that correspond to the <a class='dfnref' href='#dfn-constant'>constants</a>
              and <a class='dfnref' href='#dfn-exception-member'>exception members</a>
              defined on the exception.  These properties are described in more detail in
              sections <a href='#es-exception-constants'><?sref es-exception-constants?></a> 
              and <a href='#es-exception-members'><?sref es-exception-members?></a>,
              <?sdir es-exception-members?>.
            </p>
          </div>

          <div id='es-exception-constants' class='section'>
            <h4>Constants</h4>

            <p>
              For each <a class='dfnref' href='#dfn-constant'>constant</a> defined on
              the <a class='dfnref' href='#dfn-exception'>exception</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding property on
              the <a class='dfnref' href='#dfn-exception-interface-object'>exception interface object</a>,
              if it exists, if the <a class='dfnref' href='#dfn-identifier'>identifier</a>
              of the constant is not “prototype”.  The property has the following characteristics:
            </p>
            <ul>
              <li>The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the constant.</li>
              <li>The value of the property is the ECMAScript value that is equivalent to the constant’s IDL value, according
                to the rules in <a href='#es-type-mapping'>section <?sref es-type-mapping?></a> <?sdir es-type-mapping?>.</li>
              <li>The property has attributes <span class='descriptor'>{ [[Writable]]: <span class='esvalue'>false</span>, [[Enumerable]]: <span class='esvalue'>true</span>, [[Configurable]]: <span class='esvalue'>false</span> }</span>.</li>
            </ul>
            <p>
              In addition, a property with the same characteristics <span class='rfc2119'>MUST</span>
              exist on the <a class='dfnref' href='#dfn-exception-interface-prototype-object'>exception interface prototype object</a>,
              if the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the
              <a class='dfnref' href='#dfn-constant'>constant</a> is not “constructor”.
            </p>
          </div>

          <div id='es-exception-members' class='section'>
            <h4>Exception members</h4>

            <p>
              For each <a class='dfnref' href='#dfn-exception-member'>exception member</a> whose <a class='dfnref' href='#dfn-identifier'>identifier</a>
              is not “constructor” that is defined on the <a class='dfnref' href='#dfn-exception'>exception</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding property on
              the <a class='dfnref' href='#dfn-exception-interface-prototype-object'>exception interface prototype object</a>,
              whose characteristics are as follows:
            </p>
            <ul>
              <li>
                The name of the property is the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the <a class='dfnref' href='#dfn-exception-member'>exception member</a>.
              </li>
              <li>
                The property has attributes <span class='descriptor'>{ [[Get]]: <var>G</var>, [[Enumerable]]: <span class='esvalue'>true</span>, [[Configurable]]: <span class='esvalue'>true</span> }</span>,
                where <var>G</var> is the <a class='dfnref' href='#dfn-exception-member-getter'>exception member getter</a>,
                defined below.
              </li>
              <li>
                The <dfn id='dfn-exception-member-getter'>exception member getter</dfn> is a <span class='estype'>Function</span>
                object whose behavior when invoked is as follows:
                <ol class='algorithm'>
                  <li>Let <var>O</var> be the result of calling ToObject on the <span class='esvalue'>this</span> value.</li>
                  <li>If <var>O</var> is not a <a class='dfnref' href='#dfn-host-exception-object'>host exception object</a>
                    for the <a class='dfnref' href='#dfn-exception'>exception</a>
                    on which the exception member was declared, then throw a <span class='estype'>TypeError</span>.</li>
                  <li>
                    Let <var>idlValue</var> be the IDL value of <var>O</var>’s exception member.
                  </li>
                  <li>
                    Let <var>V</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-ecmascript-value'>converting</a>
                    the <var>idlValue</var> to an ECMAScript value.
                  </li>
                  <li>
                    Return <var>V</var>.
                  </li>
                </ol>
                The value of the <span class='estype'>Function</span> object’s <span class='prop'>length</span>
                property is the <span class='estype'>Number</span> value <span class='esvalue'>0</span>.
              </li>
            </ul>
          </div>
        </div>

        <div id='host-exception-objects' class='section'>
          <h3>Host exception objects</h3>

          <p>
            A <dfn id='dfn-host-exception-object'>host exception object</dfn>
            is a host object that represents a given <a class='dfnref' href='#dfn-exception'>exception</a>.
            The behavior of a host object that represents more than one exception, or
            one that represents an exception as well as implements an
            <a class='dfnref' href='#dfn-interface'>interface</a>, is not defined.
          </p>
          <p>
            The value of the internal <span class='prop'>[[Prototype]]</span>
            property of the host exception object
            <span class='rfc2119'>MUST</span> be the <a class='dfnref' href='#dfn-exception-interface-prototype-object'>exception interface prototype object</a>.
          </p>
          <p>
            The value of the internal <span class='prop'>[[Class]]</span>
            property of the host exception object <span class='rfc2119'>MUST</span>
            be the <a class='dfnref' href='#dfn-identifier'>identifier</a>
            of the <a class='dfnref' href='#dfn-exception'>exception</a>.
          </p>
        </div>

        <div id='es-handling-exceptions' class='section'>
          <h3>Handling exceptions</h3>

          <p>
            None of the algorithms or processing requirements in the
            ECMAScript language binding catch ECMAScript exceptions.  Whenever
            an ECMAScript <span class='esvalue'>Function</span> is invoked due
            to requirements in this section and that <span class='esvalue'>Function</span>
            ends due to an exception being thrown, that exception
            <span class='rfc2119'>MUST</span> propagate to the caller, and if
            not caught there, to its caller, and so on.
          </p>
          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              defines two <a class='dfnref' href='#dfn-interface'>interfaces</a>
              and an <a class='dfnref' href='#dfn-exception'>exception</a>.
              The <code>valueOf</code> attribute on <span class='idltype'>ExceptionThrower</span>
              is defined to throw an exception whenever an attempt is made
              to get its value.
            </p>
            <x:codeblock language='idl'>interface Dahut {
  attribute DOMString type;
};

exception SomeException {
};

interface ExceptionThrower {
  <span class='comment'>// This attribute always throws a SomeException and never returns a value.</span>
  attribute long valueOf getraises(SomeException);
};</x:codeblock>
            <p>
              Assuming an ECMAScript implementation supporting this interface,
              the following code demonstrates how exceptions are handled:
            </p>
            <x:codeblock language='es'>var d = getDahut();              <span class='comment'>// Obtain an instance of Dahut.</span>
var et = getExceptionThrower();  <span class='comment'>// Obtain an instance of ExceptionThrower.</span>

try {
  d.type = { toString: function() { throw "abc" } };
} catch (e) {
  <span class='comment'>// The string "abc" is caught here, since as part of the conversion</span>
  <span class='comment'>// from the native object to a string, the anonymous function</span>
  <span class='comment'>// was invoked, and none of the [[DefaultValue]], ToPrimitive or</span>
  <span class='comment'>// ToString algorithms are defined to catch the exception.</span>
}

try {
  d.type = { toString: { } };
} catch (e) {
  <span class='comment'>// An exception is caught here, since an attempt is made to invoke</span>
  <span class='comment'>// [[Call]] on the native object that is the value of toString</span>
  <span class='comment'>// property.</span>
}

d.type = et;
<span class='comment'>// An uncaught SomeException exception is thrown here, since the</span>
<span class='comment'>// [[DefaultValue]] algorithm attempts to get the value of the</span>
<span class='comment'>// "valueOf" property on the ExceptionThrower object.  The exception</span>
<span class='comment'>// propagates out of this block of code.</span></x:codeblock>
          </div>
        </div>
      </div>

      <div id='java-binding' class='section'>
        <h2>Java binding</h2>

        <p>
          This section describes how definitions written with the IDL defined in
          <a href='#idl'>section <?sref idl?></a> correspond to particular constructs
          in Java 5 <a href='#ref-JLS3'>[JLS3]</a>.
        </p>

        <div id='java-names' class='section'>
          <h3>Names</h3>

          <p>
            Since Java has a number of reserved words in the language, some identifiers
            of Java constructs corresponding to IDL definitions need to be escaped
            to avoid conflicts.  A name is <dfn id='dfn-java-escaped'>Java escaped</dfn>
            as follows:
          </p>
          <ul>
            <li>
              If the name is a Java reserved word, then the Java escaped name is the
              name prefixed with a <span class='char'>U+005F LOW LINE ("_")</span>
              character.
            </li>
            <li>
              Otherwise, the name is not a Java reserved word.  The Java escaped name
              is simply the name.
            </li>
          </ul>
        </div>

        <div class='note'>
          <p>
            At the time of publication, the list of Java reserved words is the following:
            <code>abstract</code>,
            <code>assert</code>,
            <code>boolean</code>,
            <code>break</code>,
            <code>byte</code>,
            <code>case</code>,
            <code>catch</code>,
            <code>char</code>,
            <code>class</code>,
            <code>const</code>,
            <code>continue</code>,
            <code>default</code>,
            <code>do</code>,
            <code>double</code>,
            <code>else</code>,
            <code>enum</code>,
            <code>extends</code>,
            <code>final</code>,
            <code>finally</code>,
            <code>float</code>,
            <code>for</code>,
            <code>goto</code>,
            <code>if</code>,
            <code>implements</code>,
            <code>import</code>,
            <code>instanceof</code>,
            <code>int</code>,
            <code>interface</code>,
            <code>long</code>,
            <code>native</code>,
            <code>new</code>,
            <code>package</code>,
            <code>private</code>,
            <code>protected</code>,
            <code>public</code>,
            <code>return</code>,
            <code>short</code>,
            <code>static</code>,
            <code>strictfp</code>,
            <code>super</code>,
            <code>switch</code>,
            <code>synchronized</code>,
            <code>this</code>,
            <code>throw</code>,
            <code>throws</code>,
            <code>transient</code>,
            <code>try</code>,
            <code>void</code>,
            <code>volatile</code>,
            <code>while</code>.
          </p>
        </div>

        <div id='java-type-mapping' class='section'>
          <h3>Java type mapping</h3>

          <p>
            This section describes how types in the IDL map to types
            in Java.
          </p>
          <p>
            Each sub-section below describes how values of a given IDL type
            are represented in Java.  For each IDL type, it is described how
            Java values are <dfn id='dfn-convert-java-to-idl-value'>converted to an IDL value</dfn>
            when passed as an argument to a Java method (corresponding
            to an <a class='dfnref' href='#dfn-operation'>operation</a> or
            <a class='dfnref' href='#dfn-attribute'>attribute</a>).  Conversely,
            it is described how IDL values of that type are
            <dfn id='dfn-convert-idl-to-java-value'>converted to Java values</dfn>
            when being used as the value of a Java final variable (corresponding
            to a <a class='dfnref' href='#dfn-constant'>constant</a>) or when
            returned from a Java method (corresponding to an operation,
            attribute or <a class='dfnref' href='#dfn-exception-member'>exception member</a>).
          </p>

          <div id='java-any' class='section'>
            <h4>any</h4>
            <p>
              The <a class='idltype' href='#idl-any'>any</a> IDL type corresponds to a
              Java <span class='javatype'>java.lang.Object</span> value.
            </p>
            <p>
              How to <a class='dfnref' href='#dfn-convert-java-to-idl-value'>convert a Java value</a>
              to an IDL <span class='idltype'>any</span> value depends on the
              type of the Java value:
            </p>
            <dl class='switch'>
              <dt>A <span class='javatype'>java.lang.Boolean</span> object</dt>
              <dd>
                The IDL value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>booleanValue()</code> method on the
                <span class='javatype'>java.lang.Boolean</span> object to an IDL
                <span class='idltype'>boolean</span> value.
              </dd>
              <dt>A <span class='javatype'>java.lang.Byte</span> object</dt>
              <dd>
                The IDL value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>byteValue()</code> method on the
                <span class='javatype'>java.lang.Byte</span> object to an IDL
                <span class='idltype'>octet</span> value.
              </dd>
              <dt>A <span class='javatype'>java.lang.Short</span> object</dt>
              <dd>
                The IDL value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>shortValue()</code> method on the
                <span class='javatype'>java.lang.Short</span> object to an IDL
                <span class='idltype'>short</span> value.
              </dd>
              <dt>A <span class='javatype'>java.lang.Integer</span> object</dt>
              <dd>
                The IDL value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>intValue()</code> method on the
                <span class='javatype'>java.lang.Integer</span> object to an IDL
                <span class='idltype'>long</span> value.
              </dd>
              <dt>A <span class='javatype'>java.lang.Long</span> object</dt>
              <dd>
                The IDL value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>longValue()</code> method on the
                <span class='javatype'>java.lang.Long</span> object to an IDL
                <span class='idltype'>long long</span> value.
              </dd>
              <dt>A <span class='javatype'>java.lang.Float</span> object</dt>
              <dd>
                The IDL value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>floatValue()</code> method on the
                <span class='javatype'>java.lang.Float</span> object to an IDL
                <span class='idltype'>float</span> value.
              </dd>
              <dt>A <span class='javatype'>java.lang.Double</span> object</dt>
              <dd>
                The IDL value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>doubleValue()</code> method on the
                <span class='javatype'>java.lang.Double</span> object to an IDL
                <span class='idltype'>float</span> value.
              </dd>
              <dt>A <span class='javatype'>java.lang.String</span> object</dt>
              <dd>
                The IDL value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the <span class='javatype'>java.lang.String</span> object to an IDL
                <span class='idltype'>DOMString</span> value.
              </dd>
              <dt>An array object</dt>
              <dd>
                The IDL value is the <a href='#idl-sequence'>IDL sequence</a> obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the Java array object to a sequence, as described in
                <a href='#java-sequence'>section <?sref java-sequence?></a> <?sdir java-sequence?>.
              </dd>
              <dt>An object that implements a <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a></dt>
              <dd>
                The IDL value is the <a href='#idl-array'>IDL array</a> obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the Java object to an array, as described in
                <a href='#java-array'>section <?sref java-array?></a> <?sdir java-array?>.
              </dd>
              <dt>An object of any other class</dt>
              <dd>
                The IDL value is an <span class='idltype'>object</span> value
                that references the same object.
              </dd>
              <dt><span class='javavalue'>null</span></dt>
              <dd>
                The IDL value is the <span class='idlvalue'>null</span>
                <span class='idltype'>object</span> value.
              </dd>
            </dl>
            <p>
              How to <a class='dfnref' href='#dfn-convert-idl-to-java-value'>convert</a>
              an IDL <span class='idltype'>any</span> value to a Java
              <span class='javatype'>java.lang.Object</span> value depends on the
              actual type of the IDL value:
            </p>
            <dl class='switch'>
              <dt>A value of a <a class='dfnref' href='#dfn-primitive-type'>primitive type</a></dt>
              <dd>
                <p>
                  The Java value is the result of 
                  <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                  the IDL value of the given type to a Java value, and then passing
                  that value to the static method according to the following table:
                </p>
                <table class='vert'>
                  <tr>
                    <th>IDL type</th>
                    <th>Method</th>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-boolean'>boolean</a></td>
                    <td><code>java.lang.Boolean.valueOf(boolean)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-octet'>octet</a></td>
                    <td><code>java.lang.Byte.valueOf(byte)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-short'>short</a></td>
                    <td><code>java.lang.Short.valueOf(short)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-unsigned-short'>unsigned short</a></td>
                    <td><code>java.lang.Short.valueOf(short)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-long'>long</a></td>
                    <td><code>java.lang.Integer.valueOf(int)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-unsigned-long'>unsigned long</a></td>
                    <td><code>java.lang.Integer.valueOf(int)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-long-long'>long long</a></td>
                    <td><code>java.lang.Long.valueOf(long)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a></td>
                    <td><code>java.lang.Long.valueOf(long)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-float'>float</a></td>
                    <td><code>java.lang.Float.valueOf(float)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-double'>double</a></td>
                    <td><code>java.lang.Double.valueOf(double)</code></td>
                  </tr>
                </table>
              </dd>
              <dt>An IDL value of any other type</dt>
              <dd>
                The Java value is the result of
                <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                the IDL value to a Java value.
              </dd>
            </dl>
          </div>

          <div id='java-void' class='section'>
            <h4>void</h4>

            <p>
              The only place that the <a class='idltype' href='#idl-void'>void</a> type may appear
              in IDL is as the <a class='dfnref' href='#dfn-return-type'>return type</a>
              of an <a class='dfnref' href='#dfn-operation'>operation</a>.  Methods on Java objects
              that implement an operation whose IDL specifies a <a class='idltype' href='#idl-void'>void</a>
              return type <span class='rfc2119'>MUST</span> be declared to have a return type of <span class='javatype'>void</span>.
            </p>
          </div>

          <div id='java-boolean' class='section'>
            <h4>boolean</h4>

            <p>
              IDL <a class='idltype' href='#idl-boolean'>boolean</a> values are represented by
              Java <span class='javatype'>boolean</span> values.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
              a Java <span class='javatype'>boolean</span> value to an IDL value
              is the IDL <span class='idltype'>boolean</span>
              that represents the same truth value as the Java
              <span class='javatype'>boolean</span>.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
              an IDL <span class='idltype'>boolean</span> value to a Java
              value is the Java <span class='javatype'>boolean</span> that
              represents the same truth value as the IDL
              <span class='idltype'>boolean</span>.
            </p>
          </div>

          <div id='java-octet' class='section'>
            <h4>octet</h4>

            <p>
              IDL <a class='idltype' href='#idl-octet'>octet</a> values are represented by
              Java <span class='javatype'>byte</span> values.  Note that while
              the IDL <a class='idltype' href='#idl-octet'>octet</a> type is unsigned, with a
              range of [0, 255], the Java <span class='javatype'>byte</span> type
              is signed, with a range of [−128, 127].
            </p>
            <p>
              <a class='dfnref' href='#dfn-convert-idl-to-java-value'>Conversion</a>
              of an <a class='idltype' href='#idl-octet'>octet</a> value to a
              <span class='javatype'>byte</span> is performed as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the <a class='idltype' href='#idl-octet'>octet</a> value to convert.</li>
              <li>If <var>x</var> &lt; 128, return the <span class='javatype'>byte</span> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> ≥ 128.  Return the <span class='javatype'>byte</span> whose value is <var>x</var> − 256.</li>
            </ol>
            <div class='note'>
              <p>
                In Java this is the same as having the
                <a class='idltype' href='#idl-octet'>octet</a> value stored in
                an <span class='javatype'>int</span> and casting it to a
                <span class='javatype'>byte</span>.
              </p>
            </div>
            <p>
              <a class='dfnref' href='#dfn-convert-java-to-idl-value'>Conversion</a>
              of a <span class='javatype'>byte</span> to an
              <a class='idltype' href='#idl-octet'>octet</a> is performed as
              follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the <span class='javatype'>byte</span> value to decode.</li>
              <li>If <var>x</var> ≥ 0, return the <a class='idltype' href='#idl-octet'>octet</a> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> &lt; 0.  Return the <a class='idltype' href='#idl-octet'>octet</a> whose value is <var>x</var> + 256.</li>
            </ol>
            <div class='note'>
              <p>
                In Java this is the same as performing a bit-wise AND of the
                <span class='javatype'>byte</span> value with the
                <span class='javatype'>int</span> constant
                <span class='javavalue'>0xff</span>.
              </p>
            </div>
          </div>

          <div id='java-short' class='section'>
            <h4>short</h4>

            <p>
              IDL <a class='idltype' href='#idl-short'>short</a> values are
              represented by Java <span class='javatype'>short</span> values.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
              a Java <span class='javatype'>short</span> value to an IDL value
              is the IDL <span class='idltype'>short</span>
              that represents the same numeric value as the Java
              <span class='javatype'>short</span>.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
              an IDL <span class='idltype'>short</span> value to a Java
              value is the Java <span class='javatype'>short</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>short</span>.
            </p>
          </div>

          <div id='java-unsigned-short' class='section'>
            <h4>unsigned short</h4>

            <p>
              IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> values are
              represented by Java <span class='javatype'>short</span> values.  Note that while
              the IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> type is unsigned, with a
              range of [0, 65535], the Java <span class='javatype'>short</span> type
              is signed, with a range of [−32768, 32767].
            </p>
            <p>
              <a class='dfnref' href='#dfn-convert-idl-to-java-value'>Conversion</a>
              of an IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> value to a
              Java <span class='javatype'>short</span> is performed as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> value to convert.</li>
              <li>If <var>x</var> &lt; 32768, return the Java <span class='javatype'>short</span> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> ≥ 32768.  Return the Java <span class='javatype'>short</span> whose value is <var>x</var> − 65536.</li>
            </ol>
            <div class='note'>
              <p>
                In Java this is the same as having the <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> value stored in
                an <span class='javatype'>int</span> and casting it to a <span class='javatype'>short</span>.
              </p>
            </div>
            <p>
              <a class='dfnref' href='#dfn-convert-java-to-idl-value'>Conversion</a>
              of a Java <span class='javatype'>short</span> to an IDL
              <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> value
              is performed as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the Java <span class='javatype'>short</span> value to decode.</li>
              <li>If <var>x</var> ≥ 0, return the IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> &lt; 0.  Return the IDL <a class='idltype' href='#idl-unsigned-short'>unsigned short</a> whose value is <var>x</var> + 65536.</li>
            </ol>
            <div class='note'>
              <p>
                In Java this is the same as performing a bit-wise AND of the <span class='javatype'>short</span> value
                with the <span class='javatype'>int</span> constant <span class='javavalue'>0xffff</span>.
              </p>
            </div>
          </div>

          <div id='java-long' class='section'>
            <h4>long</h4>

            <p>
              IDL <a class='idltype' href='#idl-long'>long</a> values are
              represented by Java <span class='javatype'>int</span> values.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
              a Java <span class='javatype'>int</span> value to an IDL value
              is the IDL <span class='idltype'>long</span>
              that represents the same numeric value as the Java
              <span class='javatype'>int</span>.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
              an IDL <span class='idltype'>long</span> value to a Java
              value is the Java <span class='javatype'>int</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>short</span>.
            </p>
          </div>

          <div id='java-unsigned-long' class='section'>
            <h4>unsigned long</h4>

            <p>
              IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> values are
              represented by Java <span class='javatype'>int</span> values.  Note that while
              the IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> type is unsigned, with a
              range of [0, 4294967295], the Java <span class='javatype'>int</span> type
              is signed, with a range of [−2147483648, 2147483647].
            </p>
            <p>
              <a class='dfnref' href='#dfn-convert-idl-to-java-value'>Conversion</a>
              of an IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> value to a
              Java <span class='javatype'>int</span> is performed as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> value to convert.</li>
              <li>If <var>x</var> &lt; 2147483648, return the Java <span class='javatype'>int</span> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> ≥ 2147483648.  Return the Java <span class='javatype'>int</span> whose value is <var>x</var> − 4294967296.</li>
            </ol>
            <div class='note'>
              <p>
                In Java this is the same as having the <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> value stored in
                a Java <span class='javatype'>long</span> and casting it to an <span class='javatype'>int</span>.
              </p>
            </div>
            <p>
              <a class='dfnref' href='#dfn-convert-java-to-idl-value'>Conversion</a>
              of a Java <span class='javatype'>int</span> to an IDL
              <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> value
              is performed as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the Java <span class='javatype'>int</span> value to decode.</li>
              <li>If <var>x</var> ≥ 0, return the IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> &lt; 0.  Return the IDL <a class='idltype' href='#idl-unsigned-long'>unsigned long</a> whose value is <var>x</var> + 4294967296.</li>
            </ol>
            <div class='note'>
              <p>
                In Java this is the same as performing a bit-wise AND of the <span class='javatype'>int</span> value
                with the <span class='javatype'>long</span> constant <span class='javavalue'>0xffffffffL</span>.
              </p>
            </div>
          </div>

          <div id='java-long-long' class='section'>
            <h4>long long</h4>

            <p>
              IDL <a class='idltype' href='#idl-long-long'>long long</a> values are
              represented by Java <span class='javatype'>long</span> values.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
              a Java <span class='javatype'>long</span> value to an IDL value
              is the IDL <span class='idltype'>long long</span>
              that represents the same numeric value as the Java
              <span class='javatype'>long</span>.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
              an IDL <span class='idltype'>long long</span> value to a Java
              value is the Java <span class='javatype'>long</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>long long</span>.
            </p>
          </div>

          <div id='java-unsigned-long-long' class='section'>
            <h4>unsigned long long</h4>

            <p>
              IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> values are
              represented by Java <span class='javatype'>long</span> values.  Note that while
              the IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> type is unsigned, with a
              range of [0, 18446744073709551615], the Java <span class='javatype'>long</span> type
              is signed, with a range of [−9223372036854775808, 9223372036854775807].
            </p>
            <p>
              <a class='dfnref' href='#dfn-convert-idl-to-java-value'>Conversion</a>
              of an IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> value to a
              Java <span class='javatype'>long</span> is performed as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> value to convert.</li>
              <li>If <var>x</var> &lt; 18446744073709551616, return the Java <span class='javatype'>long</span> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> ≥ 18446744073709551616.  Return the Java <span class='javatype'>long</span> whose value is <var>x</var> − 18446744073709551615.</li>
            </ol>
            <p>
              <a class='dfnref' href='#dfn-convert-java-to-idl-value'>Conversion</a>
              of a Java <span class='javatype'>long</span> to an IDL
              <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> value
              is performed as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>x</var> be the Java <span class='javatype'>long</span> value to decode.</li>
              <li>If <var>x</var> ≥ 0, return the IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> whose value is <var>x</var>.</li>
              <li>Otherwise <var>x</var> &lt; 0.  Return the IDL <a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a> whose value is <var>x</var> + 18446744073709551615.</li>
            </ol>
          </div>

          <div id='java-float' class='section'>
            <h4>float</h4>

            <p>
              IDL <a class='idltype' href='#idl-float'>float</a> values are
              represented by Java <span class='javatype'>float</span> values.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
              a Java <span class='javatype'>float</span> value to an IDL value
              is the IDL <span class='idltype'>float</span>
              that represents the same numeric value as the Java
              <span class='javatype'>float</span>.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
              an IDL <span class='idltype'>float</span> value to a Java
              value is the Java <span class='javatype'>float</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>float</span>.
            </p>
          </div>

          <div id='java-double' class='section'>
            <h4>double</h4>

            <p>
              IDL <a class='idltype' href='#idl-double'>double</a> values are
              represented by Java <span class='javatype'>double</span> values.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
              a Java <span class='javatype'>double</span> value to an IDL value
              is the IDL <span class='idltype'>double</span>
              that represents the same numeric value as the Java
              <span class='javatype'>double</span>.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
              an IDL <span class='idltype'>double</span> value to a Java
              value is the Java <span class='javatype'>double</span> that
              represents the same numeric value as the IDL
              <span class='idltype'>double</span>.
            </p>
          </div>

          <div id='java-DOMString' class='section'>
            <h4>DOMString</h4>

            <p>
              IDL <a class='idltype' href='#idl-DOMString'>DOMString</a> values are
              represented by Java <span class='estype'>java.lang.String</span> reference
              values.
            </p>
            <p>
              A Java <span class='javatype'>java.lang.String</span> reference value is
              <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converted</a>
              to an IDL <span class='idltype'>DOMString</span> value as follows:
            </p>
            <ul>
              <li>If the value is <span class='javavalue'>null</span>, then throw a <span class='javatype'>java.lang.NullPointerException</span>.</li>
              <li>
                Otherwise, return the IDL <a class='idltype' href='#idl-DOMString'>DOMString</a>
                value that represents the same sequence of 16 bit code units as the one
                the Java <span class='javatype'>java.lang.String</span> value
                represents.
              </li>
            </ul>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
              an IDL <span class='idltype'>DOMString</span> value to a Java
              <span class='javatype'>java.lang.String</span> value is a
              <span class='javatype'>java.lang.String</span>
              object that represents the same sequence of characters that the
              IDL <span class='idltype'>DOMString</span> represents.
            </p>
          </div>

          <div id='java-object' class='section'>
            <h4>object</h4>

            <p>
              IDL <a class='idltype' href='#idl-object'>object</a> values are
              represented by Java <span class='estype'>java.lang.Object</span> reference
              values.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
              a Java <span class='javatype'>java.lang.Object</span> reference value to an IDL value
              is the IDL <span class='idltype'>object</span> that
              is a reference to the same object, or the <span class='idlvalue'>null</span>
              value if the <span class='javatype'>java.lang.Object</span> is <span class='javavalue'>null</span>.
            </p>
            <p>
              The result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
              an IDL <span class='idltype'>object</span> value to a Java
              value is a Java <span class='javatype'>java.lang.Object</span> value
              that is a reference to the same object, or <span class='javavalue'>null</span>
              if the <span class='idltype'>object</span> is the <span class='esvalue'>null</span> value.
            </p>
          </div>

          <div id='java-interface' class='section'>
            <h4>Interface types</h4>

            <p>
              IDL <a href='#idl-interface'>interface type</a> values are
              represented by Java references of the corresponding Java interface type.
              (See <a href='#java-interfaces'>section <?sref java-interfaces?></a> <?sdir java-interfaces?>
              for how IDL <a class='dfnref' href='#dfn-interface'>interfaces</a> have
              corresponding Java interfaces.)
            </p>
            <p>
              Conversions <a class='dfnref' href='#dfn-convert-java-to-idl-value'>to</a> and
              <a class='dfnref' href='#dfn-convert-idl-to-java-value'>from</a> IDL
              <a href='#idl-interface'>interface type</a> values
              are performed in the same way as that for the IDL
              <a class='idltype' href='#idl-object'>object</a> type.
            </p>
          </div>

          <div id='java-nullable-type' class='section'>
            <h4>Nullable types — <var>T</var>?</h4>

            <p>
              IDL <a class='dfnref' href='#dfn-nullable-type'>nullable type</a>
              values are represented with Java object references of a particular
              class, as determined by the table below:
            </p>
            <table class='vert'>
              <tr>
                <th>Nullable type</th>
                <th>Java class</th>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-boolean'>boolean</a>?</span></td>
                <td><span class='javatype'>java.lang.Boolean</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-octet'>octet</a>?</span></td>
                <td><span class='javatype'>java.lang.Byte</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-short'>short</a>?</span></td>
                <td><span class='javatype'>java.lang.Short</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-unsigned-short'>unsigned short</a>?</span></td>
                <td><span class='javatype'>java.lang.Short</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-long'>long</a>?</span></td>
                <td><span class='javatype'>java.lang.Integer</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-unsigned-long'>unsigned long</a>?</span></td>
                <td><span class='javatype'>java.lang.Integer</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-long-long'>long long</a>?</span></td>
                <td><span class='javatype'>java.lang.Long</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-unsigned-long-long'>unsigned long long</a>?</span></td>
                <td><span class='javatype'>java.lang.Long</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-float'>float</a>?</span></td>
                <td><span class='javatype'>java.lang.Float</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-double'>double</a>?</span></td>
                <td><span class='javatype'>java.lang.Double</span></td>
              </tr>
              <tr>
                <td><span class='idltype'><a href='#idl-DOMString'>DOMString</a>?</span></td>
                <td><span class='javatype'>java.lang.String</span></td>
              </tr>
            </table>
            <p>
              How to <a class='dfnref' href='#dfn-convert-java-to-idl-value'>convert a Java value</a>
              of one of the above classes to an IDL nullable type value
              depends on its value:
            </p>
            <dl class='switch'>
              <dt><span class='javavalue'>null</span></dt>
              <dd>
                The IDL value is the <span class='idlvalue'>null</span> value.
              </dd>
              <dt>A <span class='javatype'>java.lang.Byte</span> object</dt>
              <dd>
                The IDL value is an <span class='idltype'>octet?</span> whose value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>byteValue()</code> method on the
                <span class='javatype'>java.lang.Byte</span> object
                to an <span class='idltype'>octet</span>.
              </dd>
              <dt>A <span class='javatype'>java.lang.Short</span> object</dt>
              <dd>
                The IDL value is a <span class='idltype'>short?</span> whose value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>shortValue()</code> method on the
                <span class='javatype'>java.lang.Short</span> object
                to a <span class='idltype'>short</span>.
              </dd>
              <dt>A <span class='javatype'>java.lang.Integer</span> object</dt>
              <dd>
                The IDL value is a  <span class='idltype'>long?</span> whose value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>intValue()</code> method on the
                <span class='javatype'>java.lang.Integer</span> object.
                to a <span class='idltype'>long</span>.
              </dd>
              <dt>A <span class='javatype'>java.lang.Long</span> object</dt>
              <dd>
                The IDL value is a <span class='idltype'>long long?</span> whose value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>longValue()</code> method on the
                <span class='javatype'>java.lang.Long</span> object
                to a <span class='idltype'>long long</span>.
              </dd>
              <dt>A <span class='javatype'>java.lang.Float</span> object</dt>
              <dd>
                The IDL value is a <span class='idltype'>float?</span> whose value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>floatValue()</code> method on the
                <span class='javatype'>java.lang.Float</span> object
                to a <span class='idltype'>float</span>.
              </dd>
              <dt>A <span class='javatype'>java.lang.Double</span> object</dt>
              <dd>
                The IDL value is a <span class='idltype'>double?</span> whose value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the result of calling the <code>doubleValue()</code> method on the
                <span class='javatype'>java.lang.Double</span> object
                to a <span class='idltype'>double</span>.
              </dd>
              <dt>A <span class='javatype'>java.lang.String</span> object</dt>
              <dd>
                The IDL value is a <span class='idltype'>DOMString?</span> whose value is obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the <span class='javatype'>java.lang.String</span> object
                to a <span class='idltype'>DOMString</span>
              </dd>
              <dt>An array object</dt>
              <dd>
                The IDL value is a nullable <a href='#idl-sequence'>IDL sequence</a> obtained
                by <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                the Java array object to a sequence, as described in
                <a href='#java-sequence'>section <?sref java-sequence?></a> <?sdir java-sequence?>.
              </dd>
            </dl>
            <p>
              How to <a class='dfnref' href='#dfn-convert-idl-to-java-value'>convert</a>
              an IDL nullable type value to a Java value depends on
              its value and the <a class='dfnref' href='#dfn-inner-type'>inner type</a>:
            </p>
            <dl class='switch'>
              <dt>The <span class='idlvalue'>null</span> value</dt>
              <dd>
                The Java value is <span class='javavalue'>null</span>.
              </dd>
              <dt>A non-<span class='idlvalue'>null</span> nullable <a class='dfnref' href='#dfn-primitive-type'>primitive</a> value</dt>
              <dd>
                <p>
                  The Java value is the result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                  the IDL <a class='dfnref' href='#dfn-inner-type'>inner type</a> to a Java value, and then passing
                  that value to the static method according to the following table,
                  where <var>T</var> is the IDL <a class='dfnref' href='#dfn-inner-type'>inner type</a>:
                </p>
                <table class='vert'>
                  <tr>
                    <th><var>T</var></th>
                    <th>Method</th>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-boolean'>boolean</a></td>
                    <td><code>java.lang.Boolean.valueOf(boolean)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-octet'>octet</a></td>
                    <td><code>java.lang.Byte.valueOf(byte)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-short'>short</a></td>
                    <td><code>java.lang.Short.valueOf(short)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-unsigned-short'>unsigned short</a></td>
                    <td><code>java.lang.Short.valueOf(short)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-long'>long</a></td>
                    <td><code>java.lang.Integer.valueOf(int)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-unsigned-long'>unsigned long</a></td>
                    <td><code>java.lang.Integer.valueOf(int)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-long-long'>long long</a></td>
                    <td><code>java.lang.Long.valueOf(long)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-unsigned-long-long'>unsigned long long</a></td>
                    <td><code>java.lang.Long.valueOf(long)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-float'>float</a></td>
                    <td><code>java.lang.Float.valueOf(float)</code></td>
                  </tr>
                  <tr>
                    <td><a class='idltype' href='#idl-double'>double</a></td>
                    <td><code>java.lang.Double.valueOf(double)</code></td>
                  </tr>
                </table>
              </dd>
              <dt>A non-<span class='idlvalue'>null</span> <span class='idltype'>DOMString?</span> value</dt>
              <dd>
                The Java value is a <span class='javatype'>java.lang.String</span> object representing
                the same sequence of 16 bit code units as the <span class='idltype'>DOMString?</span> value.
              </dd>
              <dt>A non-<span class='idlvalue'>null</span> <span class='idltype'>sequence&lt;<var>T</var>>?</span> value</dt>
              <dd>
                The Java value is the result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                the IDL sequence value to a Java array object, as described in
                <a href='#java-sequence'>section <?sref java-sequence?></a> <?sdir java-sequence?>.
              </dd>
            </dl>
          </div>

          <div id='java-sequence' class='section'>
            <h4>Sequences — sequence&lt;<var>T</var>></h4>

            <p>
              IDL <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> values are
              represented by Java arrays of type <var>U</var>, where <var>U</var> is the Java type used to
              represent the IDL type <var>T</var>.
            </p>
            <p>
              A Java array <var>A</var> of type <var>U</var> is <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converted</a>
              to an IDL <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> as follows:
            </p>
            <ol class='algorithm'>
              <li>If <var>A</var> is <span class='javavalue'>null</span>, then throw a <span class='javatype'>java.lang.NullPointerException</span>.</li>
              <li>Let <var>n</var> be the length of the array <var>A</var>.</li>
              <li>Initialize <var>S</var><sub>0..<var>n</var>−1</sub> to be an IDL sequence with elements of type <var>T</var>, where each element is uninitialized.</li>
              <li>Initialize <var>i</var> to be 0.</li>
              <li>While <var>i</var> &lt; <var>n</var>:
                <ol>
                  <li>Let <var>E</var> be the value value of <var>A</var> at index <var>i</var>.</li>
                  <li>Set <var>S</var><sub><var>i</var></sub> to the result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                    <var>E</var> to an IDL value of type <var>T</var>.</li>
                  <li>Set <var>i</var> to <var>i</var> + 1.</li>
                </ol>
              </li>
              <li>Return <var>S</var>.</li>
            </ol>
            <p>
              An IDL sequence value <var>S</var><sub>0..<var>n</var>−1</sub> of type
              <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> is
              <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converted</a>
              to a Java array of type <var>U</var> object as follows:
            </p>
            <ol class='algorithm'>
              <li>Let <var>A</var> be a new Java array object with element type <var>U</var> and length <var>n</var>.</li>
              <li>Initialize <var>i</var> to be 0.</li>
              <li>While <var>i</var> &lt; <var>n</var>:
                <ol>
                  <li>Let <var>E</var> be the result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                    <var>S</var><sub><var>i</var></sub> to a Java value of type <var>U</var>.</li>
                  <li>Set element <var>i</var> of the array <var>A</var> to the value <var>E</var>.</li>
                  <li>Set <var>i</var> to <var>i</var> + 1.</li>
                </ol>
              </li>
              <li>Return <var>A</var>.</li>
            </ol>
            <p>
              A Java object implementing an <a class='dfnref' href='#dfn-interface'>interface</a>
              with an <a class='dfnref' href='#dfn-operation'>operation</a> declared to return
              a <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a> value
              <span class='rfc2119'>MUST NOT</span> return <span class='javavalue'>null</span> from the corresponding method.
              Similarly, a <a class='dfnref' href='#dfn-getter-method'>getter method</a> for an IDL
              <a class='dfnref' href='#dfn-attribute'>attribute</a> <span class='rfc2119'>MUST NOT</span>
              return <span class='javavalue'>null</span> if the attribute
              is declared to be of type <a class='idltype' href='#idl-sequence'>sequence&lt;<var>T</var>></a>.
            </p>
          </div>

          <div id='java-array' class='section'>
            <h4>Arrays — <var>T</var>[]</h4>

            <p>
              IDL <a class='idltype' href='#idl-array'><var>T</var>[]</a> values are
              represented by Java objects implementing a particular interface,
              known as the <dfn id='dfn-java-array-interface'>Java array interface</dfn>,
              depending on the type <var>T</var>.
            </p>
            <p>
              For each of the <a class='dfnref' href='#dfn-primitive-type'>primitive types</a>
              there <span class='rfc2119'>MUST</span> exist a corresponding
              <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
              of the following form:
            </p>
            <x:codeblock language='java'>package org.w3c.dom;

public interface <var>PrimitiveName</var>Array {
  int getLength();
  void setLength(int length);
  <var>PrimitiveType</var> getElement(int index);
  void setElement(int index, <var>PrimitiveType</var> value);
}</x:codeblock>
            <p>
              where <var>PrimitiveName</var> is the <a class='dfnref' href='#dfn-type-name'>type name</a>
              of the primitive type and <var>PrimitiveType</var> is the Java type used
              to represent it.
            </p>
            <div class='example'>
              <p>
                For example, the <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
                for the <span class='idltype'>octet[]</span> type is:
              </p>
              <x:codeblock language='java'>package org.w3c.dom;

public interface OctetArray {
  int getLength();
  void setLength(int length);
  byte getElement(int index);
  void setElement(int index, byte value);
}</x:codeblock>
            </div>
            <p>
              There <span class='rfc2119'>MUST</span> also exist the following interface, <span class='javatype'>org.w3c.dom.ObjectArray&lt;<var>E</var>></span>:
            </p>
            <x:codeblock language='java'>package org.w3c.dom;

public interface ObjectArray&lt;E&gt; {
  int getLength();
  void setLength(int length);
  E getElement(int index);
  void setElement(int index, E value);
}</x:codeblock>
            <p>
              This interface, parameterized by the Java type used to represent array element
              type <var>T</var>, is the corresponding <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
              for <var>T</var>.
            </p>
            <div class='example'>
              <p>
                For example, the <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
                for the <span class='idltype'>sequence&lt;DOMString?>[]</span> type is
                <span class='javatype'>org.w3c.dom.ObjectArray&lt;java.lang.String[]></span>.
              </p>
            </div>

            <p>
              A Java object that implements a <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
              represents a given <a href='#idl-array'>IDL array</a> value of type <span class='idltype'><var>T</var>[]</span>.
              The methods on the object that implement that interface <span class='rfc2119'>MUST</span> behave as follows:
            </p>
            <dl>
              <dt><code>getLength()</code></dt>
              <dd>
                <p>This method returns the current length of the <a href='#idl-array'>IDL array</a> value.</p>
              </dd>

              <dt><code>setLength(<var>length</var>)</code></dt>
              <dd>
                <p>When called on an object representing a <a class='dfnref' href='#dfn-fixed-length'>variable length</a>
                array, this method sets the length of the array to <var>length</var>.  When the array is lengthened, the new
                elements are set to the IDL value that results from <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting to an IDL value</a> the
                <a href='http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#96595'>default value</a>
                of the Java type that <var>T</var> corresponds to (<a href='#ref-JLS3'>[JLS3]</a>, section 4.12.5).</p>

                <p>When called on an object representing a <a class='dfnref' href='#dfn-fixed-length'>fixed length</a>
                array, this method throws a <span class='javatype'>java.lang.UnsupportedOperationException</span>.</p>
              </dd>

              <dt><code>getElement(<var>index</var>)</code></dt>
              <dd>
                <p>This method returns the IDL value of type <var>T</var> at the represented array’s index <var>index</var>
                <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converted to a Java value</a>.</p>
              </dd>

              <dt><code>setElement(<var>index</var>, <var>value</var>)</code></dt>
              <dd>
                <p>When called on an object representing an array that is not <a class='dfnref' href='#dfn-read-only-array'>read only</a>,
                this method sets the IDL value at the represented array’s index <var>index</var> to
                the result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                <var>value</var> to an IDL value of type <var>T</var>.</p>

                <p>When called on an object representing an array that is <a class='dfnref' href='#dfn-read-only-array'>read only</a>,
                this method throws a <span class='javatype'>java.lang.UnsupportedOperationException</span>.</p>
              </dd>
            </dl>

            <p>
              A Java reference value <var>O</var> for an object implementing a
              <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
              is <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converted</a> to an
              <a href='#idl-array'>IDL array</a> value as follows:
            </p>
            <ul>
              <li>If <var>O</var> is <span class='javavalue'>null</span>, then the IDL array value is <span class='idlvalue'>null</span>.</li>
              <li>Otherwise, if <var>O</var> is an object implementing a <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
                corresponding to a <a class='dfnref' href='#dfn-primitive-type'>primitive type</a>, then the IDL array value
                is the array value that <var>O</var> represents.  The type of the IDL array value is
                <span class='idltype'><var>T</var>[]</span>, where <var>T</var> is the primitive type.</li>
              <li>Otherwise, if <var>O</var> is an object implementing <span class='javatype'>org.w3c.dom.ObjectArray&lt;<var>E</var>></span>,
                then the IDL array value is the array value that <var>O</var> represents.  The type of
                the IDL array value is the IDL type that <var>E</var> corresponds to.</li>
            </ul>

            <p>
              An <a href='#idl-array'>IDL array</a> value <var>A</var> of type <span class='idltype'><var>T</var>[]</span>
              is <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converted</a> to a
              Java value whose type is an object implementing the <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
              corresponding to <var>T</var>, as follows:
            </p>
            <ul>
              <li>If <var>A</var> is <span class='idlvalue'>null</span>, then the Java value is <span class='javavalue'>null</span>.</li>
              <li>Otherwise, if <var>A</var> is already represented by an object implementing a <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>,
                then the Java value is that object.</li>
              <li>Otherwise, the Java value is newly created object implementing the <a class='dfnref' href='#dfn-java-array-interface'>Java array interface</a>
                that corresponds to <var>T</var>.</li>
            </ul>
          </div>
        </div>

        <div id='java-modules' class='section'>
          <h3>Modules</h3>

          <p>
            Every IDL <a class='dfnref' href='#dfn-module'>module</a> corresponds to a Java package,
            whose name is the result of taking the module’s
            <a class='dfnref' href='#dfn-prefixed-name'>prefixed name</a>, replacing every
            occurrence of the string “::” with “.”, and then removing the leading “.”.
          </p>
          <p>
            Definitions inside an IDL <a class='dfnref' href='#dfn-module'>module</a>
            correspond to Java constructs declared to be in the package for
            that module.
          </p>
          <div class='example'>
            <p>
              The following <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>
              will result in four Java interfaces existing:
              <span class='javatype'>org.w3c.dom.Document</span>,
              <span class='javatype'>org.w3c.dom.html.HTMLDocument</span>,
              <span class='javatype'>org.foo.FooDocument</span> and
              <span class='javatype'>org.foo.ext.ExtendedFooDocument</span>.
            </p>
            <x:codeblock language='idl'>module dom {
  interface Document {
    <span class='comment'>// ...</span>
  };
};

module html {
  interface HTMLDocument {
    <span class='comment'>// ...</span>
  };
};

[Prefix=org]
module foo {
  interface FooDocument {
    <span class='comment'>// ...</span>
  };

  module ext {
    interface ExtendedFooDocument {
      <span class='comment'>// ...</span>
    };
  };
};</x:codeblock>
          </div>
        </div>

        <!--
        <div id='java-extended-attributes' class='section'>
          <h3>Java-specific extended attributes</h3>

          <p>
            This section defines a single
            <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
            whose presence affects only the Java binding.
          </p>
        </div>
        -->

        <div id='java-interfaces' class='section'>
          <h3>Interfaces</h3>

          <p>
            A <a class='dfnref' href='#dfn-conforming-java-implementation'>conforming Java implementation</a>
            <span class='rfc2119'>MUST</span> have a public Java interface corresponding to
            to every IDL <a class='dfnref' href='#dfn-interface'>interface</a> that is supported, whose name is the
            <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
            <a class='dfnref' href='#dfn-identifier'>identifier</a> of the IDL interface
            and which resides in the Java package corresponding to the interface’s
            <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>
            (or the default package, if there is no enclosing module).
          </p>
          <p>
            The Java interface <span class='rfc2119'>MUST</span> be declared to extend
            every Java interface that corresponds to an interface from which this IDL interface
            <a class='dfnref' href='#dfn-inherit'>inherits</a>.
          </p>
          <p>
            If the IDL interface has one or more <a class='dfnref' href='#dfn-static-operation'>static operations</a>
            declared on it, then there <span class='rfc2119'>MUST</span> also exist
            a public, abstract Java class, whose name is the concatenation
            of the <a class='dfnref' href='#dfn-identifier'>identifier</a> of the IDL interface
            and the string <code>"Utils"</code>, and which also resides in the Java
            package corresponding to the interface’s enclosing module
            (or the default package, if there is no enclosing module).
            This class is known as the <dfn id='dfn-utility-class'>utility class</dfn>
            for the IDL interface.
          </p>

          <div id='java-constants' class='section'>
            <h4>Constants</h4>
            <p>
              For each <a class='dfnref' href='#dfn-constant'>constant</a> defined on
              the IDL <a class='dfnref' href='#dfn-interface'>interface</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding constant declared on the Java interface
              with the following characteristics:
            </p>
            <ul>
              <li>The constant has no modifiers.</li>
              <li>
                The type of the constant is the Java type that corresponds to the type of
                the IDL constant, according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
              <li>
                The name of the constant is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                <a class='dfnref' href='#dfn-identifier'>identifier</a> of the constant.
              </li>
              <li>
                The value of the constant is the result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                the constant’s IDL value to a Java value, according to the rules
                in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
            </ul>
          </div>

          <div id='java-operations' class='section'>
            <h4>Operations</h4>
            <div class='ednote'><p>Need to handle static methods, too.</p></div>
            <p>
              Each <a class='dfnref' href='#dfn-operation'>operation</a> defined on
              the IDL <a class='dfnref' href='#dfn-interface'>interface</a>, <var>I</var>,
              will result in one or more methods being declared on the Java interface.
            </p>
            <p>
              For each kind of operation <var>kind</var> in the set { “regular”, “static” }:
            </p>
            <ul>
              <li>
                For each unique identifier <var>id</var> of the
                <a class='dfnref' href='#dfn-operation'>operations</a> of kind <var>kind</var>
                declared on <var>I</var>:
                <ul>
                  <li>
                    For each entry &lt;<var>op</var>, <var>types</var>, <var>any</var>> in the
                    <a class='dfnref' href='#dfn-effective-overload-set'>effective overload set</a>
                    for <a class='dfnref' href='#dfn-regular-operation'>regular operations</a>
                    with identifier <var>id</var> on <var>I</var> and with argument
                    count <var>0</var> (for the Java language binding), there <span class='rfc2119'>MUST</span>
                    exist a method with the following
                    characteristics:
                    <ul>
                      <li>
                        If the operation is a <a class='dfnref' href='#dfn-regular-operation'>regular operation</a>,
                        then the method exists on the Java interface.  Otherwise, the operation is
                        a <a class='dfnref' href='#dfn-static-operation'>static operation</a>,
                        and it exists on the <a class='dfnref' href='#dfn-utility-class'>utility class</a>.
                      </li>
                      <li>The method is declared with modifiers <code>public static final</code>.</li>
                      <li>
                        The return type of the method is the Java type that corresponds to the operation
                        <a class='dfnref' href='#dfn-return-type'>return type</a>, according to the rules in
                        <a href='#java-type-mapping'>section <?sref java-type-mapping?></a> <?sdir java-type-mapping?>.
                      </li>
                      <li>
                        The tenative name of the method is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                        <a class='dfnref' href='#dfn-identifier'>identifier</a> of the operation.
                        The name of the method is the tenative name of the method prefixed with the smallest number
                        of <span class='char'>U+005F LOW LINE ("_")</span> characters required to make the
                        name not equal to the name of a constant declared on the Java interface (if the operation
                        is a <a class='dfnref' href='#dfn-regular-operation'>regular operation</a>)
                        and not equal to the name of one of the methods on the
                        <span class='javatype'>java.lang.Object</span> class.
                      </li>
                      <li>
                        The method has an argument for each type, in order, that is in <var>types</var>.  The type of
                        method argument <var>j</var> is the Java type that corresponds to the IDL type <var>types</var><sub><var>j</var></sub>,
                        according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                        <?sdir java-type-mapping?>.  If the length of <var>types</var> is the length of the
                        argument list <var>op</var> is declared with, and <var>op</var> is a
                        <a class='dfnref' href='#dfn-variadic-operation'>variadic operation</a>,
                        then the method is a <em>variable arity method</em> (<a href='#ref-JLS3'>[JLS3]</a>,
                        section 8.4.1).
                      </li>
                      <li>
                        If <var>op</var> has IDL <a class='dfnref' href='#dfn-exception'>exceptions</a>
                        listed in the <a class='nt' href='#prod-Raises'>Raises</a> clause, then the
                        method <span class='rfc2119'>SHOULD</span> have a <code>throws</code>
                        clause specifying all of the Java exception classes that correspond
                        to those IDL exceptions, and no others.  Otherwise, if <var>op</var> has no
                        exceptions listed in the <a class='nt' href='#prod-Raises'>Raises</a> clause,
                        then the method <span class='rfc2119'>SHOULD NOT</span> have a <code>throws</code>
                        clause.
                      </li>
                      <li>
                        An implementation of this method <span class='rfc2119'>MUST</span>
                        perform the following steps:
                        <ol class='algorithm'>
                          <li>
                            Let <var>arg</var><sub>0..<var>n</var>−1</sub> be the list
                            of Java argument values passed to the method.
                          </li>
                          <li>
                            Let <var>idlarg</var><sub>0..<var>n</var>−1</sub> be
                            a list of IDL values, where <var>idlarg</var><sub><var>i</var></sub>
                            is the result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                            <var>arg</var><sub><var>i</var></sub> to an IDL value
                            of the type that the <var>i</var>th argument is declared to be.
                          </li>
                          <li>
                            Let <var>R</var> be the result of performing the actions listed in the description of the operation
                            <var>op</var> with <var>idlarg</var><sub>0..<var>n</var>−1</sub>
                            as the argument values.
                          </li>
                          <li>
                            If the actions performed in the previous step resulted in an
                            exception being thrown, then allow that exception to propagate
                            out from this algorithm.  Otherwise, return the result of
                            <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                            <var>R</var> to a Java value of the type <var>op</var>
                            is declared to return.
                          </li>
                        </ol>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </div>

          <div id='java-attributes' class='section'>
            <h4>Attributes</h4>
            <p>
              For each <a class='dfnref' href='#dfn-attribute'>attribute</a> defined on
              the IDL <a class='dfnref' href='#dfn-interface'>interface</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding <dfn id='dfn-getter-method'>getter method</dfn>
              declared on the Java interface with the following characteristics:
            </p>
            <ul>
              <li>The method has no modifiers.</li>
              <li>
                The return type of the method is the Java type that corresponds to the attribute type,
                according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
              <li>
                The tentative name of the method is a
                <span class='char'>U+0067 LATIN SMALL G ("g")</span> character, followed by a
                <span class='char'>U+0065 LATIN SMALL E ("e")</span> character, followed by a
                <span class='char'>U+0074 LATIN SMALL T ("t")</span> character, followed by
                the first character of the
                <a class='dfnref' href='#dfn-identifier'>identifier</a> of the attribute
                uppercased (as if passed to the <code>java.lang.Character.toUpperCase()</code>
                method), followed by the remaining characters from the identifier of the attribute.
                The name of the method is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                tenative name of the method prefixed with the smallest number
                of <span class='char'>U+005F LOW LINE ("_")</span> characters required to make the
                name not equal to the name of a constant or method declared on the Java interface or one of the
                methods on the <span class='javatype'>java.lang.Object</span> class.
              </li>
              <li>
                The method has no arguments.
              </li>
              <li>
                An implementation of this method <span class='rfc2119'>MUST</span>
                perform the following steps:
                <ol class='algorithm'>
                  <li x:step='a'>
                    Let <var>V</var> be the IDL value that results from
                    performing the actions listed for getting the corresponding attribute
                    in the description of the interface.
                  </li>
                  <li>
                    If the actions performed in the previous step resulted in an
                    exception being thrown, then allow that exception to propagate
                    out from this algorithm.  Otherwise, return the result of
                    <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                    <var>V</var> to a Java value of the type <var>op</var>
                    is declared to return.
                  </li>
                </ol>
              </li>
            </ul>
            <p>
              In addition, the method <span class='rfc2119'>SHOULD</span> have a <code>throws</code>
              clause specifying all of the Java exception classes that correspond to the IDL
              <a class='dfnref' href='#dfn-exception'>exceptions</a> that are listed in the
              <a class='nt' href='#prod-GetRaises'>GetRaises</a> clause of the attribute, and no others.
            </p>
            <p>
              For each attribute defined on the IDL interface that is not
              <a class='dfnref' href='#dfn-read-only'>read only</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding <dfn id='dfn-setter-method'>setter method</dfn>
              declared on the Java interface with the following characteristics:
            </p>
            <ul>
              <li>The method has no modifiers.</li>
              <li>
                The return type of the method is <span class='javatype'>void</span>.
              </li>
              <li>
                The tentative name of the method is a
                <span class='char'>U+0073 LATIN SMALL S ("s")</span> character, followed by a
                <span class='char'>U+0065 LATIN SMALL E ("e")</span> character, followed by a
                <span class='char'>U+0074 LATIN SMALL T ("t")</span> character, followed by
                the first character of the
                identifier of the attribute uppercased (as if passed to the <code>java.lang.Character.toUpperCase()</code>
                method), followed by the remaining characters from the identifier of the attribute.
                The name of the method is the Java escaped
                tenative name of the method prefixed with the smallest number
                of <span class='char'>U+005F LOW LINE ("_")</span> characters required to make the
                name not equal to the name of a constant or method declared on the Java interface or one of the
                methods on the <span class='javatype'>java.lang.Object</span> class.
              </li>
              <li>
                The method has a single argument whose type is the Java type that corresponds
                to the attribute type, according to the rules in
                <a href='#java-type-mapping'>section <?sref java-type-mapping?></a> <?sdir java-type-mapping?>.
              </li>
              <li>
                An implementation of this method <span class='rfc2119'>MUST</span>
                perform the following steps:
                <ol class='algorithm'>
                  <li>
                    Let <var>arg</var> be the Java value that was passed as the
                    argument to the method.
                  </li>
                  <li>
                    Let <var>idlarg</var> be the result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                    <var>arg</var> to an IDL value of the type the attribute is declared to be.
                  </li>
                  <li x:step='a'>
                    Perform the actions for setting the corresponding attribute
                    with the value <var>idlarg</var> listed in the description of the interface.
                  </li>
                  <li>
                    If the actions performed in the previous step resulted in an
                    exception being thrown, then allow that exception to propagate
                    out from this algorithm.
                  </li>
                </ol>
              </li>
            </ul>
            <p>
              In addition, the method <span class='rfc2119'>SHOULD</span> have a <code>throws</code>
              clause specifying all of the Java exception classes that correspond to the IDL
              exceptions that are listed in the
              <a class='nt' href='#prod-SetRaises'>SetRaises</a> clause of the attribute, and no others.
            </p>
            <!--
            <p>
              For each attribute defined on the IDL interface that is
              <a class='dfnref' href='#dfn-read-only'>read only</a> and is declared with the
              <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding setter method
              declared on the Java interface with the following characteristics:
            </p>
            <ul>
              <li>The method has no modifiers.</li>
              <li>
                The return type of the method is <span class='javatype'>void</span>.
              </li>
              <li>
                The tentative name of the method is a
                <span class='char'>U+0073 LATIN SMALL S ("s")</span> character, followed by a
                <span class='char'>U+0065 LATIN SMALL E ("e")</span> character, followed by a
                <span class='char'>U+0074 LATIN SMALL T ("t")</span> character, followed by
                the first character of the identifier of the attribute
                uppercased (as if passed to the <code>java.lang.Character.toUpperCase()</code>
                method), followed by the remaining characters from the identifier of the attribute.
                The name of the method is the Java escaped
                tenative name of the method prefixed with the smallest number
                of <span class='char'>U+005F LOW LINE ("_")</span> characters required to make the
                name not equal to the name of a constant or method declared on the Java interface or one of the
                methods on the <span class='javatype'>java.lang.Object</span> class.
              </li>
              <li>
                The method has a single argument whose type is the Java type that corresponds
                to the type of the attribute identified by the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
                extended attribute on the interface type that
                this attribute is declared to be of, according to the rules in
                <a href='#java-type-mapping'>section <?sref java-type-mapping?></a> <?sdir java-type-mapping?>.
              </li>
              <li>
                An implementation of this method <span class='rfc2119'>MUST</span>
                perform the following steps:
                <ol class='algorithm'>
                  <li>
                    Let <var>arg</var> be the Java value that was passed as the
                    argument to the method.
                  </li>
                  <li>
                    Let <var>idlarg</var> be the result of <a class='dfnref' href='#dfn-convert-java-to-idl-value'>converting</a>
                    <var>arg</var> to an IDL value of the type the forwarded-to attribute
                    is declared to be.
                  </li>
                  <li x:step='a'>
                    Perform the actions for setting the corresponding attribute
                    with the value <var>idlarg</var> listed in the description of the interface.
                  </li>
                  <li>
                    If the actions performed in the previous step resulted in an
                    exception being thrown, then allow that exception to propagate
                    out from this algorithm.
                  </li>
                </ol>
              </li>
            </ul>
            <p>
              In addition, the method <span class='rfc2119'>SHOULD</span> have a <code>throws</code>
              clause specifying all of the Java exception classes that correspond to the IDL
              exceptions that are listed in the
              <a class='nt' href='#prod-SetRaises'>SetRaises</a> clause of the attribute
              identified by the <a class='xattr' href='#PutForwards'>[PutForwards]</a>
              extended attribute on the interface type that
              this attribute is declared to be of, and no others.
            </p>
            -->
          </div>
        </div>

        <div id='java-implementing' class='section'>
          <h3>Objects implementing interfaces</h3>
          <p>
            A Java object that implements an IDL <a class='dfnref' href='#dfn-interface'>interface</a>
            <span class='rfc2119'>MUST</span> be of a Java class that implements the Java interface
            that corresponds to the IDL interface.
          </p>
          <p>
            If the IDL interface has a <a class='dfnref' href='#dfn-stringifier'>stringifier</a>,
            the <code>String toString()</code> method
            <span class='rfc2119'>MUST</span> be overridden to allow
            stringification of the object as required by the IDL
            interface.  If the <span class='terminal'>"stringifier"</span> keyword
            was used on an <a class='dfnref' href='#dfn-attribute'>attribute</a> <var>A</var>,
            then, assuming <var>O</var> is the object on which
            the method was invoked, the behavior of the overridden
            <code>toString</code> method <span class='rfc2119'>MUST</span>
            be as follows:
          </p>
          <ol class='algorithm'>
            <li>
              Let <var>R</var> be the result of invoking the <a class='dfnref' href='#dfn-getter-method'>getter
                method</a> on <var>O</var> that corresponds to the IDL
              <a class='dfnref' href='#dfn-attribute'>attribute</a>
              <var>A</var>.
            </li>
            <li>Return <var>R</var>.</li>
          </ol>
          <p>
            Otherwise, if the <span class='terminal'>"stringifier"</span> keyword
            was used on an <a class='dfnref' href='#dfn-operation'>operation</a>
            <var>O</var> with an <a class='dfnref' href='#dfn-identifier'>identifier</a>,
            then, assuming <var>O</var> is the object on which
            the method was invoked, the behavior of the overridden
            <code>toString</code> method <span class='rfc2119'>MUST</span>
            be as follows:
          </p>
          <ol class='algorithm'>
            <li>
              Let <var>R</var> be the result of invoking the method on <var>O</var> that corresponds to the IDL
              <a class='dfnref' href='#dfn-operation'>operation</a>
              <var>O</var>, passing no arguments.
            </li>
            <li>Return <var>R</var>.</li>
          </ol>
          <p>
            Otherwise, if the <span class='terminal'>"stringifier"</span> keyword
            was used on an <a class='dfnref' href='#dfn-operation'>operation</a>
            without an <a class='dfnref' href='#dfn-identifier'>identifier</a>, then
            the behavior of the overridden <code>toString()</code>
            method is the <a class='dfnref' href='#dfn-stringification-behavior'>stringification behavior</a>
            of the IDL interface, as described in the prose for the IDL interface.
          </p>
        </div>

        <div id='java-exceptions' class='section'>
          <h3>Exceptions</h3>
          <p>
            A <a class='dfnref' href='#dfn-conforming-java-implementation'>conforming Java implementation</a>
            <span class='rfc2119'>MUST</span> have a Java class corresponding to every
            IDL <a class='dfnref' href='#dfn-exception'>exception</a> that is supported, whose name
            is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
            <a class='dfnref' href='#dfn-identifier'>identifier</a> of the IDL exception and which
            resides in the Java package corresponding to the exception’s
            <a class='dfnref' href='#dfn-enclosing-module'>enclosing module</a>.
          </p>
          <p>
            The Java class <span class='rfc2119'>MUST</span> have only the <code>public</code> modifier,
            and be declared to extend <span class='javatype'>java.lang.RuntimeException</span>.
          </p>

          <div id='java-exception-constants' class='section'>
            <h4>Constants</h4>
            <p>
              For each <a class='dfnref' href='#dfn-constant'>constant</a> defined on the
              exception, there
              <span class='rfc2119'>MUST</span> be a corresponding constant declared on the Java class
              with the following characteristics:
            </p>
            <ul>
              <li>The constant has no modifiers.</li>
              <li>
                The type of the constant is the Java type that corresponds to the type of
                the IDL constant, according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
              <li>
                The name of the constant is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                <a class='dfnref' href='#dfn-identifier'>identifier</a> of the constant.
              </li>
              <li>
                The value of the constant is the result of <a class='dfnref' href='#dfn-convert-idl-to-java-value'>converting</a>
                the constant’s IDL value to a Java value, according to the rules
                in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
            </ul>
          </div>

          <div id='java-exception-members' class='section'>
            <h4>Exception members</h4>
            <p>
              For each <a class='dfnref' href='#dfn-exception-member'>exception member</a> defined on the
              <a class='dfnref' href='#dfn-exception'>exception</a>, there
              <span class='rfc2119'>MUST</span> be a corresponding instance variable declared on the Java class
              with the following characteristics:
            </p>
            <ul>
              <li>The instance variable has only the modifier <code>public</code>.</li>
              <li>
                The type of the instance variable is the Java type that corresponds to the type of
                the IDL exception member, according to the rules in <a href='#java-type-mapping'>section <?sref java-type-mapping?></a>
                <?sdir java-type-mapping?>.
              </li>
              <li>
                The name of the instance variable is the <a class='dfnref' href='#dfn-java-escaped'>Java escaped</a>
                <a class='dfnref' href='#dfn-identifier'>identifier</a> of the exception member.
              </li>
              <li>
                The instance variable is not declared with an initializer.
              </li>
            </ul>
          </div>
        </div>
      </div>

      <div id='common' class='section'>
        <h2>Common definitions</h2>

        <p>
          This section specifies some common definitions that all
          <a class='dfnref' href='#dfn-conforming-implementation'>conforming implementations</a>
          <span class='rfc2119'>MUST</span> support.
        </p>

        <div id='common-DOMTimeStamp' class='section'>
          <h3>DOMTimeStamp</h3>

          <x:codeblock language='idl'>typedef <a href='#DOMTimeStamp'>DOMTimeStamp</a> unsigned long long;</x:codeblock>
          <p>
            The <span class='idltype'>DOMTimeStamp</span> type is used for representing
            a number of milliseconds, either as an absolute time (relative to some epoch)
            or as a relative amount of time.  Specifications that use this type will need
            to define how the number of milliseconds is to be interpreted.
          </p>
        </div>
      </div>

      <div id='extensibility' class='section'>
        <h2>Extensibility</h2>

        <p class='norm'>This section is informative.</p>

        <p>
          Extensions to language binding requirements can be specified
          using <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
          that do not conflict with those defined in this document.  Extensions for
          private, project-specific use should not be included in
          <a class='dfnref' href='#dfn-idl-fragment'>IDL fragments</a>
          appearing in other specifications.  It is recommended that extensions
          that are required for use in other specifications be coordinated
          with the group responsible for work on <cite>Web IDL</cite>, which
          at the time of writing is the
          <a href='http://www.w3.org/2008/webapps/'>W3C Web Applications Working Group</a>,
          for possible inclusion in a future version of this document.
        </p>
        <p>
          Extensions to any other aspect of the IDL language are
          strongly discouraged.
        </p>
      </div>

      <div id='referencing' class='section'>
        <h2>Referencing this specification</h2>

        <p class='norm'>This section is informative.</p>

        <p>
          It is expected that other specifications that define DOM interfaces
          using a <a class='dfnref' href='#dfn-conforming-idl-fragment'>conforming
            IDL fragment</a> will reference this specification.  It is suggested
          that those specifications include a sentence such as the following,
          to indicate that the IDL is to be interpreted as described in this
          specification:
        </p>
        <blockquote>
          <p>
            The IDL fragment in Appendix A of this specification must be interpreted
            as required for <em>conforming IDL fragments</em>, as described in the
            “Web IDL” specification. <a class='placeholder'>[WEBIDL]</a>
          </p>
        </blockquote>
        <p>
          In addition, it is suggested that the conformance class for user
          agents in referencing specifications be linked to the
          <a class='dfnref' href='#dfn-conforming-implementation'>conforming
            implementation</a> class from this specification:
        </p>
        <blockquote>
          <p>
            A conforming FooML user agent must also be a
            <em>conforming implementation</em> of the IDL fragment in Appendix A
            of this specification, as described in the
            “Web IDL” specification. <a class='placeholder'>[WEBIDL]</a>
          </p>
        </blockquote>
      </div>

      <div id='acknowledgements' class='section'>
        <h2>Acknowledgements</h2>

        <p class='norm'>This section is informative.</p>

        <p>
          The editor would like to thank the following people for contributing
          to this specification:
          David Andersson,
          L. David Baron,
          Robin Berjon,
          Giovanni Campagna,
          Brendan Eich,
          Gorm Haug Eriksen,
          Marcin Hanclik,
          Jed Hartman,
          Dominique Hazaël-Massieux,
          Ian Hickson,
          Björn Höhrmann,
          Dimitry Golubovsky,
          Kartikaya Gupta,
          James Graham,
          Magnus Kristiansen,
          Mark Miller,
          Lachlan Hunt,
          Oliver Hunt,
          Jim Jewett,
          Anne van Kesteren,
          Jim Ley,
          Travis Leithead,
          Kevin Lindsey,
          岡坂 史紀 (Shiki Okasaka),
          Simon Pieters,
          Andrei Popescu,
          Tim Renouf,
          Jonas Sicking,
          Garrett Smith,
          Geoffrey Sneddon,
          Maciej Stachowiak,
          Jeff Walden,
          Collin Xu,
          Boris Zbarsky.
        </p>
        <p>
          Special thanks also go to Sam Weinig for maintaining this document
          while the editor was unavailable to do so.
        </p>
      </div>
    </div>

    <div id='appendices'>
      <div id='idl-grammar' class='section'>
        <h2>IDL grammar</h2>

        <p>
          This section defines an LL(1) grammar whose start symbol,
          <a class='nt' href='#prod-Definitions'>Definitions</a>, matches an
          entire <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>.
        </p>

        <p>
          Each production in the grammar has on its right hand side either a
          non-zero sequence of terminal and non-terminal symbols, or an
          epsilon (ε) which indicates no symbols.  Symbols that begin with
          an uppercase letter are non-terminal symbols.  Symbols within quotes
          are terminal symbols that are matched with the exact text between
          the quotes.  Symbols that begin with a lowercase letter are terminal
          symbols that are matched by the regular expressions (using Perl 5 regular
          expression syntax <a href='#ref-PERLRE'>[PERLRE]</a>) as follows:
        </p>
        <table class='grammar'>
          <tr>
            <td id='prod-integer' class='nt'>integer</td>
            <td class='regex'>=</td>
            <td class='regex'>-?(0([0-7]*|[Xx][0-9A-Fa-f]+)|[1-9][0-9]*)</td>
          </tr>
          <tr>
            <td id='prod-float' class='nt'>float</td>
            <td class='regex'>=</td>
            <td class='regex'>-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)</td>
          </tr>
          <tr>
            <td id='prod-identifier' class='nt'>identifier</td>
            <td class='regex'>=</td>
            <td class='regex'>[A-Z_a-z][0-9A-Z_a-z]*</td>
          </tr>
          <tr>
            <td id='prod-string' class='nt'>string</td>
            <td class='regex'>=</td>
            <td class='regex'>"[^"]*"</td>
          </tr>
          <tr>
            <td id='prod-whitespace' class='nt'>whitespace</td>
            <td class='regex'>=</td>
            <td class='regex'>[\t\n\r ]+|[\t\n\r ]*((//.*|/\*.*?\*/)[\t\n\r ]*)+</td>
          </tr>
          <tr>
            <td id='prod-other' class='nt'>other</td>
            <td class='regex'>=</td>
            <td class='regex'>[^\t\n\r 0-9A-Z_a-z]</td>
          </tr>
        </table>

        <p>
          The tokenizer operates on a sequence of Unicode characters
          <a href='#ref-UNICODE40'>[UNICODE40]</a>.
          When tokenizing, the longest possible match <span class='rfc2119'>MUST</span> be used.  For example, if the input
          text is “<span class='input'>a1</span>”, it is tokenized as a single <span class='terminal'>identifier</span>,
          and not as a separate <span class='terminal'>identifier</span> and <span class='terminal'>integer</span>.
          If the longest possible match could match both an <span class='terminal'>identifier</span> and
          one of the quoted terminal symbols from the grammar, it <span class='rfc2119'>MUST</span> be tokenized as the quoted
          terminal symbol.  Thus, the input text “<span class='input'>in</span>” is tokenized as the quoted terminal symbol
          <span class='terminal'>"in"</span> rather than an <span class='terminal'>identifier</span> called “in”.
        </p>
        <p>
          The IDL syntax is case sensitive, both for the quoted terminal symbols
          used in the grammar and the values used for
          <span class='terminal'>identifier</span> terminals.  Thus, for
          example, the input text “<span class='input'>Getraises</span>” is tokenized as
          an <span class='terminal'>identifier</span> rather than the quoted
          terminal symbol <span class='terminal'>"getraises"</span>, an
          <a class='dfnref' href='#dfn-interface'>interface</a> with
          <a class='dfnref' href='#dfn-identifier'>identifier</a>
          “A” is distinct from one named “a”, and an
          <a class='dfnref' href='#dfn-extended-attribute'>extended attribute</a>
          <span class='xattr'>[constructor]</span> will not be recognized as
          the the <a class='xattr' href='#Constructor'>[Constructor]</a>
          extended attribute.
        </p>
        <p>
          Implicitly, the <span class='terminal'>whitespace</span> terminal is allowed between every terminal
          in the input text being parsed.  Such <span class='terminal'>whitespace</span> terminals, which
          actually encompass both whitespace and comments, are ignored while parsing.
        </p>

        <p>
          The following LL(1) grammar, starting with <a class='nt' href='#prod-Definitions'>Definitions</a>,
          matches an <a class='dfnref' href='#dfn-idl-fragment'>IDL fragment</a>:
        </p>

        <div class='ednote'>
          <p>Add a <span class='nt'>ConstType</span> non-terminal. <a href='http://lists.w3.org/Archives/Public/public-script-coord/2010JanMar/0003.html'>(Mail.)</a></p>
        </div>

        <grammar id='grammar' xmlns='http://mcc.id.au/ns/local'>
          <prod nt='Definitions'>ExtendedAttributeList Definition Definitions | ε</prod>
          <prod nt='Definition'>Module | Interface | Exception | Typedef | ImplementsStatement</prod>
          <prod nt='Module'>"module" identifier "{" Definitions "}" ";"</prod>
          <prod nt='Interface'>"interface" identifier InterfaceInheritance "{" InterfaceMembers "}" ";"</prod>
          <prod nt='InterfaceInheritance'>":" ScopedNameList | ε</prod>
          <prod nt='InterfaceMembers'>ExtendedAttributeList InterfaceMember InterfaceMembers | ε</prod>
          <prod nt='InterfaceMember'>Const | AttributeOrOperation</prod>
          <prod nt='Exception'>"exception" identifier "{" ExceptionMembers "}" ";"</prod>
          <prod nt='ExceptionMembers'>ExtendedAttributeList ExceptionMember ExceptionMembers | ε</prod>
          <prod nt='Typedef'>"typedef" Type identifier ";"</prod>
          <prod nt='ImplementsStatement'>ScopedName "implements" ScopedName ";"</prod>
          <prod nt='Const'>"const" Type identifier "=" ConstExpr ";"</prod>
          <prod nt='ConstExpr'>BooleanLiteral | integer | float</prod>
          <prod nt='BooleanLiteral'>"true" | "false"</prod>
          <prod nt='AttributeOrOperation'>"stringifier" StringifierAttributeOrOperation | Attribute | Operation</prod>
          <prod nt='StringifierAttributeOrOperation'>Attribute | OperationRest | ";"</prod>
          <prod nt='Attribute'>ReadOnly "attribute" Type identifier GetRaises SetRaises ";"</prod>
          <prod nt='ReadOnly'>"readonly" | ε</prod>
          <prod nt='GetRaises'>"getraises" ExceptionList | ε</prod>
          <prod nt='SetRaises'>"setraises" ExceptionList | ε</prod>
          <prod nt='Operation'>OmittableSpecials OperationRest</prod>
          <prod nt='OmittableSpecials'>"omittable" Specials | Specials</prod>
          <prod nt='Specials'>Special Specials | ε</prod>
          <prod nt='Special'>"getter" | "setter" | "creator" | "deleter" | "caller"</prod>
          <prod nt='OperationRest'>ReturnType OptionalIdentifier "(" ArgumentList ")" Raises ";"</prod>
          <prod nt='OptionalIdentifier'>identifier | ε</prod>
          <prod nt='Raises'>"raises" ExceptionList | ε</prod>
          <prod nt='ExceptionList'>"(" ScopedNameList ")"</prod>
          <prod nt='ArgumentList'>Argument Arguments | ε</prod>
          <prod nt='Arguments'>"," Argument Arguments | ε</prod>
          <prod nt='Argument'>ExtendedAttributeList In Optional Type Ellipsis identifier</prod>
          <prod nt='In'>"in" | ε</prod>
          <prod nt='Optional'>"optional" | ε</prod>
          <prod nt='Ellipsis'>"..." | ε</prod>
          <prod nt='ExceptionMember'>Const | ExceptionField</prod>
          <prod nt='ExceptionField'>Type identifier ";"</prod>
          <prod nt='ExtendedAttributeList'>"[" ExtendedAttribute ExtendedAttributes "]" | ε</prod>
          <prod nt='ExtendedAttributes'>"," ExtendedAttribute ExtendedAttributes | ε</prod>
          <prod nt='ExtendedAttribute'>
              "(" ExtendedAttributeInner ")" ExtendedAttributeRest
            | "[" ExtendedAttributeInner "]" ExtendedAttributeRest
            | "{" ExtendedAttributeInner "}" ExtendedAttributeRest
            | Other ExtendedAttributeRest
          </prod>
          <prod nt='ExtendedAttributeRest'>ExtendedAttribute | ε</prod>
          <prod nt='ExtendedAttributeInner'>
              "(" ExtendedAttributeInner ")" ExtendedAttributeInner
            | "[" ExtendedAttributeInner "]" ExtendedAttributeInner
            | "{" ExtendedAttributeInner "}" ExtendedAttributeInner
            | OtherOrComma ExtendedAttributeInner
            | ε
          </prod>
          <prod nt='Other'>
              integer | float | identifier | string <!--| whitespace--> | other
            | "..." | ":" | "::" | ";" | "&lt;" | "=" | ">" | "?"
            | "false" | "object" | "true" | "any" | "attribute" | "boolean" | "caller"
            | "const" | "creator" | "deleter" | "double" | "exception" | "float" | "getraises" | "getter" | "implements" | "in"
            | "interface" | "long" | "module" | "octet" | "omittable" | "optional" | "raises" | "sequence"
            | "setraises" | "setter" | "short" | "DOMString" | "stringifier" | "typedef" | "unsigned" | "void"
          </prod>
          <prod nt='OtherOrComma'>Other | ","</prod>

          <prod nt='Type'>NullableType Array | ScopedName Array | "any" Array | "object" Array</prod>
          <prod nt='NullableType'>UnsignedIntegerType Nullable | "boolean" Nullable | "octet" Nullable | "float" Nullable | "double" Nullable | "DOMString" Nullable | "sequence" "&lt;" Type ">" Nullable</prod>
          <prod nt='UnsignedIntegerType'>"unsigned" IntegerType | IntegerType</prod>
          <prod nt='IntegerType'>"short" | "long" OptionalLong</prod>
          <prod nt='OptionalLong'>"long" | ε</prod>
          <prod nt='Nullable'>"?" | ε</prod>
          <prod nt='Array'>"[" "]" Array | ε</prod>
          <prod nt='ReturnType'>Type | "void"</prod>
          <prod nt='ScopedNameList'>ScopedName ScopedNames</prod>
          <prod nt='ScopedNames'>"," ScopedName ScopedNames | ε</prod>
          <prod nt='ScopedName'>AbsoluteScopedName | RelativeScopedName</prod>
          <prod nt='AbsoluteScopedName'>"::" identifier ScopedNameParts</prod>
          <prod nt='RelativeScopedName'>identifier ScopedNameParts</prod>
          <prod nt='ScopedNameParts'>"::" identifier ScopedNameParts | ε</prod>

          <!--prod nt='IdentifierList'>identifier Identifiers</prod>
          <prod nt='Identifiers'>"," identifier Identifiers | ε</prod-->

          <!-- These five productions aren't referenced from any of the
               other productions; they're just mentioned from the
               #idl-extended-attributes section. -->
          <prod nt='ExtendedAttributeNoArg'>identifier</prod>
          <prod nt='ExtendedAttributeArgList'>identifier "(" ArgumentList ")"</prod>
          <prod nt='ExtendedAttributeIdent'>identifier "=" identifier</prod>
          <prod nt='ExtendedAttributeScopedName'>identifier "=" ScopedName</prod>
          <prod nt='ExtendedAttributeNamedArgList'>identifier "=" identifier "(" ArgumentList ")"</prod>

          <!--prod nt='Keyword'>"any" | "attribute" | "boolean" | "const" | "double" | "exception" | "float" | "getraises" | "in" | "interface" | "long" | "module" | "Object" | "octet" | "raises" | "readonly" | "sequence" | "setraises" | "short" | "typedef" | "unsigned | "void"</prod-->
          <!-- the following are the remaining OMG IDL 3 keywords:
          "abstract" |
          "case" |
          "char" |
          "component" |
          "consumes" |
          "context" |
          "custom" |
          "default" |
          "emits" |
          "enum" |
          "eventtype" |
          "factory" |
          "finder" |
          "fixed" |
          "home" |
          "inout" |
          "local" |
          "multiple" |
          "native" |
          "oneway" |
          "out" |
          "primarykey" |
          "private" |
          "provides" |
          "public" |
          "publishes" |
          "string" |
          "struct" |
          "supports" |
          "switch" |
          "truncatable" |
          "typeid" |
          "typeprefix" |
          "union" |
          "uses" |
          "ValueBase" |
          "wchar" |
          "wstring"
          -->
        </grammar>
        <div class='note'>
          <p>
            The choices listed for the <a class='nt' href='#prod-Other'>Other</a>
            non-terminal are all of the terminal symbols except for
            <span class="terminal">"("</span>, <span class="terminal">")"</span>,
            <span class="terminal">"["</span>, <span class="terminal">"]"</span>,
            <span class="terminal">"{"</span>, <span class="terminal">"}"</span>
            and <span class="terminal">","</span>.
          </p>
        </div>
        <p>
          While the <a class='nt' href='#prod-ExtendedAttribute'>ExtendedAttribute</a>
          non-terminal matches any non-empty sequence of terminal symbols (as long as any
          parentheses, square brackets or braces are balanced, and the
          <span class="terminal">","</span> token appears only within those balanced brackets),
          only a subset of those
          possible sequences are used by the <a class='dfnref' href='#dfn-extended-attribute'>extended attributes</a>
          defined in this specification — see
          <a href='#idl-extended-attributes'>section <?sref idl-extended-attributes?></a>
          for the syntaxes that are used by these extended attributes.
        </p>
      </div>

      <div id='references' class='section'>
        <h2>References</h2>

        <div id='normative-references' class='section'>
          <h3>Normative references</h3>

          <dl>
            <dt id='ref-ECMA-262'>[ECMA-262]</dt>
            <dd>
              <cite><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript Language Specification, 5th Edition</a></cite>,
              P. Lakshman and A. Wirfs-Brock, Editors. Ecma International, December 2009.  Available at http://www.ecma-international.org/publications/standards/Ecma-262.htm.
            </dd>
            <dt id='ref-IEEE-754'>[IEEE-754]</dt>
            <dd>
              <cite>IEEE Standard for Binary Floating-Point Arithmetic (ANSI/IEEE Std 754-1985)</cite>.
              Institute of Electrical and Electronics Engineers, 1985.
            </dd>
            <dt id='ref-JLS3'>[JLS3]</dt>
            <dd>
              <cite><a href="http://java.sun.com/docs/books/jls/">The Java Language Specification, Third Edition</a></cite>.
              J. Gosling, et al.  Upper Saddle River, New Jersey, Addison-Wesley, 2005.
              Available at http://java.sun.com/docs/books/jls/.
            </dd>
            <dt id='ref-PERLRE'>[PERLRE]</dt>
            <dd>
              <cite><a href='http://search.cpan.org/dist/perl/pod/perlre.pod'>Perl regular expressions (Perl 5.8.8)</a></cite>.
              The Perl Foundation, February 2006.  Available at http://www.perl.com/doc/manual/html/pod/perlre.html.
            </dd>
            <dt id='ref-RFC2119'>[RFC2119]</dt>
            <dd>
              <cite><a href='http://www.ietf.org/rfc/rfc2119'>Key words for use in RFCs to Indicate Requirement Levels</a></cite>,
              S. Bradner.  IETF, March 1997.  Available at http://www.ietf.org/rfc/rfc2119.
            </dd>
            <dt id='ref-RFC2781'>[RFC2781]</dt>
            <dd>
              <cite><a href='http://www.ietf.org/rfc/rfc2781'>UTF-16, an encoding of ISO 10646</a></cite>,
              P. Hoffmann and F. Yergeau.  IETF, February 2000.  Available at http://www.ietf.org/rfc/rfc2781.
            </dd>
            <dt id='ref-UNICODE40'>[UNICODE40]</dt>
            <dd>
              <cite><a href='http://www.unicode.org/unicode/standard/versions/'>The Unicode Standard</a></cite>,
              Version 4.0 or later.  The Unicode Consortium.  Boston, Massachusetts, Addison-Wesley, 2003.
              ISBN 0-321-18578-1.  Available at http://www.unicode.org/versions/Unicode4.0.0/.
            </dd>
          </dl>
        </div>

        <div id='informative-references' class='section'>
          <h3>Informative references</h3>

          <dl>
            <dt id='ref-DOM3CORE'>[DOM3CORE]</dt>
            <dd>
              <cite><a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/'>Document Object Model (DOM) Level 3 Core Specification</a></cite>.
              A. Le Hors, et al., Editors.  World Wide Web Consortium, April 2004.  Available at http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/.
            </dd>
            <dt id='ref-OMGIDL'>[OMGIDL]</dt>
            <dd>
              <cite><a href='http://www.omg.org/cgi-bin/doc?formal/08-01-04.pdf'>CORBA 3.1 – OMG IDL Syntax and Semantics chapter</a></cite>.
              Object Management Group, January 2008.  Available at http://www.omg.org/cgi-bin/doc?formal/08-01-04.pdf.
            </dd>
            <dt id='ref-WIDLNOTE'>[WIDLNOTE]</dt>
            <dd>
              <cite><a href='http://www.w3.org/TR/NOTE-widl-970922'>Web Interface Definition Language (WIDL)</a></cite>.
              P. Merrick and C. Allen.  World Wide Web Consortium, September 1997.  Available at http://www.w3.org/TR/NOTE-widl-970922.
            </dd>
          </dl>
        </div>
      </div>

      <div id='changes' class='section'>
        <h2>Changes</h2>
        <p>
          The following is a list of substantial changes to the document on each publication.
        </p>
        <dl class='changes'>
          <dt>Current editor’s draft</dt>
          <dd>
            <ul>
              <li>
                <p>
                  Added support for static operations.
                </p>
              </li>
              <li>
                <p>
                  Fixed errors in the <span class='terminal'>float</span> and
                  <span class='terminal'>integer</span> grammar terminals.
                </p>
              </li>
              <li>
                <p>
                  Added productions for array types to the grammar, which were missing.
                </p>
              </li>
              <li>
                <p>
                  Added a section for common IDL definitions that all conforming
                  implementations must support, the first entry in which is
                  a definition for the <span class='idltype'>DOMTimeStamp</span>
                  type.
                </p>
              </li>
            </ul>
          </dd>
          <dt>21 October 2010 – WD</dt>
          <dd>
            <ul>
              <li>
                <p>
                  Made constructors due to <span class='xattr'>[Constructor]</span> and
                  <span class='xattr'>[NamedConstructor]</span> callable.  Their behavior
                  when called is the same as when used in a <code>new</code> expression.
                </p>
              </li>
              <li>
                <p>
                  Updated the ECMAScript language binding to target ECMAScript 5th edition,
                  the biggest part of which is that now interface attributes are
                  implemented as accessor properties.
                </p>
              </li>
              <li>
                <p>
                  Ensure that corresponding properties do not exist for constants,
                  attributes and operations named “constructor” or “toString”
                  if they would conflict with other requirements to have properties
                  with those names.
                </p>
              </li>
              <li>
                <p>
                  Moved properties corresponding to attributes from host object
                  instances to their interface prototype objects.  Similarly, moved
                  properties corresponding to exception members from host exception
                  objects to their exception interface prototype objects.
                </p>
              </li>
              <li>
                <p>
                  Disallow both <span class='xattr'>[PutForwards]</span> and
                  <span class='xattr'>[Replaceable]</span> appearing on the same
                  attribute.
                </p>
              </li>
              <li>
                <p>
                  Required that callable objects corresponding to operations
                  be <span class='estype'>Function</span> objects.
                </p>
              </li>
              <li>
                <p>
                  Changed the <span class='prop'>constructor</span> property
                  on interface prototype objects to be writable.
                </p>
              </li>
              <li>
                <p>
                  Changed the <span class='prop'>prototype</span> property on
                  interface and exception objects be non-enumerable.
                </p>
              </li>
              <li>
                <p>
                  Allowed callers to be overloaded.
                </p>
              </li>
              <li>
                <p>
                  Defined the <span class='prop'>length</span> property on
                  <span class='estype'>Function</span> objects that correspond to operations and constructors.
                </p>
              </li>
              <li>
                <p>
                  Changed sequences to be passed by value, and added an array type
                  for ordered lists of values that are passed by reference.
                </p>
              </li>
              <li>
                <p>
                  Removed interface forward declarations and the requirement that interfaces
                  be declared before use.
                </p>
              </li>
              <li>
                <p>
                  Made the <span class='terminal'>"in"</span> keyword in argument lists optional.
                </p>
              </li>
              <li>
                <p>
                  Changed the <span class='terminal'>"Object"</span>,
                  <span class='terminal'>"TRUE"</span> and <span class='terminal'>"FALSE"</span>
                  keywords to be all lowercase.
                </p>
              </li>
              <li>
                <p>
                  Dropped <span class='xattr'>[Optional]</span> and <span class='xattr'>[Variadic]</span>
                  in favor of <code>optional</code> and <code>...</code> syntax.
                </p>
              </li>
              <li>
                <p>
                  Dropped <span class='xattr'>[ImplementedOn]</span> in favor of an
                  <code>implements</code> statement.
                </p>
              </li>
              <li>
                <p>
                  Dropped <span class='xattr'>[ExceptionConsts]</span> in favor of allowing
                  constants to be defined directly on exceptions.  Defining constants on
                  modules is now disallowed.
                </p>
              </li>
              <li>
                <p>
                  Changed <span class='xattr'>[Constructor]</span> and <span class='xattr'>[PutForwards]</span>
                  to be an ECMAScript-specific extended attribute.
                </p>
              </li>
              <li>
                <p>
                  Turned <span class='xattr'>[Callable]</span>,
                  <span class='xattr'>[IndexGetter]</span>,
                  <span class='xattr'>[IndexSetter]</span>,
                  <span class='xattr'>[IndexCreator]</span>,
                  <span class='xattr'>[IndexDeleter]</span>,
                  <span class='xattr'>[NameGetter]</span>,
                  <span class='xattr'>[NameSetter]</span>,
                  <span class='xattr'>[NameCreator]</span>,
                  <span class='xattr'>[NameDeleter]</span> and
                  <span class='xattr'>[Stringifies]</span> into real Web IDL syntax
                  using <code>caller</code>, <code>getter</code>, <code>setter</code>,
                  <code>creator</code>, <code>deleter</code> and <code>stringifier</code>.
                  Dropped <span class='xattr'>[NoIndexingOperations]</span> in favor of
                  an <code>omittable</code> keyword that can be used on the above
                  six special operations.
                </p>
              </li>
              <li>
                <p>
                  Removed boxed valuetypes and replaced them with the concept
                  of nullable types.
                </p>
              </li>
              <li>
                <p>
                  Added <span class='xattr'>[NamespaceObject]</span> to allow
                  reflecting module hierarchies in ECMAScript.
                </p>
              </li>
              <li>
                <p>
                  Disallowed specifying <span class='xattr'>[Callback]</span> on
                  interfaces that do not match the criteria for interfaces that
                  can be implemented by native objects, and disallowed the use
                  of the <span class='idlident'>FunctionOnly</span> and
                  <span class='idlident'>PropertyOnly</span> identifiers unless
                  the interface has only a single operation (or multiple operations,
                  as long as they all have the same identifier).
                </p>
              </li>
              <li>
                <p>
                  Made corresponding indexed properties and ECMAScript properties
                  for operations enumerable.
                </p>
              </li>
              <li>
                <p>
                  Outlawed having both <span class='xattr'>[NoInterfaceObject]</span> and
                  <span class='xattr'>[Constructor]</span> on an interface.
                </p>
              </li>
              <li>
                <p>
                  Required that identical mixin prototype objects are in fact
                  the same object.
                </p>
              </li>
              <li>
                <p>
                  Renamed <span class='xattr'>[Null]</span> and <span class='xattr'>[Undefined]</span>
                  to <span class='xattr'>[TreatNullAs]</span> and <span class='xattr'>[TreatUndefinedAs]</span>.
                  They are now honored when values are returned from native object implemented
                  operations and attributes.
                </p>
              </li>
              <li>
                <p>
                  Added algorithms for getting and setting values of attributes on
                  native object implementations of interfaces.
                </p>
              </li>
              <li>
                <p>
                  Added <span class='xattr'>[OverrideBuiltins]</span>, which makes
                  name getters prefer named properties instead of properties on the object itself.
                </p>
              </li>
              <li>
                <p>
                  Fixed bugs in the host object <span class='prop'>[[Put]]</span>
                  algorithm (now <span class='prop'>[[DefineOwnProperty]]</span>)
                  so that name and index creators are actually
                  invoked, and restructured it as well as the host object
                  <span class='prop'>[[Delete]]</span>
                  algorithm so that they are easier to read.
                </p>
              </li>
              <li>
                <p>
                  Provided language binding independent advice on handling user
                  implemented interfaces that throw exceptions or return values
                  of inappropriate types.
                </p>
              </li>
              <li>
                <p>
                  Renamed the awkwardly worded “object implementing an interface” type
                  to “interface type”.
                </p>
              </li>
              <li>
                <p>
                  Added an <span class='xattr'>[AllowAny]</span> ECMAScript-specific
                  extended attribute on operation arguments, which indicates that
                  any type of ECMAScript value is allowed to be passed to that
                  argument.
                </p>
              </li>
              <li>
                <p>
                  Changed the definition of the effective overload set to take
                  into account the number of arguments passed, so that it can
                  be used to resolve overloaded calls properly in the
                  presence of variadic operations.
                </p>
              </li>
              <li>
                <p>
                  <!--Renamed <span class='idltype'>DOMString</span> to <span class='idltype'>string</span>,
                  removed it from the list of primitive types, and allowed it-->
                  Removed <span class='idltype'>DOMString</span> from the list
                  of primitive types, removed <span class='idlvalue'>null</span>
                  from its set of values, and allowed it to
                  be distinguished from primitive types in the overload
                  resolution algorithm.  The <span class='xattr'>[Callback]</span>
                  extended attribute is now also taken into account when a
                  native object is passed as an argument.
                </p>
              </li>
              <li>
                <p>
                  Defined exception handling for algorithms that call in
                  to user ECMAScript code.
                </p>
              </li>
              <li>
                <p>
                  Added an algorithm for converting a sequence of 16 bit
                  unsigned integer code units into a sequence of Unicode
                  characters.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='idltype'>double</span> type for double
                  precision floating point numbers.
                </p>
              </li>
              <li>
                <p>
                  Define <span class='prop'>[[Class]]</span> for host objects
                  that implement a single interface, regardless of whether
                  it is annotated with <span class='xattr'>[PrototypeRoot]</span>.
                </p>
              </li>
            </ul>
          </dd>
          <dt>19 December 2008 – WD</dt>
          <dd>
            <ul>
              <li>
                <p>
                  Added a <span class='xattr'>[NoIndexingOperations]</span>
                  extended attribute to indicate that operations annotated
                  with named property or indexed property extended attributes
                  won’t result in functions, if the language binding supports
                  object indexing.
                </p>
              </li>
              <li>
                <p>
                  Changed the way extended attributes are parsed in the grammar
                  and filled out the Extensibility section to mention how
                  extended attributes not defined in this document can be used.
                </p>
              </li>
              <li>
                <p>
                  Fixed some bugs in the rules for converting <span class='idltype'>float</span>
                  and <span class='idltype'>unsigned long long</span> to ECMAScript
                  <span class='estype'>Number</span> values, and vice versa.
                </p>
              </li>
              <li>
                <p>
                  Added <span class='xattr'>[Prefix]</span> to change the default
                  mapping of modules to language binding namespacing constructs.
                </p>
              </li>
              <li>
                <p>
                  Allowed interfaces with constants to be implemented by
                  ECMAScript native objects.  This specifically allows
                  implementation of a DOM Level 2 Traversal
                  <span class='idltype'>NodeFilter</span> object in script.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='xattr'>[Callable]</span>
                  extended attribute, which can be used to indicate
                  the behavior of calling an object as a function.
                </p>
              </li>
              <li>
                <p>
                  Removed a bogus requirement that
                  <span class='xattr'>[PutForwards]</span> identify an
                  attribute whose type is the same as the attribute that
                  has the <span class='xattr'>[PutForwards]</span>, and
                  disallowed cycles of forwarding assignments.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='xattr'>[Replaceable]</span> extended
                  attribute that can be placed on an attribute to indicate
                  that the corresponding ECMAScript property can be
                  replaced.
                </p>
              </li>
              <li>
                <p>
                  Added a requirement that <span class='xattr'>[Stringifies]</span>
                  not be specified on an interface that also declares an
                  interface member named <code>toString</code>.
                </p>
              </li>
              <li>
                <p>
                  Changed the DOMString type to be a sequence of 16 bit
                  code units, rather than a sequence of Unicode characters.
                </p>
              </li>
              <li>
                <p>
                  Reworded the ECMAScript type mapping section so
                  that it can be more easily referenced from other
                  sections of the document.
                </p>
              </li>
              <li>
                <p>
                  Renamed <span class='xattr'>[NativeObject]</span> to
                  <span class='xattr'>[Callback]</span>, and gave it an
                  additional <code>PropertyOnly</code> argument.
                </p>
              </li>
              <li>
                <p>
                  Added an <span class='xattr'>[Optional]</span> extended
                  attribute to make certain kinds of operation overloading
                  able to be specified more succinctly.
                </p>
              </li>
              <li>
                <p>
                  Reworked operation overloading in IDL so that it is
                  much more restrictive.  Updated the overloaded
                  operation and constructor resolution in ECMAScript accordingly.
                </p>
              </li>
              <li>
                <p>
                  Specified the behavior of index and name getters
                  in ECMAScript as being in terms of additional properties
                  that are placed on the host object.  Added
                  <span class='xattr'>[IndexCreator]</span>,
                  <span class='xattr'>[IndexDeleter]</span>,
                  <span class='xattr'>[NameCreator]</span> and
                  <span class='xattr'>[NameDeleter]</span> to handle
                  more aspects of these properties.  The definition
                  of <span class='prop'>[[Get]]</span> for host objects
                  is removed, but <span class='prop'>[[Put]]</span> is
                  expanded to handle index and name creators/setters,
                  and <span class='prop'>[[Delete]]</span> is now specified
                  to handle index and name deleters.
                </p>
              </li>
              <li>
                <p>
                  Specified the value of <span class='prop'>[[Class]]</span>
                  for host objects.
                </p>
              </li>
              <li>
                <p>
                  Removed the suggestion to perform tricksy multiple inheritance
                  simulation in ECMAScript with a mandated way to map multiple
                  inheritance into a single inheritance prototype chain.  Added
                  <span class='xattr'>[ImplementedOn]</span> and
                  <span class='xattr'>[PrototypeRoot]</span> to help with this.
                </p>
              </li>
              <li>
                <p>
                  Made an explicit mention of the <cite>Web Interface Definition
                    Language (WIDL)</cite> W3C Member submission in the Status
                  of this Document section.
                </p>
              </li>
            </ul>
          </dd>
          <dt>29 August 2008 – WD</dt>
          <dd>
            <ul>
              <li>
                <p>
                  Added an <span class='xattr'>[NamedConstructor]</span> extended attribute
                  to handle peculiarities like HTML 5’s <code>Image</code> constructor.
                </p>
              </li>
              <li>
                <p>
                  <span class='xattr'>[Constructor]</span> extended attributes may now
                  take an argument list, and more than one can be used on an interface.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='xattr'>[NativeObject]</span> extended attribute
                  that restricts which interfaces may be implemented by ECMAScript
                  native objects, and updated the “Native objects implementing interfaces”
                  section to be more restricted and precise.
                </p>
              </li>
              <li>
                <p>
                  Moved <span class='xattr'>[NoInterfaceObject]</span> into the
                  ECMAScript-specific extended attributes section.
                </p>
              </li>
              <li>
                <p>
                  Fixed errors in a couple of algorithms that were introduced by
                  steps being renumbered.
                </p>
              </li>
              <li>
                <p>
                  Properties corresponding to IDL constants are now ReadOnly.
                </p>
              </li>
              <li>
                <p>
                  Removed <span class='xattr'>[NoNull]</span>, and added
                  <span class='xattr'>[Null]</span> and <span class='xattr'>[Undefined]</span>
                  in its place.
                </p>
              </li>
              <li>
                <p>
                  Made <span class='idltype'>DOMString</span> an intrinsic type,
                  but still allow it to be defined as a boxed sequence of
                  unsigned shorts for compatibility with already published IDL
                  fragments.
                </p>
              </li>
              <li>
                <p>
                  ECMAScript host object constructors (specified with
                  <span class='xattr'>[Constructor]</span>) now must return an
                  object that implements the interface.
                </p>
              </li>
              <li>
                <p>
                  Tweaked the abstract and introduction so that it is clear that
                  Web IDL can be used for specifications that define not only a
                  DOM, but any interface.
                </p>
              </li>
              <li>
                <p>
                  Clarified the behavior of passing a
                  non-<span class='esvalue'>null</span>,
                  non-<span class='estype'>Object</span>
                  value to a host object that expects a boxed valuetype.
                </p>
              </li>
              <li>
                <p>Renamed document to <cite>Web IDL</cite>.</p>
              </li>
            </ul>
          </dd>
          <dt>10 April 2008 – WD</dt>
          <dd>
            <ul>
              <li>
                <p>
                  Restricted boxed valuetypes to boxing only types that cannot
                  already have <span class='idlvalue'>null</span>.</p>
              </li>
              <li>
                <p>
                  Reworked how operation overloading is specified
                  (the <span class='xattr'>[Overloads]</span> extended attribute
                  is no longer needed), and how ECMAScript disambiguates
                  calls to overloaded operations.
                </p>
              </li>
              <li>
                <p>Filled in the “Host exception objects” section.</p>
              </li>
              <li>
                <p>
                  Added an exception interface prototype object for constants
                  to live in.  Added constants to interface objects, interface
                  prototype objects, exception interface objects and exception
                  interface prototype objects.
                </p>
              </li>
              <li>
                <p>Tweaked the behavior of sequences in ECMAScript.</p>
              </li>
              <li>
                <p>
                  Added an editorial note about the possibility of somehow
                  specifying HTML 5’s <code>Image</code> constructor.
                </p>
              </li>
              <li>
                <p>
                  Added a <span class='xattr'>[NoInterfaceObject]</span> extended attribute,
                  which prevents an ECMAScript interface object being created for the interface
                  on which it appears.
                </p>
              </li>
              <li>
                <p>Added a <span class='xattr'>[Stringifies]</span> extended attribute.</p>
              </li>
              <li>
                <p>
                  Fixed small bugs in <span class='prop'>[[HasProperty]]</span>,
                  <span class='prop'>[[Get]]</span> and <span class='prop'>[[Put]]</span>
                  algorithms for ECMAScript host objects.
                </p>
              </li>
              <li>
                <p>
                  Added an editorial note about the possibility of an extended
                  attribute that specifies what properties get enumerated in
                  a for..in loop in ECMAScript.
                </p>
              </li>
            </ul>
          </dd>
          <dt>17 October 2007 – FPWD</dt>
          <dd>
            <ul>
              <li><p>Initial publication.</p></li>
            </ul>
          </dd>
        </dl>
      </div>
    </div>
  </body>
</html>
