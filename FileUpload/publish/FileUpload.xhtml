<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!--
          ******* WARNING *********************************************************
          This document was automatically generated using the Re-Spec specification
          publishing system. Edits made here will be lost when it is regenerated
          and chances are high that the editor will do something quite unpleasant
          to you should that happen.
          ******* WARNING *********************************************************
        -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>File Upload</title>
<link rel="stylesheet" href="respec-w3c.css" type="text/css" />
<link rel="stylesheet" href="http://www.w3.org/StyleSheets/TR/W3C-WD" type="text/css" />
<meta name="revision" content="$Id: FileUpload.xhtml,v 1.8 2008-10-10 09:24:58 arangana Exp $" />
</head>
<body><div class="head">
		<p><a href="http://www.w3.org/"><img src="http://www.w3.org/Icons/w3c_home" width="72" height="48" alt="W3C" /></a></p>
		<h1 class="head">File Upload</h1><h2 id="pagesubtitle">W3C Working Draft <em>10 October 2008</em></h2>
		 <dl><dt>This version:</dt><dd><a href="http://dev.w3.org/2006/webapi/FileUpload/publish/FileUpload.xhtml">dev.w3.org/2006/webapi/FileUpload/publish/FileUpload.xhtml</a></dd>
			 <dt>Latest public version:</dt><dd><a href="http://www.w3.org/TR/file-upload/">http://www.w3.org/TR/file-upload/</a></dd>
			 <dt>Previous version:</dt><dd><a href=""></a></dd>
			 <dt>Editor:</dt><dd><span class="person"><a href="http://arunranga.com/">Arun Ranganathan</a> (<a href="http://blog.mozilla.com/standards">Mozilla</a>) &lt;<a href="mailto:arun@mozilla~HugASpammer.com">arunATmozillaDOTcom</a>&gt;</span></dd>
			 <dt>Original Editor:</dt><dd><span class="person"><a href="http://berjon.com/">Robin Berjon</a> (<a href="http://expway.com/">Expway</a>) &lt;<a href="mailto:robin.berjon@expway.fr">robin.berjon@expway.fr</a>&gt;</span></dd></dl>
		<p class="copyright"><a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> ©2006
        <a href="http://www.w3.org/"><acronym title="World Wide Web Consortium">W3C</acronym></a><sup>®</sup>
        (<a href="http://www.csail.mit.edu/"><acronym title="Massachusetts Institute of Technology">MIT</acronym></a>,
        <a href="http://www.ercim.org/"><acronym title="European Research Consortium for Informatics and Mathematics">ERCIM</acronym></a>,
        <a href="http://www.keio.ac.jp/">Keio</a>), All Rights Reserved. W3C
        <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>,
        <a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a> and 
        <a href="http://www.w3.org/Consortium/Legal/copyright-documents">document  use</a> rules apply.
       </p></div><hr />

  

  <h2 id="specabstract">Abstract</h2><div class="section">
    
    <p>
      This specification provides an <acronym title="Application Programming Interface">API</acronym>
      used to prompt the user with a file selection dialogue and obtain the data contained in files
      on the user's file system.  This includes:
		<ul>
			<li>The ability to programmatically obtain a reference to user-selected files using the standard HTML form input mechanism, namely <code>&lt;input type="file"></code></li>
			<li>The ability to spawn a file dialog similar to what is spawned by the <code>&lt;input type="file"> element programmatically.</code> </li>
			<li>The ability to obtain select byte ranges within a file, or to obtain the entire file, and upload it to a server.</li>
		</ul>
		The section on Requirments and Use Cases [<a href="#requirements">REQ</a>] covers the motivation behind this specification.
    </p>
	
	<p class="issue">There are several known issues in this specification, and it should be regarded as incomplete. The
  usage of RFC2119 terminology needs to be tighter, processing requirements are
  not properly defined everywhere, exceptions are poorly handled at the moment,
  some terms are used but not defined, and so forth.  Furthermore, discussion about whether file manipulation methods should behave synchronously or asynchrously still is taking place.</p>
  </div>

  <div class="section"><h2 id="sotd">Status of this Document</h2>
    
  <p>
    <em>This section describes the status of this document at the time of its publication.
    Other documents may supersede this document. A list of current <acronym title="World Wide Web Consortium">W3C</acronym> publications and the
    latest revision of this technical report can be found in the 
    <a href="http://www.w3.org/TR/"><acronym title="World Wide Web Consortium">W3C</acronym>
    technical reports index</a> at http://www.w3.org/TR/.</em>
  </p>

    
    <p>
      This document is a First Public Working Draft. It is <strong>not an official
      publication</strong> of the <acronym title="World Wide Web Consortium">W3C</acronym>. The authors of this document are
      the members of the <acronym title="World Wide Web Consortium">W3C</acronym> <a href="http://www.w3.org/2008/webapps">Web Applications</a> Working Group.
    </p>
    <p>
      This document is produced by the <a href="http://www.w3.org/2008/webapps">Web <acronym title="Application Programming Interface">Applications</acronym>
      <acronym title="Working Group">WG</acronym></a> in
      the <acronym title="World Wide Web Consortium">W3C</acronym> <a href="http://www.w3.org/Interaction/">Interaction Domain</a>.
    </p>
    <p>
      Web content and browser developers are encouraged to review this
      draft. Please send comments to <a href="mailto:public-webapi@w3.org">public-webapi@w3.org</a>,
      the <acronym title="World Wide Web Consortium">W3C</acronym>'s public email list for issues related to Web <acronym title="Application Programming Interface">API</acronym>.
      <a href="http://lists.w3.org/Archives/Public/public-webapi/">Archives</a> of the
      list are available.
    </p>
    <p>
      This document was produced by a group operating under the 
      <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 <acronym title="World Wide Web Consortium">W3C</acronym> Patent Policy</a>. 
      <acronym title="World Wide Web Consortium">W3C</acronym> maintains a <a rel="disclosure" href="http://www.w3.org/2004/01/pp-impl/38482/status">public list of any 
      patent disclosures</a> made in connection with the deliverables of the group; that page also 
      includes instructions for disclosing a patent. An individual who has actual knowledge of a 
      patent which the individual believes contains 
      <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a> 
      must disclose the information in accordance with 
      <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6 of the <acronym title="World Wide Web Consortium">W3C</acronym> Patent Policy</a>. 
    </p>
    
  <p>
    Publication as a Working Draft does not imply endorsement by the <acronym title="World Wide Web Consortium">W3C</acronym> Membership.
    This is a draft document and may be updated, replaced or obsoleted by other 
    documents at any time. It is inappropriate to cite this document as other than
    work in progress.
  </p>

  </div>

  <div class="section"><h2 id="contents">Table of Contents</h2>
    

    <ul class="toc"><li><a href="#introduction">1. Introduction</a></li>
					<li><a href="#idl-if-FileException">2. The FileException exception</a></li>
					<li><a href="#dialog-if">3. The FileDialog interface</a></li>
					<li><a href="#FileList-if">4. The FileList interface</a></li>
					<li><a href="#File-if">5. The File interface</a></li>
					<li><a href="#Blob-if">5.1. The Blob Interface</a></li>
					<li><a href="#event-files-selected">6. The '<code class="event-name">files-selected</code>' Event</a></li>
		            <li><ul class="toc"><li><a href="#FilesSelectionEvent-if">6.1. The FilesSelectionEvent interface</a></li></ul></li>
					<li><a href="#xhr">7.1. Integration with XMLHttpRequest</a></li>
					<li><a href="#HTMLFileInputElement">7.2. Extension of HTMLInputElement</a></li>
					<li><a href="#conform">8. Conformance</a></li>
					<li><a href="#requirements">9. Requirements and Use Cases</a></li>
					<li><a href="#ack">10. Acknowledgements</a></li>
	</ul>
	  <ul class="toc"><li><a href="#bibref">A. References</a></li></ul>
  </div>

  <div class="section"><h2 id="introduction">1. Introduction</h2>
    
    <p>
      It is desirable for Web applications to have the ability to manipulate as wide
      as possible a range of user input, including files that a user may wish to upload 
      to a remote server or manipulate inside a rich application. This specification 
      provides application writers with the means to trigger a file selection prompt 
      with which the user can select one or more files, as well as obtain the file selected via the HTML form control. 
      This <acronym title="Application Programming Interface">API</acronym> can be used for more than simply inserting a file into the content of a 
      form being submitted but also allows client-side manipulation of the content, for 
      instance to display an image or parse an <acronym title="eXtensible Markup Language">XML</acronym>
      document from disk.
    </p>
    <p>
      <strong>Important Note:</strong> this is a very rough first public working draft.
      Its purpose is in exposing a first pass on the design of this <acronym title="Application Programming Interface">API</acronym>, in order to
      gather feedback from the community.
    </p>
  </div>

  <div class="section"><h2 id="idl-if-FileException">2. The FileException exception</h2>
    

    <div class="ednote">This needs to be described, check existing stuff</div>

    <div class="boxed"><p><span class="idlTitle">The FileException exception</span></p><pre class="schema" title="The FileException exception">exception <a href="#idl-if-FileException">FileException</a> {
  unsigned short   code;
};
// FileExceptionCode
const unsigned short      <a href="#idl-defs-FileExceptionCode-NOT_FOUND_ERR">NOT_FOUND_ERR</a>         = 0;
const unsigned short      <a href="#idl-defs-FileExceptionCode-NOT_READABLE_ERR">NOT_READABLE_ERR</a>      = 1;
const unsigned short      <a href="#idl-defs-FileExceptionCode-TIMEOUT_ERR">TIMEOUT_ERR</a>                 = 2;
</pre></div><div class="section"><h4 class="idl-header" id="idl-defs-FileExceptionCode">Definition Group <em>FileExceptionCode</em></h4><dl class="idl-defs"><dt id="idl-defs-FileExceptionCode-NOT_FOUND_ERR"><code>NOT_FOUND_ERR</code></dt><dd>
            The file that is trying to be read does not exist. This may be due
            to it having been moved or deleted after a pointer to it was
            acquired.
          </dd><dt id="idl-defs-FileExceptionCode-NOT_READABLE_ERR"><code>NOT_READABLE_ERR</code></dt><dd>
            The file cannot be read. This may be due to permission problems.
          </dd>
			<dt id="idl-defs-FileExceptionCode-TIMEOUT_ERR"><code>TIMEOUT_ERR</code></dt><dd>
			 Attempt to access this file has timed out.  This may be due to a "loop spam" attack (in which the File Dialog is made to persist till a file is chosen) that the implementation has detected and aborted.  
			</dd>  
		  </dl></div>
  </div>

  <div class="section"><h2 id="dialog-if">3. The FileDialog interface</h2>
    
    <p>
      The purpose of the <a href="#idl-if-FileDialog" class="if-name">FileDialog</a> interface is to control the 
      display of a file dialogue, and to register the event listeners that 
      will handle the selection of files. The <a href="#idl-if-FileDialog" class="if-name">FileDialog</a> object 
      inherits from <span class="if-name">EventTarget</span> and it is this possible to attach event 
      listeners to it using the <span class="meth-name">addEventListener</span> method.
    </p>
    <p>
      It is possible that some platforms will only allow for one file to be 
      selected at a time, however when possible a user-agent <em class="rfc2119" title="Keyword in RFC 2119 context">SHOULD</em> provide 
      the option to select multiple files in one pass.
    </p>

    <div class="boxed"><p><span class="idlTitle">The FileDialog interface</span></p><pre class="schema" title="The FileDialog interface">interface <a href="#idl-if-FileDialog">FileDialog</a> : events::EventTarget {
  void <a href="#dfn-open">open</a>();
};</pre></div><div class="section" id="idl-if-FileDialog"><div class="section"><h4 class="idl-header" id="idl-attrs-FileDialog">Methods</h4><dl class="idl-meth"><dt id="dfn-open"><code>open</code></dt><dd><p>
             When called, this method <em class="rfc2119" title="Keyword in RFC 2119 context">MUST</em> prompt the user with a means to select one 
	         or more files. The exact manner in which the user is prompted is implementation
              dependent. On devices that have no file system, the user-agent <em class="rfc2119" title="Keyword in RFC 2119 context">MAY</em> still open a
              dialogue for data acquisition, for instance one providing access to a built-in
              camera and a microphone.
            </p><p>
              This method operates in an asynchronous manner such that the files which are 
              selected will be communicated to handlers registered on the <a href="#idl-if-FileDialog" class="if-name">FileDialog</a>
              object instance to listen to the 
        '<a href="#event-files-selected" class="event-name">files-selected</a>'
       event. An example
              follows in which when file selection is performed, the listener object will 
              be called with a <a href="#idl-if-FilesSelectionEvent" class="if-name">FilesSelectionEvent</a> object.
            </p><div class="boxed"><div><span class="exampleTitle">Example: Basic FileDialog usage</span></div><pre class="example" title="Basic FileDialog usage">var fd = new FileDialog();
fd.addEventListenerNS("http://www.w3.org/ns/fs-event#", "files-selected", listener, false);
fd.open();</pre></div><dl><dt>No Parameters</dt><dt>No Return Value</dt><dt>No Exceptions</dt></dl></dd></dl></div></div>
  </div>

  <div class="section"><h2 id="FileList-if">4. The FileList interface</h2>
    
    <p>
      This interface exposes the list of files that has been selected through the file
      dialogue. When no file has been selected, its length is zero.
    </p>

    <div class="boxed"><p><span class="idlTitle">The FileList interface</span></p><pre class="schema" title="The FileList interface">interface <a href="#idl-if-FileList">FileList</a> {
  readonly attribute unsigned long  <a href="#dfn-length">length</a>;
  <a href="#idl-if-File">File</a>               <a href="#dfn-item">item</a>(in unsigned long index);
  <a href="#idl-if-File">File</a>               <a href="#dfn-removeitem">removeItem</a>(in unsigned long index);
};</pre></div><div class="section" id="idl-if-FileList"><div class="section"><h4 class="idl-header" id="idl-meths-FileList">Attributes</h4><dl class="idl-attr"><dt id="dfn-length"><code>length</code>
      of type
      unsigned long, readonly</dt><dd><p>
              The number of files in the list. The range of valid file indices is 0 to 
              <code>length</code>-1 inclusive.
            </p></dd></dl></div><div class="section"><h4 class="idl-header" id="idl-attrs-FileList">Methods</h4><dl class="idl-meth"><dt id="dfn-item"><code>item</code></dt><dd><p>
              Returns the <code>index</code>th item in the collection. If 
              <code>index</code> is greater than or equal to the number of files in the
              list, this returns <code>null</code>.
            </p><dl><dt>Parameters</dt><dd class="idl-params"><dl><dt><code>index</code>
          of type
          unsigned long</dt><dd>
              Index into the collection.
            </dd></dl></dd><dt>Return Value</dt><dd><table><tr><td><code></code></td><td>
              The file at the <code>index</code>th position in the <a href="#idl-if-FileList" class="if-name">FileList</a>, or <code>null</code>
              if that is not a valid <code>index</code>.
            </td></tr></table></dd><dt>No Exceptions</dt></dl></dd><dt id="dfn-removeitem"><code>removeItem</code></dt><dd><p>
              Removes the <code>index</code>th item in the collection. If 
              <code>index</code> is greater than or equal to the number of files in the
              list, this does nothing. This can be used to filter out files that do not
              match certain criteria (media type, file extension, etc.).
            </p><dl><dt>Parameters</dt><dd class="idl-params"><dl><dt><code>index</code>
          of type
          unsigned long</dt><dd>
              Index into the collection.
            </dd></dl></dd><dt>Return Value</dt><dd><table><tr><td><code></code></td><td>
              The file that was removed from the <a href="#idl-if-FileList" class="if-name">FileList</a>, or <code>null</code>
              if that is not a valid <code>index</code>.
            </td></tr></table></dd><dt>No Exceptions</dt></dl></dd></dl></div></div>
  </div>

  <div class="section"><h2 id="File-if">5. The File interface</h2>
    
    <p>
      This interface describes a single file in a <a href="#idl-if-FileList" class="if-name">FileList</a>, exposes 
      its name and media type, and provides access its content.
    </p>
    <p>
      Please note that in order to be memory-efficient, implementations are not
      required to load the content of files into memory as soon as they have been 
      selected, but only when their content is required by the application. When passing a
      <a href="#idl-if-File" class="if-name">File</a> object to network <acronym title="Application Programming Interface">API</acronym> such as <span class="if-name">XMLHttpRequest</span> an 
      implementation may stream the content of a file to a socket and never need 
      to hold more than a few of its bytes in memory. Therefore one needs to be
      aware that the content of the file may change or cease to be available between
      the moment the file is selected and the moment it is accessed.
    </p>

    <div class="boxed"><p><span class="idlTitle">The File interface</span></p>
	<pre class="schema" title="The File interface">interface <a href="#idl-if-File">File</a> {

  readonly attribute DOMString           <a href="#dfn-filename">fileName</a>;
  readonly attribute DOMString           <a href="#dfn-mediatype">mediaType</a>;
  readonly attribute unsigned long long  <a href="#dfn-filesize">fileSize</a>;
  readonly attribute Blob                <a href="#dfn-contents">contents</a>;

  DOMString          <a href="#dfn-getdataasstring">getAsText</a>(in DOMString <a href="#dfn-encoding">encoding</a>)
                                        raises(FileException);
  DOMString          <a href="#dfn-getdataasbase64">getAsBase64</a>()
                                        raises(FileException);
  DOMString          <a href="#dfn-getdataasbinary">getAsBinary</a>()
                                        raises(FileException);
  DOMString          <a href="#dfn-getasdataurl">getAsDataURL</a>()

};</pre>

</div><div class="section" id="idl-if-File"><div class="section"><h4 class="idl-header" id="idl-meths-File">Attributes</h4>
<dl class="idl-attr"><dt id="dfn-filename"><code>fileName</code>
      of type
      DOMString, readonly</dt><dd><p>
              The name of the file, exclusive of its path.
            </p></dd><dt id="dfn-filesize"><code>fileSize</code>
      of type
      unsigned long long, readonly</dt><dd><p>
              The size of the file, in bytes. Users should keep in mind that in certain
              cases this information may not be available, and that it also may
              vary as a file is being read.
            </p></dd><dt id="dfn-mediatype"><code>mediaType</code>
      of type
      DOMString, readonly</dt><dd><p>
              The media type of the file, if known to the user-agent.
            </p></dd><dt id="dfn-contents"><code>contents</code>
	  of type
	  Blob, readonly</dt><dd><p>
	          The "Blob" (see [<a href="#Blob-if">Blob</a>]) contents of the file, which can then be sliced into further Blobs or have asynchronous file i/o operations conducted on the Blob.
			  </p></dd>
			</dl></div>
			
			<div class="section"><h4 class="idl-header" id="idl-attrs-File">Methods</h4><dl class="idl-meth"><dt id="dfn-getdataasbase64"><code>getAsBase64</code></dt><dd><p>
              Returns the file's content encoded using Base64. An empty file returns an empty string.
            </p><div class="ednote">Need ref</div><dl><dt>No Parameters</dt><dt>Return Value</dt><dd><table><tr><td><code></code></td><td>
              The content of the file encoded in Base64.
            </td></tr></table></dd><dt>Exceptions</dt><dd><table><tr><td><a href="#idl-if-FileException">FileException</a></td><td>
              <p>
                All codes apply.
              </p>
            </td></tr></table></dd></dl></dd><dt id="dfn-getdataasbinary"><code>getAsBinary</code></dt><dd><p>
              Returns the file's content encoded using hex-binary. An empty file returns an empty string.
            </p><div class="ednote">Need ref</div><dl><dt>No Parameters</dt><dt>Return Value</dt><dd><table><tr><td><code></code></td><td>
              The content of the file encoded in hex-binary.
            </td></tr></table></dd><dt>Exceptions</dt><dd><table><tr><td><a href="#idl-if-FileException">FileException</a></td><td>
              <p>
                All codes apply.
              </p>
            </td></tr></table></dd></dl></dd><dt id="dfn-getdataastext"><code>getAsText</code></dt><dd><p>
              Returns the file's content as a string. An empty file returns an empty string.  The method is invoked with an encoding; if none is provided, UTF-8 is assumed.
            </p><div class="ednote">
              <p>
                This has any number of issues with encoding, binary data, etc.  To Do: define encoding types.
              </p>
            </div><dl><dt>Parameters: encoding type.  If none is provided, UTF-8 is presumed.</dt><dt>Return Value</dt><dd><table><tr><td><code></code></td><td>
              The content of the file.
            </td></tr></table></dd><dt>Exceptions</dt><dd><table><tr><td><a href="#idl-if-FileException">FileException</a></td><td>
              <p>
                All codes apply.
              </p>
            </td></tr></table></dd></dl></dd><dt id="dfn-getasdataurl"><code>getAsDataURL</code></dt><dd><p>
			   Returns the file's content as a data: URL.
			   </p></dd><dt>Exceptions</dt><dd><table><tr><td><a href="#idl-if-FileException">FileException</a></td><td>
              <p>
                All codes apply.
              </p>
            </td></tr></table></dd>
			
			</dl></div></div>
  </div>
  
  <div class="section"><h2 id="Blob-if">5.1 The Blob Interface</h2>
  
  <p>This interface allows splicing the content of a single <a href="#File-if">file</a> between byte ranges, as well as asynchronous file i/o operations.
  Spliced blobs result in other blobs, and thus using this interface a file can be split into separate data chunks, possibly for POST'ing via <code>XMLHttpRequest.</code></p>

 <div class="boxed"><p><span class="idlTitle">The Blob interface</span></p>
	<pre class="schema" title="The Blob Interface">interface Blob {

	readonly attribute unsigned long long <a href="#dfn-length">length</a>;
	
	Blob slice(in unsigned long long <a href="#dfn-start">start</a>, in unsigned long long <a href="#dfn-length">length</a>);
	
	// TO DO include Google asynchronous methods here pending discussion
	// Talk to Cameron McCormack about callbacks in WebIDL spec.
	
  }; </pre>
  </div>
  
  <div class="ednote"><p>Need to flesh the definitions section out for Blob</p></div>
    </div>

  <div class="section"><h2 id="event-files-selected">6. The 
        '<code class="event-name">files-selected</code>'
       Event</h2>
    
    <div class="ednote">
      <p>
        Make full description of event as well as the interface.
      </p>
    </div>

    <div class="section"><h3 id="FilesSelectionEvent-if">6.1. The FilesSelectionEvent interface</h3>
      
      <p>
        ...
      </p>

      <div class="boxed"><p><span class="idlTitle">The FilesSelectionEvent interface</span></p><pre class="schema" title="The FilesSelectionEvent interface">interface <a href="#idl-if-FilesSelectionEvent">FilesSelectionEvent</a> : events::Event {
  readonly attribute <a href="#idl-if-FileList">FileList</a>  <a href="#dfn-filelist">fileList</a>;
};</pre></div><div class="section" id="idl-if-FilesSelectionEvent"><div class="section"><h4 class="idl-header" id="idl-meths-FilesSelectionEvent">Attributes</h4><dl class="idl-attr"><dt id="dfn-filelist"><code>fileList</code>
      of type
      <a href="#idl-if-FileList">FileList</a>, readonly</dt><dd><p>
                The list of files that were selected. If the dialogue was cancelled
                or no file was selected, the list <em class="rfc2119" title="Keyword in RFC 2119 context">MUST</em> be empty.
              </p></dd></dl></div></div>
    </div>
  </div>

  <div class="section"><h2 id="xhr">7.1 Integration with XMLHttpRequest</h2>
    
    <div class="ednote">
      <p>ToDO: determine use of BLOB API here *and* Local Store.  We'll likely overload the existing send() method.<br/>  
	  From Robin: The intent here is to add a method to XHR that would allow passing a File object straight for upload, 
	  without needing to transfer it through memory first.</p>  
    </div>
  </div>
  
  <div class="section"><h2 id="HTMLFileInputElement">7.2 Extension to HTMLInputElement</h2>
  <p>
  DOM Level 2 for HTML defines interfaces for standard HTML elements, including the <code>&lt;input></code> element (<code>HTMLInputElement</code>).  
  In particular, when the <code>type</code> of an <code>HTMLInputElement</code>is "file" accessing this element via <code>getElementByID</code> and 
  then invoking <code>file</code> should return a FileList object.  In this section, we specify this behavior. 
  </p>
  <div class="ednote">
  <p class="issue">May specify an HTMLFileInputElement.  Note WHATWG's stipulation of <code>type</code> being in the <a href="http://www.whatwg.org/specs/web-apps/current-work/#file-upload-state">File Upload</a> state.</p>
  </div>
  </div>

  <div class="section"><h2 id="conform">8. Conformance</h2>
    
    <p>
      The key words "<em class="rfc2119" title="Keyword in RFC 2119 context">MUST</em>", "<em class="rfc2119" title="Keyword in RFC 2119 context">MUST NOT</em>", "<em class="rfc2119" title="Keyword in RFC 2119 context">REQUIRED</em>", "<em class="rfc2119" title="Keyword in RFC 2119 context">SHALL</em>", "<em class="rfc2119" title="Keyword in RFC 2119 context">SHALL NOT</em>", "<em class="rfc2119" title="Keyword in RFC 2119 context">SHOULD</em>", "<em class="rfc2119" title="Keyword in RFC 2119 context">SHOULD NOT</em>",
      "<em class="rfc2119" title="Keyword in RFC 2119 context">RECOMMENDED</em>", "<em class="rfc2119" title="Keyword in RFC 2119 context">MAY</em>", and "<em class="rfc2119" title="Keyword in RFC 2119 context">OPTIONAL</em>" in this document are to be interpreted as described in
      RFC 2119 [<cite><a href="#RFC2119" class="bibref">RFC2119</a></cite>].
    </p>
    <p>
      Unless otherwise specified immediately following the header, all sections in this
      document — to the exclusion of examples which are all informative — are normative.
    </p>
  </div>
  
  <div class="section"><h2 id="requirements">9. Requirements and Use Cases</h2>
	<p>This section covers what the requirements are for this API, as well as illustrates some use cases.  </p>  
	  <ul>
		  <li><p>Once a user has given permission, user agents should provide the ability to read and parse data directly from a local file programmatically.</p>
			  <ul>
				  <li> Example: A lyrics viewer. User wants to read song lyrics from songs in his plist file.  User browses for plist file.  File is opened, 
					  read, parsed, and presented to the user as a sortable, actionable list within a web application.  User can select songs to fetch lyrics.  User uses the 
					  "browse for file" dialog.</li>		
			   </ul>		  		  
		  </li>
		  <li><p>Data should be able to be stored locally so that it is available for later use, which is useful for offline data access for web applications.</p>
		    <ul><li>Example: A Calendar App.  User's company has a calendar. User wants to sync local events to company calendar, marked
  as "busy" slots (without leaking personal info).  User browses for file and selects it. The text/calendar file is parsed
  in the browser, allowing the user to merge the files to one calendar view.
  The user wants to then save the file back to his local calendar file. (using "Save As" ?).  The user can also send the integrated calendar file back to the server
			calendar store asynchronously.</li></ul>
		  
		  </li>
		  <li><p>User agents should provide the ability to save a local file programmatically given an amount of data and a file name.</p>
		  <ul>
			<li>Example: A Spreadsheet App.  User interacts with a form, and generates some input.  The form then generates a CSV (Comma Separated Variables) output
			for the user to import into a spreadsheet, and uses "Save...".  The generated output can also be directly integrated into a web-based spreadsheet, and
			uploaded asynchronously.</li>  
		  </ul>
		  </li>
		  <li><p>User agents should provide a streamlined programmatic ability to send data from a file to a remote server that works more efficiently than form-based uploads today</p>
			<ul>
				<li>Example: A Video/Photo Upload App. User is able to select large files for upload, which can then be "chunk-transfered" to the server.</li>
			</ul>  
		  </li>
		  <li><p>User agents should provide an API exposed to script that exposes the features above.  The user is notified by UI anytime interaction with the file
			  system takes place, giving the user full ability to cancel or abort the transaction.  The user is notified of any file selections, and can cancel these.
			  No invocations to these APIs occur silently without user intervention. </p></li>
		  
	  </ul>
  </div>
  <div class="section"><h2 id="ack">10. Acknowledgements</h2>
    
    <p>
      This specification was originally developed by the SVG Working Group. Many thanks
      to Mark Baker and Anne van Kesteren for their feedback.
    </p>
  </div>

  <div class="section"><h2 id="bibref">A. References</h2>
  <div class="ednote"><p>Add references to Opera's specification, Google's, Apple's for XHR extension, Mozilla link to mxr for nsIDOMFile, nsIDOMNSHTMLInputElement</p></div>

    <dl class="bibliography"><dt id="RFC2119">RFC2119</dt><dd><cite><a href="http://www.ietf.org/rfc/rfc2119.txt">Key words for use in RFCs to Indicate Requirement Levels</a></cite>,
    <span class="person">S. Bradner</span>.</dd></dl>
  </div>
</body>
</html>
