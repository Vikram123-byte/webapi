<specification 
              xmlns='http://berjon.com/ns/re-spec/' 
              xmlns:rs='http://berjon.com/ns/re-spec/' 
              version='1.0' 
              xml:lang='en'>

  <metadata>
    <title>File Upload</title>
    <styling type='W3C' status='WD'/>
    <date year='2006' month='09' day='28'/>
    <editors>
      <person>
        <name>Robin Berjon</name>
        <email>robin.berjon@expway.fr</email>
        <url>http://berjon.com/</url>
        <company>Expway</company>
        <company-url>http://expway.com/</company-url>
      </person>
    </editors>
    <versions>
      <current>http://www.w3.org/TR/2006/WD-file-upload-20060928/</current>
      <latest>http://www.w3.org/TR/file-upload/</latest>
      <previous/>
    </versions>
  </metadata>

  <section xml:id='abstract' type='w3c-abstract'>
    <title>Abstract</title>
    <p>
      This specification provides an <acronym title='Application Programming Interface'>API</acronym>
      used to prompt the user with a file selection dialogue and obtain the data contained in files
      on the user's file system.
    </p>
    <!--
    <ednote>
      <p>
        Last update: $Id: FileUpload.xml,v 1.8 2006-09-22 12:32:03 rberjon Exp $.
      </p>
    </ednote>
    -->
  </section>

  <section xml:id='sotd' type='w3c-sotd'>
    <title>Status of this Document</title>

    <include href='respec:sotd-head.tpl'/>
    <!--
    <p>
      This document is an Editor's Draft and is not suitable for purposes other
      than reviewing the specification being developed.
    </p>
    -->
    <p>
      This document is a First Public Working Draft. It is <strong>not an official
      publication</strong> of the W3C. The <a href='#authors'>authors of this document</a> are
      the members of the W3C <a href='http://www.w3.org/2006/webapi'>Web API
      Working Group</a>.
    </p>
    <p>
      This document is produced by the <a href='http://www.w3.org/2006/webapi'>Web API
      <acronym title='Working Group'>WG</acronym></a>, part of the
      <a href='http://www.w3.org/2006/rwc/Activity'>Rich Web Clients Activity</a> in
      the W3C <a href='http://www.w3.org/Interaction/'>Interaction Domain</a>.
    </p>
    <p>
      Web content and browser developers are encouraged to review this
      draft. Please send comments to <a href='mailto:public-webapi@w3.org'>public-webapi@w3.org</a>,
      the W3C's public email list for issues related to Web APIs.
      <a href='http://lists.w3.org/Archives/Public/public-webapi/'>Archives</a> of the
      list are available.
    </p>
    <p>
      This document was produced by a group operating under the 
      <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 W3C Patent Policy</a>. 
      W3C maintains a <a rel="disclosure" href="http://www.w3.org/2004/01/pp-impl/38482/status">public list of any 
      patent disclosures</a> made in connection with the deliverables of the group; that page also 
      includes instructions for disclosing a patent. An individual who has actual knowledge of a 
      patent which the individual believes contains 
      <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a> 
      must disclose the information in accordance with 
      <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6 of the W3C Patent Policy</a>. 
    </p>
    <include href='respec:sotd-endorse.tpl'/>
  </section>

  <section xml:id='contents' type='toc'>
    <title>Table of Contents</title>

    <?respec-toc?>
  </section>

  <section xml:id='introduction'>
    <title>Introduction</title>
    <p>
      It is desirable for Web applications to have the ability to manipulate as wide
      as possible a range of user input, including files that a user may wish to upload 
      to a remote server or manipulate inside a rich application. This specification 
      provides application writers with the means to trigger a file selection prompt 
      with which the user can select one or more files. Unlike the file upload forms 
      control available to <acronym title='HyperText Markup Language'>HTML</acronym>, 
      this API can be used for more than simply inserting a file into the content of a 
      form being submitted but also allows client-side manipulation of the content, for 
      instance to display an image or parse an <acronym title='eXtensible Markup Language'>XML</acronym>
      document from disk.
    </p>
    <p>
      <strong>Important Note:</strong> this is a very rough first public working draft.
      Its purpose is in exposing a first pass on the design of this API, in order to
      gather feedback from the community.
    </p>
  </section>

  <section xml:id='file-ex'>
    <title>The FileException exception</title>

    <ednote>This needs to be described, check existing stuff</ednote>

    <schema>
      <title>The FileException exception</title>
      <idl>
        <exception name='FileException'/>
        <definition-group for='FileExceptionCode'>
          <constant name='NOT_FOUND_ERR'>
            The file that is trying to be read does not exist. This may be due
            to it having been moved or deleted after a pointer to it was
            acquired.
          </constant>
          <constant name='NOT_READABLE_ERR'>
            The file cannot be read. This may be due to permission problems.
          </constant>
        </definition-group>
      </idl>
    </schema>
  </section>

  <section xml:id='dialog-if'>
    <title>The FileDialog interface</title>
    <p>
      The purpose of the <if>FileDialog</if> interface is to control the 
      display of a file dialogue, and to register the event listeners that 
      will handle the selection of files. The <if>FileDialog</if> object 
      inherits from <if>EventTarget</if> and it is this possible to attach event 
      listeners to it using the <meth>addEventListener</meth> method.
    </p>
    <p>
      It is possible that some platforms will only allow for one file to be 
      selected at a time, however when possible a user-agent SHOULD provide 
      the option to select multiple files in one pass.
    </p>

    <schema>
      <title>The FileDialog interface</title>
      <idl>
        <interface module='webapi' name='FileDialog' extends='events::EventTarget'>
          <method name='open'>
            <p>
              When called, this method MUST prompt the user with a means to select one 
              or more files. The exact manner in which the user is prompted is implementation
              dependent. On devices that have no file system, the user-agent MAY still open a
              dialogue for data acquisition, for instance one providing access to a built-in
              camera and a microphone.
            </p>
            <p>
              This method operates in an asynchronous manner such that the files which are 
              selected will be communicated to handlers registered on the <if>FileDialog</if>
              object instance to listen to the <ev>files-selected</ev> event. An example
              follows in which when file selection is performed, the listener object will 
              be called with a <if>FilesSelectionEvent</if> object.
            </p>
            <example>
              <title>Basic FileDialog usage</title>
              var fd = new FileDialog();
              fd.addEventListenerNS("http://www.w3.org/ns/fs-event#", "files-selected", listener, false);
              fd.open();
            </example>
          </method>
        </interface>
      </idl>
    </schema>
  </section>

  <section xml:id='FileList-if'>
    <title>The FileList interface</title>
    <p>
      This interface exposes the list of files that has been selected through the file
      dialogue. When no file has been selected, its length is zero.
    </p>

    <schema>
      <title>The FileList interface</title>
      <idl>
        <interface module='webapi' name='FileList'>
          <attribute type='unsigned long' name='length' ro='true'>
            <p>
              The number of files in the list. The range of valid file indices is 0 to 
              <code>length</code>-1 inclusive.
            </p>
          </attribute>
          
          <method name='item'>
            <p>
              Returns the <code>index</code>th item in the collection. If 
              <code>index</code> is greater than or equal to the number of files in the
              list, this returns <code>null</code>.
            </p>
            <param name='index' type='unsigned long'>
              Index into the collection.
            </param>
            <returns type='File'>
              The file at the <code>index</code>th position in the <if>FileList</if>, or <code>null</code>
              if that is not a valid <code>index</code>.
            </returns>
          </method>
          <method name='removeItem'>
            <p>
              Removes the <code>index</code>th item in the collection. If 
              <code>index</code> is greater than or equal to the number of files in the
              list, this does nothing. This can be used to filter out files that do not
              match certain criteria (media type, file extension, etc.).
            </p>
            <param name='index' type='unsigned long'>
              Index into the collection.
            </param>
            <returns type='File'>
              The file that was removed from the <if>FileList</if>, or <code>null</code>
              if that is not a valid <code>index</code>.
            </returns>
          </method>
        </interface>
      </idl>
    </schema>
  </section>

  <section xml:id='File-if'>
    <title>The File interface</title>
    <p>
      This interface describes a single file in a <if>FileList</if>, exposes 
      its name and media type, and provides access its content.
    </p>
    <p>
      Please note that in order to be memory-efficient, implementations are not
      required to load the content of files into memory as soon as they have been 
      selected, but only when their content is required by the application. When passing a
      <if>File</if> object to network APIs such as <if>XMLHttpRequest</if> an 
      implementation may stream the content of a file to a socket and never need 
      to hold more than a few of its bytes in memory. Therefore one needs to be
      aware that the content of the file may change or cease to be available between
      the moment the file is selected and the moment it is accessed.
    </p>

    <schema>
      <title>The File interface</title>
      <idl>
        <interface module='webapi' name='File'>
          <attribute type='DOMString' name='fileName' ro='true'>
            <p>
              The name of the file, exclusive of its path.
            </p>
          </attribute>
          <attribute type='DOMString' name='mediaType' ro='true'>
            <p>
              The media type of the file, if known to the user-agent.
            </p>
            <ednote>
              How does this handle null and ""? May parameters be included?
            </ednote>
          </attribute>
          <attribute type='unsigned long' name='fileSize' ro='true'>
            <p>
              The size of the file, in bytes. Users should keep in mind that in certain
              cases this information may not be available, and that it also may
              vary as a file is being read.
            </p>
          </attribute>

          <method name='getDataAsString'>
            <p>
              Returns the file's content as a string. An empty file returns an empty string.
            </p>
            <ednote>
              <p>
                This has any number of issues with encoding, binary data, etc.
              </p>
            </ednote>
            <returns type='DOMString'>
              The content of the file.
            </returns>
            <exception name='FileException'>
              <p>
                All codes apply.
              </p>
            </exception>
          </method>

          <method name='getDataAsBase64'>
            <p>
              Returns the file's content encoded using Base64. An empty file returns an empty string.
            </p>
            <ednote>Need ref</ednote>
            <returns type='DOMString'>
              The content of the file encoded in Base64.
            </returns>
            <exception name='FileException'>
              <p>
                All codes apply.
              </p>
            </exception>
          </method>

          <method name='getDataAsHexBinary'>
            <p>
              Returns the file's content encoded using hex-binary. An empty file returns an empty string.
            </p>
            <ednote>Need ref</ednote>
            <returns type='DOMString'>
              The content of the file encoded in hex-binary.
            </returns>
            <exception name='FileException'>
              <p>
                All codes apply.
              </p>
            </exception>
          </method>
        </interface>
      </idl>
    </schema>
  </section>

  <section xml:id='files-selected-event'>
    <title>The <ev>files-selected</ev> Event</title>
    <ednote>
      <p>
        Make full description of event as well as the interface.
      </p>
    </ednote>

    <section xml:id='FilesSelectionEvent-if'>
      <title>The FilesSelectionEvent interface</title>
      <p>
        ...
      </p>

      <schema>
        <title>The FilesSelectionEvent interface</title>
        <idl>
          <interface module='webapi' name='FilesSelectionEvent' extends='events::Event'>
            <attribute type='FileList' name='fileList' ro='true'>
              <p>
                The list of files that were selected. If the dialogue was cancelled
                or no file was selected, the list MUST be empty.
              </p>
            </attribute>
          </interface>
        </idl>
      </schema>
    </section>
  </section>

  <section xml:id='xhr'>
    <title>Integration with XMLHttpRequest</title>
    <p>
      
    </p>
    <ednote>
      The intent here is to add a method to XHR that would allow passing a File
      object straight for upload, without needing to transfer it through memory
      first.
    </ednote>
  </section>

  <section xml:id='conform'>
    <title>Conformance</title>
    <p>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
      "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119 [RFC2119].
    </p>
    <p>
      Unless otherwise specified immediately following the header, all sections in this
      document — to the exclusion of examples which are all informative — are normative.
    </p>
  </section>

  <section xml:id='ack'>
    <title>Acknowledgements</title>
    <p>
      This specification was originally developed by the SVG Working Group. Many thanks
      to Mark Baker and Anne van Kesteren for their feedback.
    </p>
  </section>

  <section xml:id='bibref' type='appendix'>
    <title>References</title>

    <bibliography/>
  </section>
</specification>

