<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang="en-US">
 <head>
  <title>Selectors API</title>
  <style type="text/css">
   html { margin:1em; max-width:45em; font:1em/1.5 Arial, sans-serif }
   dfn { font-style:normal; font-weight:bolder }
   .ct { font-style:normal; font-weight:normal; font-variant:small-caps }
   .example { margin-left:2em }
   .note { color:green }
   .note::before { content:"Note: " }
   .issue { color:red }
   .issue::before { content:"Issue: "}
  </style>
 </head>
 <body>
  <h1>Selectors API</h1>
  <p>Editor's Working Draft (24 March 2006)</p>
  <dl>
   <dt>Latest editor version</dt>
   <dd><a href="http://dev.w3.org/cvsweb/~checkout~/2006/webapi/selectors-api/draft/selectors-api.htm?content-type=text/html;%20charset=utf-8">http://dev.w3.org/cvsweb/~checkout~/2006/webapi/selectors-api/draft/selectors-api.htm?content-type=text/html;%20charset=utf-8</a></dd>
   <dt>
   <dt>Editor</dt>
   <dd>Anne van Kesteren, Opera Software ASA</dd>
  </dl>
  <h2>Status of this Document</h2>
  <p>This document is an Editor's Working Group draft. It is <strong>not an
   official publication</strong> of the <abbr title="World Wide Web
   Consortium">W3C</abbr>.</p>
  <h2>Conformance requirements</h2>
  <p>As well as sections marked as non-normative, all diagrams, examples, and
   notes in this specification are non-normative. Everything else in this
   specification is normative.</p>
  <p>The key words <em class="ct">must</em>, <em class="ct">must
   not</em>, <em class="ct">required</em>, <em class="ct">shall</em>,
   <em class="ct">shall not</em>, <em class="ct">should</em>,
   <em class="ct">should not</em>, <em class="ct">recommended</em>,
   <em class="ct">may</em>, and <em class="ct">optional</em> in the normative
   parts of this document are to be interpreted as described in [RFC2119].</p>
  <h2>The <code>DocumentSelector</code> interface</h2>
  <p>Objects implementing the <code>Document</code> interface defined in DOM
   Level 3 Core <em class="ct">must</em> also implement the
   <code>DocumentSelector</code> interface [DOM3Core].</p>
  <pre class="idl">interface DocumentSelector {
  Node            match(in DOMString <var>selectors</var>, in XPathNSResolver <var>nsresolver</var>);
  StaticNodeList  matchAll(in DOMString <var>selectors</var>, in XPathNSResolver <var>nsresolver</var>);
};</pre>
  <p>The <dfn><code>match</code></dfn> method, when invoked,
   <em class="ct">must</em> return the first (using depth-first pre-order
   traversal) <code>Element</code> that matches the group of selectors
   (<var>selectors</var>), if any. Otherwise it <em class="ct">must</em> return
   <code>null</code>.</p>
  <p>The <dfn><code>matchAll</code></dfn> method, when invoked,
   <em class="ct">must</em> return a <code>StaticNodeList</code> of all the
   <code>Element</code>s that match the group of selectors
   (<var>selectors</var>) in document order (using depth-first pre-order
   traversal), if any. Otherwise it <em class="ct">must</em> return
   <code>null</code>.</p>
  <p>Both <code>match</code> and <code>matchAll</code> take a group of selectors
   (<var>selectors</var>) as defined in [Selectors] as first argument and an
   <code>XPathNSResolver</code> (<var>nsresolver</var>) as second. UAs
   <em class="ct">must</em> use the <var>nsresolver</var> argument to resolve
   namespace prefixes as defined in [DOM3XPath]. When the <var>nsresolver</var>
   argument is <code>null</code> UAs <em class="ct">must</em> ignore it.</p>
  <p>When authors use namespace prefixes within <var>selectors</var> they
   <em class="ct">must</em> create an object implementing the
   <code>XPathNSResolver</code> interface. In case of ECMAScript they
   <em class="ct">may</em> pass a <code>Function</code> as argument for
   <code>nsresolver</code> instead as defined in in [DOM3XPath]. If they don't
   use namespace prefixes within <var>selectors</var> authors
   <em class="ct">must</em> set <var>nsresolver</var> to <code>null</code> or
   omit the argument completely if the language binding allows it.</p>
  <p class="issue">Make sure [DOM3XPath] actually defines this. Otherwise this
   draft will have to. (Which is needed anyway when this goes beyond Last Call
   and DOM Level 3 XPath does not.)</p>
  <p>If the given group of selectors (<var>selectors</var>) is invalid, the UA
   <em class="ct">must</em> raise a <code>SYNTAX_ERR</code> exception
   [Selectors]. If the given group of
   selectors (<var>selectors</var>) uses namespace prefixes and the prefix can
   not be resolved using the <var>nsresolver</var> argument the UA
   <em class="ct">must</em> raise a <code>NAMESPACE_ERR</code> exception.</p>
  <p class="note">Using psuedo-elements in one of the selectors could mean that
   nothing is returned for that particular selector when it doesn't resolve in
   one or more <code>Element</code> nodes.</p>
  <p>In languages that support optional arguments for methods, like ECMAScript,
   omitting the <var>nsresolver</var> argument in either the <code>match</code>
   or <code>matchAll</code> method <em class="ct">must</em> return the same
   result as if the method was called with the <var>nsresolver</var> argument
   being <code>null</code>.</p>
  <div class="example">
   <p>Something like this would be possible in ECMAScript:</p>
   <pre>function resolver(str) {
  var prefixes = {xh: 'http://www.w3.org/1999/xhtml',
                  svg: 'http://www.w3.org/2000/svg'}
  return prefixes[str];
}
var x = document.matchAll("xh|div > svg|svg", resolver);
var y = document.match("div.foo.bar");</pre>
   <p>Cool!</p>
  </div>
  <p class="issue">Should <code>XPathNSResolver</code> be defined in this draft
   for the moment so it doesn't rely on a non-normative note?</p>
  <h2>The <code>StaticNodeList</code> interface</h2>
  <pre class="idl">typedef StaticNodeList NodeList;</pre>
  <p>The <code>StaticNodeList</code> <em class="ct">must</em> be implemented
   identically to the <code>NodeList</code> interface as defined in [DOM3CORE]
   with the exception that the interface, as the name suggests, is static and
   not live.</p>
  <h2>References</h2>
  <dl>
   <dt>[DOM3CORE]</dt>
   <dd>....</dd>
   <dt>[DOM3XPath]</dt>
   <dd>...</dd>
   <dt>[Selectors]</dt>
   <dd>...</dd>
   <dt>[RFC2119</dt>
   <dd>...</dd>
  </dl>
  <p class="issue">Work this out here and in the document. Currently it is
   cluttered with references all over the place. Perhaps I should just make a
   section on dependencies on other specifications or on definitions or
   whatever.</p>
  <h2>Acknowledgements</h2>
  <ul>
   <li>Björn Höhrmann</li>
   <li>Cameron McCormack</li>
   <li>Daniel Schierbeck</li>
   <li>Ian Hickson</li>
   <li>Jim Ley</li>
   <li>Jonas Sicking</li>
   <li>Lachlan Hunt</li>
   <li>Maciej Stachowiak</li>
   <li>Mohamed Zergaoui</li>
   <li>Robin Berjon</li>
  </ul>
 </body>
</html>