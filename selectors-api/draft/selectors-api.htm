<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang="en-US">
 <head>
  <title>Selectors API</title>
  <link rel="stylesheet" href="http://www.w3.org/StyleSheets/TR/base.css">
  <style type="text/css">
   /* general styles */
   dfn { font-style:normal; font-weight:bolder }
   em.ct { font-style:normal; font-weight:normal; font-variant:small-caps }
   .example { margin-left:2em }
   .note { color:green }
   .note::before { content:"Note: " }
   .issue { color:red }
   .issue::before { content:"Issue: "}
   
   /* toc */
   ol.toc li { list-style:none }
   ol.toc li { counter-increment:toc }
   ol.toc, ol.toc ol { counter-reset:toc }
   ol.toc li::before { content:counters(toc,".",decimal) ". " }
   ol.toc.appendix li::before { content:counter(toc,upper-alpha) ". " } /* counter() for Opera */
   
   /* toc sections */
   body > div.section.toc { counter-increment:sec-header; counter-reset:subsec-header }
   body > div.section.toc > div.section.toc { counter-increment:subsec-header; counter-reset:subsubsec-header }
   body > div.section.toc > div.section.toc > div.section.toc { counter-increment:subsubsec-header }
   div.section.toc h2::before { content:counter(sec-header,decimal) ". " }
   div.section.toc h3::before { content:counter(sec-header,decimal) "." counter(subsec-header,decimal) ". " }
   div.section.toc h4::before { content:counter(sec-header,decimal) "." counter(subsec-header,decimal) "." counter(subsubsec-header,decimal) ". " }
   
   /* appendices */
   #references { counter-reset:sec-header }
   div.section.appendix.toc h2::before { content:counter(sec-header,upper-alpha) ". " }
  </style>
 </head>
 <body>
  <div class="head">
   <p><a href='http://www.w3.org/'><img alt="W3C" src="http://www.w3.org/Icons/w3c_home"></a></p>
   <h1 id="title">Selectors API</h1>
   <h2 id="W3C-doctype">Editor's Draft May 2006</h2>
   <dl>
    <dt>This version</dt>
    <dd>The one you're reading, stupid.</dd>
    <dt>Latest editor version</dt>
    <dd><a href="http://dev.w3.org/cvsweb/~checkout~/2006/webapi/selectors-api/draft/selectors-api.htm?content-type=text/html;%20charset=utf-8">http://dev.w3.org/cvsweb/~checkout~/2006/webapi/selectors-api/draft/selectors-api.htm?content-type=text/html;%20charset=utf-8</a></dd>
    <dt>Editor</dt>
    <dd><a href="http://annevankesteren.nl/">Anne van Kesteren</a>
     (<a href="http://www.opera.com/">Opera Software ASA</a>)
     &lt;<a href="mailto:annevk@opera.com">annevk@opera.com</a>&gt;</dd>
   </dl>
   <p class="copyright"><a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a>
    © 2006
    <a href="http://www.w3.org/"><abbr title="World Wide Web Consortium">W3C</abbr></a><sup>®</sup>
    (<a href="http://www.csail.mit.edu/"><acronym title="Massachusetts Institute of Technology">MIT</acronym></a>,
    <a href="http://www.ercim.org/"><acronym title="European Research Consortium for Informatics and Mathematics">ERCIM</acronym></a>,
    <a href="http://www.keio.ac.jp/">Keio</a>), All Rights Reserved. W3C
    <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>,
    <a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a>
    and
    <a href="http://www.w3.org/Consortium/Legal/copyright-documents">document
    use</a> rules apply.</p>
  </div>
  <hr>
  <div id="abstract" class="section">
   <h2>Abstract</h2>
   <p>This specification defines two methods for retrieving <code>Element</code>
    nodes in the <abbr title="Document Object Model">DOM</abbr> using a group of
    selectors as defined in
    [<cite><a href="#ref-selectors">Selectors</a></cite>].</p>
  </div>
  <div id="status" class="section">
   <h2>Status of this Document</h2>
   <p>This document is for review by the
    <a href="http://www.w3.org/2006/webapi/">Web APIs Working Group</a> and is
    subject to change without notice. This document has no formal standing
    within W3C. Please consult the
    <a href="http://www.w3.org/2006/webapi/">group's home page</a> and the
    <a href="http://www.w3.org/TR/">W3C technical reports index</a> for
    information about the latest publications by this group.</p>
  </div>
  <div id="toc" class="section">
   <h2>Table of contents</h2>
   <ol class="toc">
    <li><a href="#introduction">Introduction</a>
     <ol>
      <li><a href="#examples">Examples</a></li>
      <li><a href="#conformance">Conformance requirements</a></li>
      <li><a href="#issues">Outstanding issues</a></li>
     </ol>
    </li>
    <li><a href="#interfaces">Interfaces</a>
     <ol>
      <li><a href="#documentselector">The <code>DocumentSelector</code>
       interface</a>
       <ol>
        <li><a href="#extensibility">Extensibility</a></li>
       </ol>
      </li>
      <li><a href="#staticnodelist">The <code>StaticNodeList</code>
       interface</a></li>
     </ol>
    </li>
    <li><a href="#security">Security considerations</a></li>
   </ol>
   <ol class="toc appendix">
    <li><a href="#references">References</a></li>
    <li><a href="#acknowledgements">Acknowledgements</a></li>
   </ol>
  </div>
  <div id="introduction" class="section toc">
   <h2>Introduction</h2>
   <p><em>This section is non-normative.</em></p>
   <p>It is often desirable to perform script and or DOM operations on a
    specific set of elements in a document.
    [<cite><a href="#ref-selectors">Selectors</a></cite>], mostly used in
    <abbr title="Cascading Style Sheets">CSS</abbr>
    [<cite><a href="#ref-css21">CSS21</a></cite>] context, provides a way of
    matching such a set of elements. This specification introduces two methods
    which take a selector (technically a group of selectors) as argument and
    return the matched elements as result.</p>
   <div id="examples" class="section toc">
    <h3>Examples</h3>
    <p><em>This section is non-normative.</em></p>
    <p>Some ECMAScript [<cite><a href="#ref-ecma262">ECMA262</a></cite>]
     examples:</p>
    <pre>function resolver(str) {
  var prefixes = {
    xh:  "http://www.w3.org/1999/xhtml",
    svg: "http://www.w3.org/2000/svg"}
  return prefixes[str];
}
var <var>a</var> = document.matchAll("xh|div &gt; svg|svg", resolver);
var <var>b</var> = document.match("div.foo.bar");</pre>
    <p><var>a</var> contains a <code>StaticNodeList</code> of all the nodes
     matched by <code>xh|div &gt; svg|svg</code> (namespace prefixes are
     resolved using the function in this case). <var>b</var> would contain the
     first <code>div</code> element which has the classes <code>foo</code> and
     <code>bar</code> set. (So in case of multiple <code>div</code> elements
     matching <code>div.foo.bar</code> only the first is returned because
     <code>match</code> is used and not <code>matchAll</code>.)</p>
    <pre>function test(){
  var c = document.matchAll(":root"),
      d = document.documentElement;
  return c[0] === d;
}</pre>
    <p><code>test()</code> would return <code>true</code> when both
     <code>matchAll</code> and <code>:root</code> are supported.</p>
    <p class="note">When using <code>:root</code> like this it's probably better
     (and faster) to use <code>match</code> given that there's only one possible
     result. This is just to illustrate how it works.</p>
    <pre>var <var>e</var> = document.matchAll("p.warning, p.alert");</pre>
    <p>The above code snippet shows that besides using a single selector you can
     also pass a group of selectors (basically comma-separated selectors) as
     argument. <var>e</var> would contain a <code>StaticNodeList</code> with all
     <code>p</code> elements in the document that have a <code>warning</code> or
     <code>alert</code> class.</p>
   </div>
   <div id="conformance" class="section toc">
    <h3>Conformance requirements</h3>
    <p>Everying in this specification is normative except for diagrams,
     examples, notes and sections marked non-normative.</p>
    <p>The key words <em class="ct">must</em>, <em class="ct">must
     not</em>, <em class="ct">required</em>, <em class="ct">shall</em>,
     <em class="ct">shall not</em>, <em class="ct">should</em>,
     <em class="ct">should not</em>, <em class="ct">recommended</em>,
     <em class="ct">may</em>, and <em class="ct">optional</em> in the normative
     parts of this document are to be interpreted as described in
     [<cite><a href="#ref-rfc2119">RFC2119</a></cite>].</p>
    <dl>
     <dt><dfn>conforming implementation</dfn></dt>
     <dd>A UA that implements all interfaces described in this specification and
      follows all <em class="ct">must</em>-, <em class="ct">required</em>- and
      <em class="ct">shall</em>-level of critera in this specification.</dd>
     <dt><dfn>conforming document</dfn></dt>
     <dd>A document that follows all <em class="ct">must</em>-,
      <em class="ct">required</em>- and <em class="ct">shall</em>-level of
      critera in this specification that apply to document authors.</dd>
     <dt><dfn>conforming authoring tool</dfn></dt>
     <dd>One that produces conforming documents.</dd>
    </dl>
   </div>
   <div id="issues" class="section toc">
    <h2>Outstanding issues</h2>
    <p>The draft has several outstanding issues that either need to be addressed
     in one way or another at some point:</p>
    <ul>
     <li>Several people have raised issues with naming the methods
      <code>match</code> and <code>matchAll</code> as those might suggest a
      boolean return value. Alternate suggestions have been <code>select</code>
      and <code>selectAll</code>.</li>
     <li>There was at least one request for scoped selectors. For example, being
      able to do <code>event.target.match()</code> or in other words allowing
      the methods on <code>Element</code> nodes. Given that Selectors itself has
      notion of scoped selectors this might be difficult to define and is
      perhaps better delayed until the CSS WG has defined scoped selectors.</li>
     <li>It would be nice if extensibility was addressed by DOM Level 3 Core or
      a separate specification that all DOM specifications could reuse.</li>
    </ul>
   </div>
  </div>
  <div id="interfaces" class="section toc">
   <h2>Interfaces</h2>
   <div id="documentselector" class="section toc">
    <h3>The <code>DocumentSelector</code> interface</h3>
    <p>Objects implementing the <code>Document</code> interface defined in
     <cite>DOM Level 3 Core</cite> <em class="ct">must</em> also implement the
     <code>DocumentSelector</code> interface
     [<cite><a href="#ref-dom3core">DOM3Core</a></cite>].</p>
    <pre class="idl">interface DocumentSelector {
  Node            match(in DOMString <var>selectors</var>, in XPathNSResolver <var>nsresolver</var>);
  StaticNodeList  matchAll(in DOMString <var>selectors</var>, in XPathNSResolver <var>nsresolver</var>);
};</pre>
    <p>The <dfn id="match"><code>match</code></dfn> method, when invoked,
     <em class="ct">must</em> return the first (using depth-first pre-order
     traversal) <code>Element</code> that matches the group of selectors
     (<var>selectors</var>), if any. Otherwise it <em class="ct">must</em>
     return <code>null</code>.</p>
    <p>The <dfn id="matchall"><code>matchAll</code></dfn> method, when invoked,
     <em class="ct">must</em> return a <code>StaticNodeList</code> of all the
     <code>Element</code>s that match the group of selectors
     (<var>selectors</var>) in document order (using depth-first pre-order
     traversal), if any. Otherwise it <em class="ct">must</em> return
     <code>null</code>.</p>
    <p>Both <code>match</code> and <code>matchAll</code> take a group of
     selectors (<var>selectors</var>) as defined in
     [<cite><a href="#ref-selectors">Selectors</a></cite>] as first argument and
     an <code>XPathNSResolver</code> (<var>nsresolver</var>) as second. UAs
     <em class="ct">must</em> use the <var>nsresolver</var> argument to resolve
     namespace prefixes as defined in
     [<cite><a href="#ref-dom3xpath">DOM3XPath</a></cite>]. When the
     <var>nsresolver</var>
     argument is <code>null</code> UAs <em class="ct">must</em> ignore it.</p>
    <p>When authors use namespace prefixes within <var>selectors</var> they
     <em class="ct">must</em> create an object implementing the
     <code>XPathNSResolver</code> interface (or <em class="ct">may</em> create a
     <code>Function</code> in case of ECMAScript) and pass that as argument for
     <code>nsresolver</code> as defined in in 
     [<cite><a href="#ref-dom3xpath">DOM3XPath</a></cite>]. If they don't use
     namespace prefixes within <var>selectors</var> authors
     <em class="ct">may</em> set <var>nsresolver</var> to <code>null</code> or
     omit the argument completely if the language binding allows it.</p>
    <p class="issue">Make sure [DOM3XPath] actually defines this. Otherwise this
     draft will have to. (Which is needed anyway when this goes beyond Last Call
     and DOM Level 3 XPath does not.)</p>
    <p>If the given group of selectors (<var>selectors</var>) is invalid, the UA
     <em class="ct">must</em> raise a <code>SYNTAX_ERR</code> exception. If the
     given group of selectors (<var>selectors</var>) uses namespace prefixes and
     the prefix can not be resolved using the <var>nsresolver</var> argument UAs
     <em class="ct">must</em> raise a <code>NAMESPACE_ERR</code> exception.</p>
    <p class="note">Using psuedo-elements in one of the selectors could mean
     that nothing is returned for that particular selector when it doesn't
     resolve in one or more <code>Element</code> nodes.</p>
    <p>In languages that support optional arguments for methods, like
     ECMAScript, omitting the <var>nsresolver</var> argument in either the
     <code>match</code> or <code>matchAll</code> method <em class="ct">must</em>
     return the same result as if the method was called with the
     <var>nsresolver</var> argument being <code>null</code>.</p>
    <div id="extensibility" class="section toc">
     <h4>Extensibility</h4>
     <p>Extensions to the <code>DocumentSelector</code> interface are reserved
      for future work by the Web APIs WG. WGs besides the Web APIs WG
      <em class="ct">may</em> extend the interface, but <em class="ct">must</em>
      coordinate that with the Web APIs WG. UAs <em class="ct">may</em> extend
      the interface, but <em class="ct">must</em> prefix the new members using a
      string specific to the vendor following the
      <var>Vendor</var><var>Member</var> scheme. (Normally members follow the
      <var>member</var> scheme.)
      <code>FooSetDefaultNamespace(<var>ns</var>)</code> would be an example for
      company Foo.</p>
     <p>Authors <em class="ct">may</em> use extension mechanisms specific to the
      host language, like <code>.prototype</code> in ECMAScript.</p>
    </div>
   </div>
   <div id="staticnodelist" class="section toc">
    <h3>The <code>StaticNodeList</code> interface</h3>
    <pre class="idl">typedef StaticNodeList NodeList;</pre>
    <p>The <code>StaticNodeList</code> <em class="ct">must</em> be implemented
     identically to the <code>NodeList</code> interface as defined in
     [<cite><a href="#ref-dom3core">DOM3Core</a></cite>]
     with the exception that the interface, as the name suggests, is static and
     not live.</p>
    <p class="issue">If DOM Level 3 Core gets (good) errata we might be able to
     get away with not having a new interface at all but just say that the
     object implementing the <code>NodeList</code> interface is not live.</p>
   </div>
  </div>
  <div id="security" class="section toc"> 
   <h2>Security Considerations</h2>
   <p>It is expected that implementing this specification introduces no new
    risks for users.</p>
   <p>History theft is a potential security problem, because of the
    <code>:visited</code> pseudo-class in
    [<cite><a href="#ref-selectors">Selectors</a></cite>].
    <code>:visited</code> can already be used to query which links are visited
    and which are not using methods from
    [<cite><a href="#ref-dom2style">DOM2Style</a></cite>] and even
    [<cite><a href="#ref-css21">CSS21</a></cite>] and because
    this specification did not introduce the problem and it can already be
    exploited by other means UAs don't have to take action upon it.</p>
   <p>Another problem is hostile content. UAs <em class="ct">must</em> ensure
    they remain stable when facing a hostile <code>XPathNSResolver</code>
    object. Potential hostile things such an object could do include:</p>
   <ul>
    <li>Returning inconsistent results;</li>
    <li>Hanging;</li>
    <li>Changing the DOM during the operation.</li>
   </ul>
   <p class="issue">It was said that this section is in need of examples...</p>
  </div>
  <div id="references" class="section appendix toc">
   <h2>References</h2>
   <dl>
    <dt id="ref-css21">[CSS21]</dt>
    <dd><cite><a href="http://www.w3.org/TR/CSS21">Cascading Style Sheets, level
     2 revision 1</a></cite>, B. Bos, T. Çelik, I. Hickson, H. Wium Lie,
     editors. World Wide Web Consortium, June 2005.</dd>
    <dt id="ref-dom2style">[DOM2Style]</dt>
    <dd><cite><a href="http://www.w3.org/TR/DOM-Level-2-Style">Document Object
     Model (DOM) Level 2 Style Specification</a></cite>, C. Wilson, P. Le
     Hégaret, V. Apparao, editors. World Wide Web Consortium, November
     2000.</dd>
    <dt id="ref-dom3core">[DOM3Core]</dt>
    <dd><cite><a href="http://www.w3.org/TR/DOM-Level-3-Core">Document Object
     Model (DOM) Level 3 Core Specification</a></cite>, A. Le Hors, P. Le
     Hégaret, L. Wood, G. Nicol, J. Robie, M. Champion, S. Byrne, editors.
     World Wide Web Consortium, April 2004.</dd>
    <dt id="ref-dom3xpath">[DOM3XPath]</dt>
    <dd><cite><a href="http://www.w3.org/TR/DOM-Level-3-XPath">Document Object
     Model (DOM) Level 3 XPath Specification</a></cite>, R. Whitmer, editor.
     World Wide Web Consortium, February 2004.</dd>
    <dt id="ref-ecma262">[ECMA262]</dt>
    <dd><cite><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMAScript
     Language Specification</a></cite>, Third Edition. ECMA, December 1999.</dd>
    <dt id="ref-selectors">[Selectors]</dt>
    <dd><cite><a href="http://www.w3.org/TR/css3-selectors">Selectors</a></cite>,
     D. Glazman, T. Çelik, I. Hickson, P. Linss, J. Williams, editors. World
     Wide Web Consortium, December 2005.</dd>
    <dt id="ref-rfc2119">[RFC2119]</dt>
    <dd><cite><a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119: Key words
     for use in RFCs to Indicate Requirement Levels</a></cite>, S. Bradner.
     IETF, March 1997.</dd>
   </dl>
  </div>
  <div id="acknowledgements" class="section appendix toc">
   <h2>Acknowledgements</h2>
   <ul>
    <li>Björn Höhrmann</li>
    <li>Cameron McCormack</li>
    <li>Daniel Schierbeck</li>
    <li>Dean Jackson</li>
    <li>Ian Hickson</li>
    <li>Jim Ley</li>
    <li>Jonas Sicking</li>
    <li>Lachlan Hunt</li>
    <li>Maciej Stachowiak</li>
    <li>Mohamed Zergaoui</li>
    <li>Robin Berjon</li>
   </ul>
   <p>Thanks to all those who have helped to improve this specification by
    sending suggestions and corrections. (Please, keep bugging us with your
    issues!)</p>
  </div>
 </body>
</html>