
<specification xmlns="http://berjon.com/ns/re-spec/" xmlns:rs="http://berjon.com/ns/re-spec/" version="1.0" xml:lang="en">
  
  <!--
    VERSION 2.0 (the one we implement)

    * .onload
    * .onprogress
    * the XMLHttpRequest object implements the EventTarget object
    * .ontimeout (Gorm wants it!)
    * .onerror (error event...)
    * does abort() trigger the error event
    * property for not following redirects?
    * ...
  -->

  <metadata>
    <title>The XMLHttpRequest Object 1.0</title>
    <styling type="W3C" status="ED"/>
    <date year="2006" month="03" day="08"/>
    <editors>
      <person>
        <name>Anne van Kesteren</name>
        <email>annevk@opera.com</email>
        <url>http://annevankesteren.nl/</url>
        <company>Opera Software ASA</company>
        <company-url>http://www.opera.com/</company-url>
      </person>
      <person>
        <name>Dean Jackson</name>
        <email>dino@w3.org</email>
        <url>http://www.w3.org/People/Dean/</url>
        <company>W3C</company>
        <company-url>http://www.w3.org/</company-url>
      </person>
    </editors>
    <versions>
      <current/>
      <latest>
        <!--http://www.w3.org/TR/XMLHttpRequest/-->
      </latest>
      <previous/>
    </versions>
  </metadata>

  <section xml:id="abstract" type="w3c-abstract">
    <title>Abstract</title>
    
    <p>
      This specification defines the <code>XMLHttpRequest</code> object...
    </p>
    <ednote>
      <p>
        Dino has to fill this in.
      </p>
      <p>
        Last update: $Id: XMLHttpRequest.xml,v 1.13 2006-03-08 12:36:46 rberjon Exp $.
      </p>
    </ednote>
  </section>
  
  <section xml:id="sotd" type="w3c-sotd">
    <title>Status of this Document</title>
    
    <include href='respec:sotd-head.tpl'/>
    <p>
      This document is produced by the <a href="http://www.w3.org/2006/webapi">Web API
      <acronym title="Working Group">WG</acronym></a> (part of the
      <a href="http://www.w3.org/2006/rwc/Activity">Rich Web Clients Activity</a>).
      This document has no formal standing within the <acronym title="World Wide Web Consortium">W3C</acronym>. 
      Please send comments to <a href="mailto:public-webapi@w3.org">public-webapi@w3.org</a>, 
      the public email list for issues related to Web APIs.
    </p>
    <p>
      The patent policy for this document is the 
      <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 W3C Patent Policy</a>. 
      Patent disclosures relevant to this specification may be found on the 
      <a href="http://www.w3.org/2004/01/pp-impl/38482/status" rel="disclosure">Web API Working Group's patent
      disclosure page</a>. An individual who has actual knowledge of a patent which the individual believes 
      contains Essential Claim(s) with respect to this specification should disclose the information in
      accordance with <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6
      of the W3C Patent Policy</a>.
    </p>
    <include href='respec:sotd-endorse.tpl'/>
  </section>
  
  <section xml:id="contents" type="toc">
    <title>Table of contents</title>

    <?respec-toc?>
  </section>
  
  <section xml:id="conformance">
    <title>Conformance</title>
    
    <p>
      The key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT,
      RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in
      RFC 2119 [RFC2119].
    </p>
  </section>
  
  <section xml:id="xmlhttprequest">
    <title>The <code>XMLHttpRequest</code> object</title>
    
    <p>
      To allow scripts to programmatically connect back to their originating
      server via HTTP, the following interface may be used.
    </p>

    <pre class="idl">
      interface <dfn id="xmlhttprequest">XMLHttpRequest</dfn> {
           attribute Function                onreadystatechange;
  readonly attribute int                     readyState;
  void open(in DOMString method, in DOMString uri);
  void open(in DOMString method, in DOMString uri, in boolean async);
  void open(in DOMString method, in DOMString uri, in boolean async, in DOMString user);
  void open(in DOMString method, in DOMString uri, in boolean async, in DOMString user, in DOMString password);
  void setRequestHeader(in DOMString header, in DOMString value);
  void send();
  void send(in DOMString body);
  void send(in Document body);
  void abort();
  <!--
   goes to 4, dispatches readystatechange, resets everything
   (same as assigning new XMLHttpRequest() to the variable)
   
   misnomer again, should probably have been reset() ...
  -->
  DOMString getAllResponseHeaders();
  DOMString getResponseHeader(in DOMString header);
  readonly attribute DOMString               responseText;
  readonly attribute Document                responseXML;
  readonly attribute int                     status;
  readonly attribute DOMString               statusText;
      };
    </pre>
 
    <p>
      In ECMAScript, an instance of <code><a href="#xmlhttprequest">XMLHttpRequest</a></code> can be
      created using the <code>XMLHttpRequest()</code> constructor:
    </p>
    
    <example>
      var r = new XMLHttpRequest();
    </example>
    
    <p>
      The <code><a href="#xmlhttprequest">XMLHttpRequest</a></code> interface
      has the following members:
    </p>
    <dl>
      <dt><dfn xml:id="onreadystatechange">onreadystatechange</dfn></dt>
      <dd>
        An attribute that represents a function that MUST be invoked when
        <code>readyState</code> changes value. The function may be called multiple
        times when <code>readyState</code> is 3 (Receiving).
      </dd>
      <dt><dfn xml:id="readystate">readyState</dfn></dt>
      <dd>
        <p>
          The state of the object. The values have the following meanings:
        </p>
        <dl>
          <dt>0 Uninitialised</dt>
          <dd>The initial value.</dd>
          <dt>1 Open</dt>
          <dd>The <code title="XMLHttpRequest.open">open()</code> method has been successfully called.</dd>
          <dt>2 Sent</dt>
          <dd>The <code title="XMLHttpRequest.send">send()</code> method has been successfully called, but no data has yet been received.</dd>
          <dt>3 Receiving</dt>
          <dd>Data is being received, but the data transfer is not yet complete.</dd>
          <dt>4 Loaded</dt>
          <dd>The data transfer has been completed.</dd>
        </dl>
      </dd>
      <dt>
        <dfn xml:id="openmethod">open(<var>method</var>, <var>uri</var>, [<var>async</var>, [<var>user</var>, [<var>password</var>]]])</dfn>
      </dt>
      <dd>
        <p>
          Initialises the object by remembering the <var>method</var>,
          <var>uri</var>, <var>async</var> (defaulting to true if
          omitted), <var>user</var> (defaulting to null if omitted), and
          <var>password</var> (defaulting to null if omitted) arguments,
          setting the <code>readyState</code> attribute to 1 (Open), resetting
          the <code>responseText</code>, <code>responseXML</code>, <code>status</code>, and
          <code>statusText</code> attributes to their initial
          values, and resetting the list of request headers.
        </p>
        <p>
          If <code>open()</code> is called when <code>readyState</code> is
          4 (Loaded) the entire object MUST be resetted.
        </p>
        <p>
          The <var>uri</var> argument is resolved to an absolute URI
          using the script context's <code>window.location.href</code> value as
          the base.
        </p>
        <!-- ISSUE-29 -->
        <p>
          Same-origin security restrictions should apply.
        </p>
        <!-- revisit with access-control -->
        <p>
          If the URI given to this method contains a username and a password
          (the latter potentially being the empty string), then these MUST be used
          if the <var>user</var> and <var>password</var>
          arguments are omitted. If the arguments are not omitted, they take
          precedence, even if they are null.
        </p>
      </dd>
      <dt>
        <dfn xml:id="setrequestheader">setRequestHeader(<var>header</var>, <var>value</var>)</dfn>
      </dt>
      <dd>
        <p>
          If the <code><a href="#readystate">readyState</a></code> attribute has a
          value other than 1 (Open), raises an exception. If the <var>header</var> or
          <var>value</var> arguments contain any U+000A LINE FEED or U+000D
          CARRIAGE RETURN characters, or if the <var>header</var> argument
          contains any U+0020 SPACE or U+003A COLON charecters, does nothing.
          Otherwise, the request header <var>header</var> is set to <var>value</var>.
          If the request header <var>header</var> had already been set, then the new
          <var>value</var> is concatenated to the existing value after a U+002C COMMA
          and a U+0020 SPACE.
        </p>
        <example>
          <title>...</title><!-- XXX -->
          // The following script:
          var r = new XMLHttpRequest;
          r.open('get', 'demo.cgi');
          r.setRequestHeader('X-Test', 'one');
          r.setRequestHeader('X-Test', 'two');
          r.send(null);
          // ...would result in the following header being sent:
          ...
          X-Test: one, two
          ...
        </example>
        <p>
          The list of request headers must be reset when the
          <code><a href="#openmethod">open()</a></code>
          method is called.
        </p>
        <p>
          User agents must not set any headers other than the headers set by the
          author using this method, with the following exceptions:
        </p>
        <ul>
          <!-- this entire sections needs work, raise an issue? -->
          <li>
            UAs MUST set the <code>Host</code> header appropriately (see
            <code><a href="#openmethod">open()</a></code>) and not allow it to be
            overridden.
          </li>
          <li>
            UAs MUST set the <code>Authorization</code> header according to the
            values passed to the <code><a href="#openmethod">open()</a></code> method
            (but MUST allow calls to
            <code><a href="#setrequestheader">setRequestHeader()</a></code> to append values
            to it).
          </li>
          <li>
            UAs MAY set the <code>Accept-Charset</code> and
            <code>Accept-Encoding</code> headers and must not allow them to be
            overridden.
          </li>
          <li>
            UAs MAY set the <code>If-Modified-Since</code>,
            <code>If-None-Match</code>, <code>If-Range</code>, and
            <code>Range</code> headers if the resource is cached and has not
            expired (as allowed by HTTP), and must not allow those headers to be
            overridden.
          </li>
          <li>
            UAs must set the <code>Connection</code> and
            <code>Keep-Alive</code> headers as described by the HTTP specification,
            and must not allow those headers to be overridden.
          </li>
          <li>
            UAs should set the proxy-related headers according to proxy settings
            of the environment, and must not allow those headers to be overridden.
          </li>
          <li>
            UAs may give the <code>User-Agent</code> header an initial value,
            but must allow authors to append values to it.
          </li>
          <li>
            UAs should set <code>Cookie</code> and <code>Cookie2</code> headers
            appropriately for the given URI and given the user's current cookies,
            and must allow authors to append values to these headers.
          </li>
        </ul>
        <p>
          In particular, UAs must not automatically set the
          <code>Cache-Control</code> or <code>Pragma</code> headers to defeat
          caching [RFC2616].
        </p>
      </dd>
      <dt><dfn xml:id="senddata">send([<var>data</var>])</dfn></dt>
      <dd>
        If the <code><a href="#readystate">readyState</a></code> attribute
        has a value other than
        1 (Open), raises an exception. Otherwise, sets the
        <code><a href="#readystate">readyState</a></code> attribute to 2 (Sent) and sends
        a request to <var>uri</var> using method <var>method</var>, authenticating using
        <var>user</var> and
        <var>password</var> as appropriate. If the <var>async</var> flag is set
        to false, then the method does not
        return until the request has completed. Otherwise, it returns
        immediately. (See: <code><a href="#openmethod">open()</a></code>.)
        <!-- ISSUE-34 -->
        <p>
          If the <var>method</var> is <code>POST</code> or
          <code>PUT</code>, then the <var>data</var> passed to the
          <code>send()</code> method is used for the entity body. If <var>data</var>
          is a string, the data is encoded as UTF-8 for
          transmission. If the <var>data</var> is a Document, then the
          document is serialised using the encoding given by
          <code><var>data</var>.xmlEncoding</code>, if specified, or UTF-8
          otherwise [DOM3]. If <var>data</var> is not a Document or a DOMString
          it the host language MUST use the stringification mechanisms on the argument
          that was passed.
        </p>
        <!-- XXX, see above -->
        <!-- probably should say somewhere that only PUT, POST, DELETE and GET are
             to be supported by implementors and that that's per RFC2616
             http://ietf.org/rfc/rfc2616.txt -->
        <p>
          If the response is an HTTP redirect (status code 301, 302, 303 or 307),
          then it should be transparently
          followed (unless it violates security or infinite loop precautions). Any
          other error (including a 401) must cause the object to use that error
          page as the response.
        </p>
        <!-- what about DNS errors? XXX -->
        <p>
          Once the final HTTP status line has been received, the
          <code><a href="#readystate">readyState</a></code> attribute should be set to to 3
          (Receiving). When the request has completed loading, the
          <code><a href="#readystate">readyState</a></code> attribute should be set to 4
          (Loaded).
        </p>
      </dd>

      <dt><dfn xml:id="abort">abort</dfn></dt>
      <dd>
        Calling this method MUST cancel any network activity for which the object is
        responsible. In addition, UAs MUST then set <code><a href="#readystate">readyState</a></code>
        to 4 (Loaded), call the function defined in <code>onreadystatechange</code>
        and reset the object.
      </dd>
      <dt><dfn xml:id="getallresponseheaders">getAllResponseHeaders()</dfn></dt>
      <dd>
        If the <code><a href="#readystate">readyState</a></code> attribute has a value other than
        3 (Receiving) or 4 (Loaded), it MUST be null. Otherwise, it MUST represent all the HTTP
        headers, as a single string, with each header line separated by a
        CR (U+000D) LF (U+000A) pair. The status line MUST not be included.
        <example>
          <title>...</title>
          // The following script:
          var r = new XMLHttpRequest;
          r.open('get', 'test.txt', false);
          r.send();
          alert(r.getAllResponseHeaders());
          // ...should display a dialog with text similar to the following:
          Date: Sun, 24 Oct 2004 04:58:38 GMT
          Server: Apache/1.3.31 (Unix)
          Keep-Alive: timeout=15, max=99
          Connection: Keep-Alive
          Transfer-Encoding: chunked
          Content-Type: text/plain; charset=utf-8
        </example>
      </dd>

      <dt><dfn xml:id="getresponseheader">getResponseHeader(<var title="">header</var>)</dfn></dt>
      <dd>
        If the <code><a href="#readystate">readyState</a></code> attribute has a value other than
        3 (Receiving) or 4 (Loaded), it MUST be the empty string. Otherwise, it MUST represent
        the value of the given HTTP header in the data received so far for the
        last request sent, as a single string. If more than one header of the
        given name was received, then the values MUST be concatenated,
        separated from each other by an U+002C COMMA followed by an U+0020 SPACE. If no headers of that
        name were received, then it MUST be the empty string. Header names MUST be
        compared <span>case-insensitively</span><!--XXX xref --> to the method
        argument (<var>header</var>).
      </dd>
      
      <dt><dfn xml:id="responsetext">responseText</dfn></dt>
      <dd>
        If the <code><a href="#readystate">readyState</a></code> attribute has
        a value other than
        3 (Receiving) or 4 (Loaded), it MUST be the empty string. Otherwise, returns
        the body of the data received so far, interpreted using the character
        encoding specified in the response, or UTF-8 if no character encoding was
        specified. Invalid bytes must be converted to U+FFFD REPLACEMENT
        CHARACTER.
      </dd>
      <!-- ISSUE-31 -->
      <dt><dfn id="responsexml">responseXML</dfn></dt>
      <dd>
        If the <code><a href="#readystate">readyState</a></code> attribute has
        a value other than
        4 (Loaded), it MUST be null. Otherwise, if the <code>Content-Type</code>
        header is either <code>text/xml</code>, <code>application/xml</code>, or
        ends in <code>+xml</code>, it MUST be an object that implements the Document
        interface representing the parsed document. If the document was not an
        XML document, or if the document could not be parsed (due to an XML
        well-formedness error or unsupported character encoding, for instance),
        it MUST be null.
      </dd>

      <dt><dfn xml:id="status0">status</dfn></dt>
      <dd>
        If the <code>status</code> attribute is not available it MUST raise an
        exception. It must be available when <code>readyState</code> is
        3 (Receiving) or 4 (Loaded). When available, it MUST represent the HTTP status
        code (typically 200 for a sucessful connection).
      </dd>
      
      <dt><dfn id="statustext">statusText</dfn></dt>
      <dd>
        If the <code>statusText</code> attribute is not available it MUST raise an
        exception. It must be available when <code>readyState</code> is
        3 (Receiving) or 4 (Loaded). When available, it MUST represent the HTTP status text
        sent by the server (appears after the status code).
      </dd>
    </dl>
    <p>
      If an exception is raised due to an attribute or method being used when
      <code><a href="#readystate">readyState</a></code> has an inappropriate value, it
      SHOULD be a <code>INVALID_STATE_ERR</code> DOM Exception.
    </p>
    <p>
      HTTP requests sent from multiple different
      <code><a href="#xmlhttprequest">XMLHttpRequest</a></code>
      objects in succession should be pipelined into shared HTTP connections.
    </p>
  </section>

  <section xml:id='bibref' type='appendix'>
    <title>References</title>

    <bibliography/>
  </section>

</specification>
