<specification xmlns="http://berjon.com/ns/re-spec/" xmlns:rs="http://berjon.com/ns/re-spec/" version="1.0" xml:lang="en-US">

  <!--
    VERSION 2.0 (the one we implement)

    * .onload
    * .onprogress
    * the XMLHttpRequest object implements the EventTarget object
    * .ontimeout (Gorm wants it!)
    * .onerror (error event...)
    * does abort() trigger the error event
    * property for not following redirects?
    * ...
  -->

  <metadata>
    <title>The XMLHttpRequest Object</title> <!-- please don't call it 1.0 -->
    <styling type="W3C" status="ED"/>
    <date year="2006" month="03" day="20"/>
    <editors>
      <person>
        <name>Anne van Kesteren</name>
        <email>annevk@opera.com</email>
        <url>http://annevankesteren.nl/</url>
        <company>Opera Software ASA</company>
        <company-url>http://www.opera.com/</company-url>
      </person>
      <person>
        <name>Dean Jackson</name>
        <email>dino@w3.org</email>
        <url>http://www.w3.org/People/Dean/</url>
        <company>W3C</company>
        <company-url>http://www.w3.org/</company-url>
      </person>
    </editors>
    <versions>
      <current/>
      <latest>
        <!-- http://www.w3.org/TR/XMLHttpRequest/ -->
      </latest>
      <previous/>
    </versions>
  </metadata>

  <section xml:id="abstract" type="w3c-abstract">
    <title>Abstract</title>
    <p>
      This specification defines the <code>XMLHttpRequest</code> object, an
      API that provides some HTTP client functionality.
    </p>
    <ednote>
      <p>
        Last update: $Id: XMLHttpRequest.xml,v 1.33 2006-03-24 19:15:54 avankest Exp $.
      </p>
    </ednote>
  </section>

  <section xml:id="sotd" type="w3c-sotd">
    <title>Status of this Document</title>

    <include href='respec:sotd-head.tpl'/>
    <p>
      This document is a Working Group draft. It is <strong>not an official
      publication</strong> of the W3C. The <a href="#authors">authors of this document</a> are
      the members of the W3C <a href="http://www.w3.org/2006/webapi">Web API
      Working Group</a>.
    </p>
    <p>
      This document is produced by the <a href="http://www.w3.org/2006/webapi">Web API
      <acronym title="Working Group">WG</acronym></a>, part of the
      <a href="http://www.w3.org/2006/rwc/Activity">Rich Web Clients Activity</a> in
      the W3C <a href="http://www.w3.org/Interaction/">Interaction Domain</a>.
    </p>
    <p>
      Web content and browser developers are encouraged to review this
      draft.
      Please send comments to <a href="mailto:public-webapi@w3.org">public-webapi@w3.org</a>,
      the W3C's public email list for issues related to Web APIs.
      <a href="http://lists.w3.org/Archives/Public/public-webapi/">Archives</a> of the
      list are available.
    </p>
    <p>
      The patent policy for this document is the
      <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 W3C Patent Policy</a>.
      Patent disclosures relevant to this specification MAY be found on the
      <a href="http://www.w3.org/2004/01/pp-impl/38482/status" rel="disclosure">Web API Working Group's patent
      disclosure page</a>. An individual who has actual knowledge of a patent which the individual believes
      contains Essential Claim(s) with respect to this specification SHOULD disclose the information in
      accordance with <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6
      of the W3C Patent Policy</a>.
    </p>
    <include href='respec:sotd-endorse.tpl'/>
  </section>

  <section xml:id="contents" type="toc">
    <title>Table of contents</title>

    <?respec-toc?>
  </section>

  <section xml:id="introduction">
    <title>Introduction</title>
    <p><em>This section is informative</em></p>

    <p>
      The XMLHttpRequest object is an interface exposed by a scripting
      engine that allows scripts to perform HTTP client functionality,
      such as submitting form data or loading data from a remove Web
      site.
    </p>

    <p>
        The XMLHttpRequest object is implemented today, in some form, by
        many popular Web browsers. Unfortunately the implementations are
        not completely interoperable. The goal of this specification is
        to document a minimum set of interoperable features based on
        existing implementations, allowing Web developers to use these
        features without platform-specific code. In order to do this,
        only features that are already implemented are considered. In the
        case where there is a feature with no interoperable implementations,
        the authors have specified what they believe to be the most
        correct behavior.
    </p>

    <p>
      Future versions of this specification (as opposed to future drafts
      of this version) may add new features, after careful examination
      from browser developers and Web content developers.
    </p>

    <p>
      This specification was originally derived from the WHAT WG's Web
      Applications 1.0 document. The authors acknowledge the work
      of the WHAT WG in documenting existing behavior.
    </p>

  </section>

  <section xml:id="conformance">
    <title>Conformance</title>

    <p><em>This section is normative</em></p>

    <p>
      The key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT,
      RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in
      RFC 2119 [RFC2119].
    </p>
  </section>

  <section xml:id="xmlhttprequest">
    <title>The <code>XMLHttpRequest</code> object</title>

    <p><em>This section is normative</em></p>

    <p>
      The following interface MAY be used to allow scripts to
      programmatically connect to their originating
      server via HTTP.
    </p>
    <!-- the above restricts cross-domain access, revisit with access-control -->
    <p>
      In ECMAScript, an instance of <code>XMLHttpRequest</code> can be
      created using the <code>XMLHttpRequest()</code> constructor:
    </p>
    <example>
      <title>XMLHttpRequest constructor</title>
      var r = new XMLHttpRequest();
    </example>
    <p>
      A more complete description of what can be done with <code>XMLHttpRequest</code>
      can be found in the IDL below and its associated details.
    </p>

    <schema>
      <title>The XMLHttpRequest interface</title>
      <idl>
        <interface module='webapi' name='XMLHttpRequest'>

          <attribute type='Function' name='onreadystatechange'>
            <p>
              An attribute that represents a function that MUST be invoked when
              <code>readyState</code> changes value. The function MAY be called
              multiple times when readyState is 3 (Receiving).
            </p>
          </attribute>

          <attribute ro='true' type='unsigned short' name='readyState'>
            <p>
              The state of the object.
            </p>
            <p>
              The value of <code>readyState</code> MUST be within the following set of constants, which describe the current state of the object.
            </p>
            <dl>
              <dt>0 Uninitialized</dt>
              <dd>The initial value.</dd>
              <dt>1 Open</dt>
              <dd>The <code>open()</code> method has been successfully
               called.</dd>
              <dt>2 Sent</dt>
              <dd>The UA successfully completed the request, but no data has yet
               been received.</dd>
              <dt>3 Receiving</dt>
              <dd>Immediately before receiving the message body (if any). All
               HTTP headers have been received.</dd>
              <!-- XXX what about HEAD requests? -->
              <!-- XXX see ISSUE-48 too -->
              <dt>4 Loaded</dt>
              <dd>The data transfer has been completed.</dd>
            </dl>
          </attribute>

          <!-- === request methods ======================== -->
          <method name='open'>
            <p>
              Calling this method MUST initialise the object by remembering the <var>method</var>,
              <var>uri</var>, <var>async</var> (defaulting to <code>true</code> if
              omitted), <var>user</var> (defaulting to <code>null</code> if omitted), and
              <var>password</var> (defaulting to <code>null</code> if omitted) arguments,
              setting the <code>readyState</code> attribute to 1 (Open), resetting
              the <code>responseText</code>, <code>responseXML</code>, <code>status</code>, and
              <code>statusText</code> attributes to their initial
              values, and resetting the list of request headers.
            </p>
            <p>
              Same-origin security restrictions SHOULD apply.
            </p>
            <!-- XXX revisit with access-control or in general? -->
            <p>
              If the URI given to this method contains a user name and a password
              (the latter potentially being the empty string), then these MUST be used
              if the <var>user</var> and <var>password</var>
              arguments are omitted. If the arguments are not omitted, they take
              precedence, even if they are <code>null</code>.
            </p>
            <p>
              If <code>open()</code> is called when <code>readyState</code> is
              4 (Loaded) the entire object MUST be reset.
            </p>
            <!-- XXX ISSUE-29, awaiting testcases -->
            <param name='method'>
              A valid HTTP method name. The <code>GET</code>, <code>POST</code>,
              and <code>HEAD</code> values MUST be supported.
            </param>
            <!-- XXX what about PUT and DELETE? -->
            <param name='uri'>
              A URI, which MUST be resolved to an absolute URI using the script's
              context <code>window.location.href</code> value as base if available,
              and <code>xml:base</code> otherwise.
            </param>
            <!-- XXX xml:base otherwise makes no sense whatsoever... -->
            <param name='async' type='boolean' optional='true'>
              @XXX TBD@
            </param>
            <param name='user' optional='true'>
              @XXX TBD@
            </param>
            <param name='password' optional='true'>
              @XXX TBD@
            </param>
          </method>

          <method name='setRequestHeader'>
            <p>
              If the <code><a href="#readystate">readyState</a></code> attribute has a
              value other than 1 (Open), an exception MUST be raised. If the <var>header</var> or
              <var>value</var> arguments contain any U+000A LINE FEED or U+000D
              CARRIAGE RETURN characters, or if the <var>header</var> argument
              contains any U+0020 SPACE or U+003A COLON charecters, nothing MUST be done.
              Otherwise, the request header <var>header</var> MUST be set to <var>value</var>.
              If the request header <var>header</var> had already been set, then the new
              <var>value</var> MUST be concatenated to the existing value using a U+002C COMMA
              followed by a U+0020 SPACE for separation.
            </p>
            <example>
              <title>Setting a request header</title>
              // The following script:
              var r = new XMLHttpRequest();
              r.open('get', 'demo.cgi');
              r.setRequestHeader('X-Test', 'one');
              r.setRequestHeader('X-Test', 'two');
              r.send(null);

              // ...would result in the following header being sent:
              ...
              X-Test: one, two
              ...
            </example>
            <p>
              The list of request headers MUST be reset when the
              <code><a href="#idl-meth-XMLHttpRequest-open">open()</a></code>
              method is called.
            </p>
            <p>
              User agents MUST not set any headers other than the headers set by the
              author using this method, with the following exceptions:
            </p>
            <ul>
              <li>
                UAs MUST set the <code>Host</code> header appropriately (see
                <code><a href="#idl-meth-XMLHttpRequest-open">open()</a></code>) and not allow it to be
                overridden.
              </li>
              <li>
                UAs MUST set the <code>Authorization</code> header according to the
                values passed to the <code><a href="#openmethod">open()</a></code> method
                (but MUST allow calls to
                <code><a href="#idl-meth-XMLHttpRequest-setRequestHeader">setRequestHeader()</a></code> to append values
                to it).
              </li>
              <li>
                UAs MAY set the <code>Accept-Charset</code> and
                <code>Accept-Encoding</code> headers and MUST NOT allow them to be
                overridden.
              </li>
              <li>
                UAs MAY set the <code>If-Modified-Since</code>,
                <code>If-None-Match</code>, <code>If-Range</code>, and
                <code>Range</code> headers if the resource is cached and has not
                expired (as allowed by HTTP), and MUST NOT allow those headers to be
                overridden.
              </li>
              <li>
                UAs MUST set the <code>Connection</code> and
                <code>Keep-Alive</code> headers as described by the HTTP specification,
                and MUST NOT allow those headers to be overridden.
              </li>
              <li>
                UAs SHOULD set the proxy-related headers according to proxy settings
                of the environment, and MUST NOT allow those headers to be overridden.
              </li>
              <li>
                UAs MAY give the <code>User-Agent</code> header an initial value,
                but MUST allow authors to append values to it.
              </li>
              <li>
                UAs SHOULD set <code>Cookie</code> and <code>Cookie2</code> headers
                appropriately for the given URI and given the user's current cookies,
                and MUST allow authors to append values to these headers.
              </li>
            </ul>
              <!-- this entire sections needs work, raise an issue? -->
            <p>
              In particular, UAs MUST NOT automatically set the
              <code>Cache-Control</code> or <code>Pragma</code> headers to defeat
              caching [RFC2616].
            </p>
            <param name='header'>
              @XXX TDB@
            </param>
            <param name='value'>
              @XXX TDB@
            </param>
            <exception name='DOMException'>
              <code name='UNKNOWN_ERR'>
                @XXX TDB@
              </code>
            </exception>
          </method>

          <method name="send">
            <p>
              If the <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code> attribute
              has a value other than
              1 (Open), an exception MUST be raised. Otherwise, the
              <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
              attribute MUST be set to 2 (Sent) and
              a request to <var>uri</var> using method <var>method</var>, authenticating using
              <var>user</var> and
              <var>password</var> as appropriate is sent. If the <var>async</var> flag is set
              to false, then the method MUST not
              return until the request has completed. Otherwise, it MUST return
              immediately. (See: <code><a href="#idl-meth-XMLHttpRequest-open">open()</a></code>.)
            </p>
            <!-- ISSUE-34 -->
            <p>
              If the <var>method</var> is <code>POST</code> or
              <code>PUT</code><!-- XXX, conflicts -->, then the <var>data</var> passed to the
              <code>send()</code> method MUST be used for the entity body. If <var>data</var>
              is a string, the data MUST be encoded as UTF-8 for
              transmission. If the <var>data</var> is a <code>Document</code>, then the
              document MUST be serialised using the encoding given by
              <code><var>data</var>.xmlEncoding</code>, if specified, or UTF-8
              otherwise [DOM3]. If <var>data</var> is not a <code>Document</code> or a <code>DOMString</code>
              the host language MUST use the stringification mechanisms on the argument
              that was passed.
            </p>
            <!-- XXX, see above -->
            <!-- probably should say somewhere that only PUT, POST, DELETE and GET are
                 to be supported by implementors and that that's per RFC2616
                 http://ietf.org/rfc/rfc2616.txt -->
            <p>
             Implementations SHOULD support the <code>send()</code> to be called
             without the <var>data</var> argument to be passed.
            </p>
            <!-- in version 2.0 / revision 1 this should be a MUST... -->
            <p>
              If the response is an HTTP redirect (status code 301, 302, 303 or 307),
              then it MUST be transparently
              followed (unless it violates security or infinite loop precautions). Any
              other error (including a 401) MUST cause the object to use that error
              page as the response.
            </p>
            <!-- XXX what about DNS errors? -->
            <!-- XXX what about 304? -->
            <p>
              Immediately before processing the message body (if any), the
              <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
              attribute MUST be set to to 3 (Receiving). When the request has
              completed loading, the
              <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
              attribute MUST be set to 4 (Loaded).
            </p>
            <param name='data' type='Document | DOMString'>
              @XXX TDB@
            </param>
            <exception name='DOMException'>
              <code name='INVALID_STATE_ERR' on='retrieval'>
                MUST be raised if this method is called when
                <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
                has an inappropriate value.
              </code>
            </exception>
          </method>

          <!--
           misnomer again, should probably have been reset() ...
          -->
          <method name='abort'>
            <p>
              Calling this method MUST cancel any network activity for which the object is
              responsible. In addition, UAs MUST then set
              <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
              to 4 (Loaded), call the function defined in <code>onreadystatechange</code>
              and reset the object.
            </p>
          </method>


          <!-- === response methods ======================== -->
          <method name='getAllResponseHeaders'>
            <p>
              If the <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
              attribute has a value other than
              3 (Receiving) or 4 (Loaded), it MUST be <code>null</code>.
              Otherwise, it MUST represent all the HTTP
              headers, as a single string, with each header line separated by a
              CR (U+000D) LF (U+000A) pair. The status line MUST not be included.
            </p>
            <example>
              <title>Manipulating response headers</title>
              // The following script:
              var r = new XMLHttpRequest();
              r.open('get', 'test.txt', false);
              r.send();
              alert(r.getAllResponseHeaders());

              // ...should display a dialog with text similar to the following:
              Date: Sun, 24 Oct 2004 04:58:38 GMT
              Server: Apache/1.3.31 (Unix)
              Keep-Alive: timeout=15, max=99
              Connection: Keep-Alive
              Transfer-Encoding: chunked
              Content-Type: text/plain; charset=utf-8
            </example>
            <returns type='DOMString'>
              @XXX TBD@
            </returns>
            <exception name='DOMException'>
              <code name='INVALID_STATE_ERR' on='retrieval'>
                SHOULD be raised if this method is called when
                <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
                has an inappropriate value.
              </code>
            </exception>
          </method>

          <method name='getResponseHeader'>
            <p>
              If the <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
              attribute has a value other than
              3 (Receiving) or 4 (Loaded), it MUST be the empty string.
              Otherwise, it MUST represent
              the value of the given HTTP header in the data received so far for the
              last request sent, as a single string. If more than one header of the
              given name was received, then the values MUST be concatenated,
              separated from each other by an U+002C COMMA followed by an U+0020 SPACE. If no headers of that
              name were received, then it MUST be the empty string. Header names MUST be
              compared <span>case-insensitively</span><!--XXX xref --> to the method
              argument (<var>header</var>).
            </p>
            <example>
              <title>Manipulating response headers</title>
              // The following script:
              var r = new XMLHttpRequest();
              r.open('get', 'test.txt', false);
              r.send();
              alert(r.getAllResponseHeaders());

              // ...should display a dialog with text similar to the following:
              Date: Sun, 24 Oct 2004 04:58:38 GMT
              Server: Apache/1.3.31 (Unix)
              Keep-Alive: timeout=15, max=99
              Connection: Keep-Alive
              Transfer-Encoding: chunked
              Content-Type: text/plain; charset=utf-8
            </example>
            <returns type='DOMString'>
              @XXX TBD@
            </returns>
            <param name='header'>
              @XXX TDB@
            </param>
            <exception name='DOMException'>
              <code name='INVALID_STATE_ERR' on='retrieval'>
                SHOULD be raised if this method is called when
                <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
                has an inappropriate value.
              </code>
            </exception>
          </method>

          <attribute name='responseText'>
            <p>
              If the <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code> attribute has
              a value other than
              3 (Receiving) or 4 (Loaded), it MUST be the empty string.
              Otherwise, returns
              the body of the data received so far, interpreted using the character
              encoding specified in the response, or UTF-8 if no character encoding was
              specified. Invalid bytes MUST be converted to U+FFFD REPLACEMENT
              CHARACTER.
            </p>
            <exception name='DOMException'>
              <code name='INVALID_STATE_ERR' on='retrieval'>
                SHOULD be raised if this attribute is accessed when
                <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
                has an inappropriate value.
              </code>
            </exception>
          </attribute>
          <!-- XXX ISSUE-31 -->

          <attribute name='responseXML' type='Document'>
            <p>
              If the <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
              attribute has a value other than
              4 (Loaded), it MUST be <code>null</code>.
              Otherwise, if the <code>Content-Type</code>
              header is either <code>text/xml</code>, <code>application/xml</code>, or
              ends in <code>+xml</code>, it MUST be an object that implements the <code>Document</code>
              interface representing the parsed document. If the document was not an
              XML document, or if the document could not be parsed (due to an XML
              well-formedness error or unsupported character encoding, for instance),
              it MUST be <code>null</code>.
            </p>
            <exception name='DOMException'>
              <code name='INVALID_STATE_ERR' on='retrieval'>
                SHOULD be raised if this attribute is accessed when
                <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
                has an inappropriate value.
              </code>
            </exception>
          </attribute>

          <attribute name='status' type='unsigned short'>
            <p>
              If the <code>status</code> attribute is not available it MUST raise an
              exception. It MUST be available when <code>readyState</code> is
              3 (Receiving) or 4 (Loaded).
              When available, it MUST represent the HTTP status
              code (typically 200 for a successful connection).
            </p>
            <exception name='DOMException'>
              <code name='INVALID_STATE_ERR' on='retrieval'>
                SHOULD be raised if this attribute is accessed when
                <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
                has an inappropriate value.
              </code>
            </exception>
          </attribute>

          <attribute name='statusText'>
            <p>
              If the <code>statusText</code> attribute is not available it MUST raise an
              exception. It MUST be available when <code>readyState</code> is
              3 (Receiving) or 4 (Loaded).
              When available, it MUST represent the HTTP status text
              sent by the server (appears after the status code).
            </p>
            <exception name='DOMException'>
              <code name='INVALID_STATE_ERR' on='retrieval'>
                SHOULD be raised if this attribute is accessed when
                <code><a href="#idl-attr-XMLHttpRequest-readyState">readyState</a></code>
                has an inappropriate value.
              </code>
            </exception>
          </attribute>

        </interface>
      </idl>
    </schema>

    <p>
      HTTP requests sent from multiple different
      <code><a href="#xmlhttprequest">XMLHttpRequest</a></code>
      objects in succession SHOULD be pipelined into shared HTTP connections.
    </p>
  </section>

  <section xml:id='bibref' type='appendix'>
    <title>References</title>

    <p><em>This section is normative</em></p>

    <bibliography/>
  </section>

  <section xml:id="authors" type="appendix">
    <title>Authors</title>

    <p><em>This section is informative</em></p>

    <p>The authors of this document are the members of the
        W3C Web APIs Working Group.</p>

    <ul>
      <li>Robin Berjon, Expway (Working Group Chair)</li>
      <li>Ian Davis, Talis Information Limited</li>
      <li>Gorm Haug Eriksen, Opera Software</li>
      <li>Marc Hadley, Sun Microsystems</li>
      <li>Scott Hayman, Research In Motion</li>
      <li>Ian Hickson, Google</li>
      <li>Björn Höhrmann, Invited Expert</li>
      <li>Dean Jackson, W3C</li>
      <li>Christophe Jolif, ILOG</li>
      <li>Luca Mascaro, HTML Writers Guild</li>
      <li>Charles McCathieNevile, Opera Software</li> <!-- XXX (Working Group Chair) -->
      <li>T.V. Raman, Google</li>
      <li>Arun Ranganathan, AOL</li>
      <li>John Robinson, AOL</li>
      <li>Doug Schepers, Vectoreal</li>
      <li>Michael Shenfield, Research In Motion</li>
      <li>Jonas Sicking, Mozilla Foundation</li>
      <li>Stéphane Sire, IntuiLab</li>
      <li>Maciej Stachowiak, Apple Computer</li>
      <li>Anne van Kesteren, Opera Software</li>
    </ul>
    <p>Thanks to all those who have helped to improve this specification by
     sending suggestions and corrections. (Please, keep bugging us with your
     issues!)</p>
  </section>
</specification>
