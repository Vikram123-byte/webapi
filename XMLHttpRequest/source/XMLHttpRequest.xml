<specification xmlns="http://berjon.com/ns/re-spec/" xmlns:rs="http://berjon.com/ns/re-spec/" version="1.0" xml:lang="en-US">
 <metadata>
  <title>The XMLHttpRequest Object</title> <!-- please don't call it 1.0 -->
  <styling type="W3C" status="ED"/>
  <date year="2006" month="05" day="03"/>
  <editors>
   <person>
    <name>Anne van Kesteren</name>
    <email>annevk@opera.com</email>
    <url>http://annevankesteren.nl/</url>
    <company>Opera Software ASA</company>
    <company-url>http://www.opera.com/</company-url>
   </person>
   <person>
    <name>Dean Jackson</name>
    <email>dino@w3.org</email>
    <url>http://www.w3.org/People/Dean/</url>
    <company>W3C</company>
    <company-url>http://www.w3.org/</company-url>
   </person>
  </editors>
  <versions>
   <current/>
   <latest>http://www.w3.org/TR/XMLHttpRequest/</latest>
   <previous>http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060405/</previous>
  </versions>
 </metadata>
 <section xml:id="abstract" type="w3c-abstract">
  <title>Abstract</title>
  <p>This specification defines the <code>XMLHttpRequest</code> object, an
   <abbr title="Application Programming Interface">API</abbr> that provides
   additional <abbr title="HyperText Transfer Protocol">HTTP</abbr> client
   functionality for transferring data between a client and a server.</p>
  <ednote>
   <p>Last update: $Id: XMLHttpRequest.xml,v 1.49 2006-05-03 07:31:16 avankest Exp $.</p>
  </ednote>
 </section>
 <section xml:id="sotd" type="w3c-sotd">
  <title>Status of this Document</title>
  <include href='respec:sotd-head.tpl'/>
  <p>This document is a Working Group draft. It is <strong>not an official
   publication</strong> of the W3C.</p>
  <p>This document is produced by the
   <a href="http://www.w3.org/2006/webapi">Web APIs WG</a>, part of the
   <a href="http://www.w3.org/2006/rwc/Activity">Rich Web Clients Activity</a>
   in the W3C <a href="http://www.w3.org/Interaction/">Interaction
   Domain</a>.</p>
  <p>Web content and browser developers are encouraged to review this draft.
   Please send comments to
   <a href="mailto:public-webapi@w3.org">public-webapi@w3.org</a>, the W3C's
   public email list for issues related to Web APIs.
   <a href="http://lists.w3.org/Archives/Public/public-webapi/">Archives</a> of
   the list are available.</p>
  <p>The patent policy for this document is the
   <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February
   2004 W3C Patent Policy</a>. Patent disclosures relevant to this specification
   MAY be found on the
   <a href="http://www.w3.org/2004/01/pp-impl/38482/status" rel="disclosure">Web
   API Working Group's patent disclosure page</a>. An individual who has actual
   knowledge of a patent which the individual believes contains Essential
   Claim(s) with respect to this specification SHOULD disclose the information
   in accordance with
   <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section
   6 of the W3C Patent Policy</a>.</p>
  <include href='respec:sotd-endorse.tpl'/>
 </section>
 <section xml:id="toc" type="toc">
  <title>Table of contents</title>
  <?respec-toc?>
 </section>
 <section xml:id="introduction">
  <title>Introduction</title>
  <p><em>This section is non-normative.</em></p>
  <p>The <code>XMLHttpRequest</code> object is an interface exposed by a
   scripting engine that allows scripts to perform HTTP client functionality,
   such as submitting form data or loading data from a server. Although the
   name of the object starts with "XML", it supports the transport of other
   data formats in addition to
   <abbr title="Extensible Markup Language">XML</abbr>.  Also, some
   implementation support other protocols besides HTTP opposed to what "Http" in
   the name suggests (that functionality is not covered in this specification
   though).</p>
  <p>The <code>XMLHttpRequest</code> object is implemented today, in some form, by
   many popular Web browsers. Unfortunately the implementations are not
   completely interoperable. The goal of this specification is to document a
   minimum set of interoperable features based on existing implementations,
   allowing Web developers to use these features without platform-specific
   code. In order to do this, only features that are already implemented are
   considered. In the case where there is a feature with no interoperable
   implementations, the authors have specified what they believe to be the most
   correct behavior. It is expected that vendors update their implementation to
   match what the specification specifies.</p>
  <p>Future versions of this specification (as opposed to future drafts of this
   version) may add new features, after careful examination from browser
   developers and Web content developers.</p>
  <section xml:id="examples">
   <title>Examples of usage</title>
   <p><em>This section is non-normative.</em></p>
   <p>Various examples are listed throughout the specification.</p>
   <ednote>Blah...</ednote>
  </section>
  <section xml:id="security">
   <title>Security considerations</title>
   <p><em>This section is non-normative.</em></p>
   <p>Implementations that run code originating from untrusted sources will
    probably want to place additional constraints on some of the features
    defined in this specification. This is not required and an implementation is
    free to ignore this section.</p>
   <p>The restrictions are there to stop untrusted users of the API from using
    the implementation to retrieve sensitive data. Specifically, an
    implementation in a web browser will often want to restrict pages from a
    website <var>A</var> to retrieve data from website <var>B</var>. The reason
    for this is that website <var>B</var> could reside inside a corporate
    firewall. If data could be retrieved from website <var>B</var> then website
    <var>A</var> could use the browser effectively circumvent the firewall.</p>
   <p>Another possible security attack exists if website <var>B</var> requires
    authentication, like for example a web bank. If website <var>A</var> were
    allowed to access data from website <var>B</var> and the user had recently
    visited the bank and at that time logged in, the page from website
    <var>A</var> would have access to private information like statements. If
    correctly crafted, a page from website <var>A</var> could even initiate
    transactions transferring money out of the browser-users bank account.</p>
   <p>To stop these attacks the implementation should only allow a page loaded
    from website <var>A</var> to access other pages on the same website. Two
    websites are considered separate if they use separate DNS names, even if
    these names refer to the same IP. This is because the two websites could be
    hosted at a hosting service that place several websites on a single server
    and then use the requested hostname to choose which website to serve.
    Additionally, separate TCP port numbers or separate protocols (like http vs.
    https) are considered as separate websites.</p>
   <p>The implemtation must be careful to always restrict access to the same
    website, not just during the initial HTTP request. For example if that
    request results in a redirect the implemenation should check that the
    redirect points to the same website and otherwise deny access.</p>
   <p>Another feature that an implementation could limit is the
    <code><term>setRequestHeader</term></code> method. If the implementation
    allows the <code>Host</code> header to be set and two websites are hosted
    on the same server one website might be able to access sensitive information
    from the other website.</p>
   <p>...</p>
   <ednote>Has to address restrictions on methods as well, etc.</ednote>
  </section>
  <section xml:id="definitions">
   <title>Definitions</title>
   <p>The term <dfn>entity body</dfn> is used in this specification as defined
    by RFC 2616 ([RFC2616], section 7.2.1).</p>
   <p>The term <dfn>reset</dfn> either means that respective member MUST be set
    to its initial value or each member of the object, depending on how it's
    used.</p>
   <p>The <dfn>cached base URI</dfn> MUST be
    <code>window.document.baseURI</code> once an <code>XMLHttpRequest</code>
    object is initialized. Specifically, the <code>Window</code> that the
    <code>XMLHttpRequest</code> constructor comes from, not the calling
    <code>Window</code>.</p>
  </section>
  <section xml:id="conformance">
   <title>Conformance</title>
   <p>Everying in this specification is normative except for diagrams, examples,
    notes and sections marked non-normative.</p>
   <p>The key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
    SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be
    interpreted as described in RFC 2119 [RFC2119].</p>
   <p>This specification defines some classes of products:</p>
   <dl>
    <dt>conforming implementation</dt>
    <dd>...</dd>
    <dt>...</dt>
    <dd>...</dd>
   </dl>
  </section>
  <section xml:id="extensibility">
   <title>Extensibility</title>
   <p>Extensions to the <code>XMLHttpRequest</code> interface are reserved for
    future work by the Web APIs WG. WGs besides the Web APIs WG may extend the
    interface, but MUST coordinate that with the Web APIs WG. UAs MAY extend the
    interface, but MUST prefix the new members using a string specific to the
    vendor following the <var>Vendor</var><var>Member</var>  scheme. (Normally
    members follow the <var>member</var> scheme.) Company Foo could introduce a
    <code>FooFollowRedirect(<var>boolean</var>)</code> method for example.</p>
   <p>Authors MAY use extension mechanisms specific to the host language, like
    <code>.prototype</code> in ECMAScript.</p>
  </section>
  <section xml:id="issues">
   <title>Outstanding issues</title>
   <p><em>This section is non-normative.</em></p>
   <ul>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/29">ISSUE-29 - how
     is uri parameter of the open() method resolved</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/31">ISSUE-31 - 
     invalid bytes and default character encoding</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/34">ISSUE-34 - XHR:
     Should synchronous loading call onreadystatechange</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/39">ISSUE-39 - 
     Errors in XHR requests</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/42">ISSUE-42 -
     missing text for arguments and return values</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/43">ISSUE-43 -
     change to "common baseline"?</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/44">ISSUE-44 - XHR:
     Overloading in the IDL</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/47">ISSUE-47 -
     responseText is not always accessible when readyState &lt; 3</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/71">ISSUE-71 -
     setRequestHeader has too many header restrictions</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/72">ISSUE-72 -
     should XMLHttpRequest be an EventTarget?</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/73">ISSUE-73 - Are
     we going to support non-ECMAScript languages?</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/74">ISSUE-74 - what
     does it mean for XHR to support more methods?</a></li>
    <li><a href="http://www.w3.org/2006/webapi/track/issues/75">ISSUE-75 -
     Is method case-sensitive?</a></li>
   </ul>
  </section>
  <section xml:id="notcovered">
   <title>Not in this specification</title>
   <p>This specification currently does not include the following features that
    may or may not be implemented by UAs. It is currently unclear whether some
    of these will be added for this version of the specification or the
    next.</p>
   <ul>
    <li><code>load</code> event and <code>onload</code> attribute;</li>
    <li><code>error</code> event and <code>onerror</code> attribute;</li>
    <li><code>progress</code> event and <code>onprogress</code> attribute;</li>
    <li><code>abort</code> event and <code>onabort</code> attribute;</li>
    <li><code>readystatechange</code> event;</li>
    <li>Objects that implement the <code>XMLHttpRequest</code> interface to also
    implement the <code>EventTarget</code> interface;</li>
    <li>Timers have been suggested, perhaps an <code>ontimeout</code>
     attribute;</li>
    <li>Property to disable following redirects.</li>
   </ul>
  </section>
 </section> 
 <section xml:id="xmlhttprequest">
  <title>The <code>XMLHttpRequest</code> object</title>
  <p>The <code>XMLHttpRequest</code> interface may be used to allow scripts to
   programmatically connect to their originating server via HTTP.</p>
  <p>Objects implementing the <code>XMLHttpRequest</code> interface MUST also
   implement the <code>EventTarget</code> interface [DOM3EV].</p>
  <p>In ECMAScript [ECMA262], an instance of <code>XMLHttpRequest</code> can be
   created using the <code>XMLHttpRequest()</code> constructor:</p>
  <example>
   <title>XMLHttpRequest constructor</title>
   var r = new XMLHttpRequest();
  </example>
  <ednote>What about non-ECMAScript implementations?</ednote>
  <p>A more complete description of what can be done with
   <code>XMLHttpRequest</code> can be found in the
   <abbr title="Interface Definition Language">IDL</abbr> below and its
   associated details. Note that this IDL is non-normative. Only the language
   bindings are normative.</p>
  <ednote>Need to define which IDL specification we are going to conform to, if
   any. Robin suggested drafting up a Note...</ednote>
  <schema>
   <title>The XMLHttpRequest interface</title>
   <idl>
    <interface module='webapi' name='XMLHttpRequest'>
     <attribute type='EventListener' name='onreadystatechange'>
      <p>An attribute that takes an <code>EventListener</code> as value that
       MUST be invoked when <code><term>readystatechange</term></code> is
       dispatched on the object implementing the <code>XMLHttpRequest</code>
       interface. Its initial value MUST be <code>null</code>.</p>
     </attribute>
     <attribute ro='true' type='unsigned short' name='readyState' xml:id="dfn-readystate">
      <p>The state of the object. The attribute MUST be one of the following
       values:</p>
      <dl>
       <dt>0 Uninitialized</dt>
       <dd>The initial value.</dd>
       <dt>1 Open</dt>
       <dd>The <code><term>open()</term></code> method has been successfully
        called.</dd>
       <dt>2 Sent</dt>
       <dd>The UA successfully completed the request, but no data has yet been
        received.</dd>
       <dt>3 Receiving</dt>
       <dd>Immediately before receiving the message body (if any). All HTTP
        headers have been received.</dd>
       <dt>4 Loaded</dt>
       <dd>The data transfer has been completed.</dd>
      </dl>
     </attribute>
     <method name='open'>
      <p>Calling this method MUST initialize the object by remembering the
       <var>method</var>, <var>uri</var>, <var>async</var> (defaulting to
       <code>true</code> if omitted), <var>user</var> (defaulting to
       <code>null</code> if omitted), and <var>password</var> (defaulting to
       <code>null</code> if omitted) arguments, setting the
       <code><term>readyState</term></code> attribute to 1 (Open), resetting the
       <code><term>responseText</term></code>,
       <code><term>responseXML</term></code>, <code><term>status</term></code>,
       and <code><term>statusText</term></code> attributes to their initial
       values, and resetting the list of request headers.</p>
      <p>Same-origin security restrictions SHOULD apply.</p>
      <p>If the URI given to this method contains userinfo ([RFC3986], section
       3.2.1) then the user name and password specified MUST be used if the
       <var>user</var> and <var>password</var> arguments are omitted. If the
       arguments are not omitted, they take precedence, even if they are
       <code>null</code>. The usage of userinfo is discouraged MAY not work in
       implementations.</p>
      <p>If <code>open()</code> is called when <code>readyState</code> is 4
       (Loaded) the entire object MUST be reset.</p>
      <param name='method'>A valid HTTP method name. The <code>GET</code>,
       <code>POST</code>, <code>PUT</code>, <code>DELETE</code> and
       <code>HEAD</code> values MUST be supported [RFC2616].</param>
      <param name='uri'>A URI, which MUST be resolved to an absolute URI using
       the <term>cached base URI</term>.</param>
      <param name='async' type='boolean' optional='true'>
       @XXX TBD@
      </param>
      <param name='user' optional='true'>
       @XXX TBD@
      </param>
      <param name='password' optional='true'>
       @XXX TBD@
      </param>
     </method>
     <method name='setRequestHeader'>
      <p>If the <code><term>readyState</term></code> attribute has a value other
       than 1 (Open), an exception MUST be raised. If the <var>header</var> or
       <var>value</var> arguments contain any U+000A LINE FEED or U+000D
       CARRIAGE RETURN characters, or if the <var>header</var> argument contains
       any U+0020 SPACE or U+003A COLON characters, nothing MUST be done.
       Otherwise, the nominated request header (<var>header</var>) field value
       MUST be set to <var>value</var>. If the nominated request header field
       already has a value, the new value SHOULD be combined with the existing
       value ([RFC2616], section 4.2). Implementations MAY replace an existing
       value (instead of combining it with the new value) if the nominated
       request header field value is not specified as a comma-separated
       list.</p>
       <!--Otherwise, the request header <var>header</var> MUST be set to
       <var>value</var>. If the request header <var>header</var> had already
       been set, then the new <var>value</var> MUST be concatenated to the
       existing value using a U+002C COMMA followed by a U+0020 SPACE for
       separation.</p>-->
      <example>
       <title>Setting a request header</title>
       // The following script:
       var r = new XMLHttpRequest();
       r.open('GET', 'demo.cgi');
       r.setRequestHeader('X-Test', 'one');
       r.setRequestHeader('X-Test', 'two');
       r.send(null);

       // ...would result in the following header being sent:
       ...
       X-Test: one, two
       ...
      </example>
      <p>The list of request headers MUST be reset when the
       <code><term>open()</term></code> method is called.</p>
      <p>User agents SHOULD NOT set any headers other than the headers set by
       the author using this method, with the following exceptions:</p>
      <ul>
       <li>UAs MUST set the <code>Host</code> header appropriately (see
        <code><term>open()</term></code>) and not allow it to be
        overridden.</li>
       <li>UAs MAY set the Authorization header, based upon the operation of
        HTTP Authentication [RFC2617]. If a challenge from the server is
        encountered, credentials SHOULD be generated based upon the values of
        the username and password specified by open(). UAs MUST NOT set the
        Authorization header solely because open() contains a username/password;
        it should only be set as part of the protocol described by HTTP
        Authentication [RFC2617]. <ednote>This needs rewording...</ednote></li>
       <!--<li>UAs MUST set the <code>Authorization</code> header according to the
        values passed to the <code><term>open()</term></code> method (but MUST
        allow calls to <code><term>setRequestHeader()</term></code> to append
        values to it).</li>-->
       <li>UAs MAY set the <code>Accept-Charset</code>,
        <code>Accept-Encoding</code> and <code>TE</code> headers and MUST NOT
        allow them to be overridden.</li>
       <li>UAs MUST set the <code>Connection</code> and <code>Keep-Alive</code>
        headers as described by the HTTP specification, and MUST NOT allow those
        headers to be overridden.</li>
       <li>UAs SHOULD set the proxy-related headers according to proxy settings
        of the environment, and MUST NOT allow those headers to be overridden.
        <ednote>Perhaps this should be more explicit. Only <code>Via</code>
        comes to mind though...</ednote></li>
       <li>UAs MAY give the <code>User-Agent</code> header an initial value, but
        MUST allow authors to append values to it.</li>
       <li>UAs SHOULD set <code>Cookie</code> and <code>Cookie2</code> headers
        appropriately for the given URI and given the user's current cookies,
        and MUST allow authors to append values to these headers.</li>
      </ul>
      <p>In particular, UAs MUST NOT automatically set the
       <code>Cache-Control</code> or <code>Pragma</code> headers to defeat
       caching [RFC2616].</p>
      <param name='header'>@XXX TDB@</param>
      <param name='value'>@XXX TDB@</param>
      <exception name='DOMException'>
       <code name='INVALID_STATE_ERR'>MUST be raised if
        <code><term>readyState</term></code> has an inappropriate value. (See
        prose above.)</code>
      </exception>
     </method>
     <method name="send">
      <p>If the <code><term>readyState</term></code> attribute has a value other
       than 1 (Open), an exception MUST be raised. Otherwise, the
       <code><term>readyState</term></code> attribute MUST be set to 2 (Sent)
       and a request to <var>uri</var> using method <var>method</var>,
       authenticating using <var>user</var> and <var>password</var> as
       appropriate is sent. If the <var>async</var> flag is set to false, then
       the method MUST not return until the request has completed. Otherwise, it
       MUST return immediately. (See: <code><term>open()</term></code>.)</p>
      <p>If the <var>method</var> is <code>POST</code> or <code>PUT</code>,
       then the <var>data</var> passed to the <code>send()</code> method MUST be
       used for the entity body. If <var>data</var> is a string, the data MUST
       be encoded as UTF-8 for transmission. If the <var>data</var> is a
       <code>Document</code>, then the document MUST be serialized using the
       encoding given by <code><var>data</var>.xmlEncoding</code>, if specified,
       or UTF-8 otherwise [DOM3]. If <var>data</var> is not a
       <code>Document</code> or a <code>DOMString</code> the host language MUST
       use the stringification mechanisms on the argument that was passed.</p>
      <p>Invoking <code>send()</code> without the <var>data</var> argument MUST
       give the same result as if it was invoked with <code>null</code> as
       argument.</p>
      <p>If the response is an HTTP redirect (status code 301, 302, 303 or 307),
       then it MUST be transparently followed (unless it violates security or
       infinite loop precautions). Note that HTTP [RFC2616] places requirements
       on UAs regarding the preservation of the request method during redirects,
       and also requires users to be notified of certain kinds of automatic
       redirections. Any other error (including a 401) MUST cause the object to
       use that error page as the response.</p>
      <p>If the author performed a conditional GET request (setting the relevant
       headers using <code><term>setRequestHeader()</term></code>) and the
       resulting response is a 304 the UA MUST return a 304 and it is expected
       the page author can deal with that. Otherwise, if the UA performed a
       conditional GET request and the response is a 304 the UA MUST return a
       200 (using the relevant cached file).</p>
      <ednote>What about DNS errors?</ednote>
      <p>Immediately before receiving the message body (if any), the
       <code><term>readyState</term></code> attribute MUST be set to to 3
       (Receiving). When the request has completed loading, the
       <code><term>readyState</term></code> attribute MUST be set to 4 (Loaded).
       In case of a HEAD request <code><term>readyState</term></code> MUST be
       set to 4 (Loaded) immediatly after having gone to 3 (Receiving).</p>
      <param name='data' type='Document | DOMString'>@XXX TDB@</param>
      <exception name='DOMException'>
       <code name='INVALID_STATE_ERR' on='retrieval'>MUST be raised if this
       method is called when <code><term>readyState</term></code> has an
       inappropriate value.</code>
      </exception>
     </method>
     <method name='abort'>
      <p>When invoked, this method MUST cancel any network activity for which
       the object is responsible and reset the object.</p>
     </method>
     <method name='getAllResponseHeaders'>
      <p>If the <code><term>readyState</term></code> attribute has a value other
       than 3 (Receiving) or 4 (Loaded), it MUST return <code>null</code>.
       Otherwise, it MUST return all the HTTP headers, as a single string, with
       each header line separated by a CR (U+000D) LF (U+000A) pair. The status
       line MUST not be included.</p>
      <example>
       <title>Manipulating response headers</title>
       // The following script:
       var r = new XMLHttpRequest();
       r.open('GET', 'test.txt', false);
       r.send();
       print(r.getAllResponseHeaders());

       // ...should output something similar to the following text:
       Date: Sun, 24 Oct 2004 04:58:38 GMT
       Server: Apache/1.3.31 (Unix)
       Keep-Alive: timeout=15, max=99
       Connection: Keep-Alive
       Transfer-Encoding: chunked
       Content-Type: text/plain; charset=utf-8
      </example>
      <returns type='DOMString'>A single string consisting of all HTTP headers.
       See prose for details.</returns>
     </method>
     <method name='getResponseHeader'>
      <p>If the <code><term>readyState</term></code> attribute has a value other
       than 3 (Receiving) or 4 (Loaded), it MUST return the empty string.
       Otherwise, it MUST represent the value of the given HTTP header in the
       data received so far for the last request sent, as a single string. If
       more than one header of the given name was received, then the values MUST
       be concatenated, separated from each other by an U+002C COMMA followed by
       an U+0020 SPACE. If no headers of that name were received, then it MUST
       return the empty string. Header names MUST be compared case-insensitively
       to the method argument (<var>header</var>).</p>
      <ednote>Case-insensitively how?</ednote>
      <ednote>Needs to be revised largely based on Mark's comments.</ednote>
      <example>
       <title>Getting a response header</title>
       // The following script:
       var r = new XMLHttpRequest();
       r.open('GET', 'test.txt', false);
       r.send();
       print(r.getResponseHeader('Content-Type'));

       // ...should output something similar to the following text:
       Content-Type: text/plain; charset=utf-8
      </example>
      <returns type='DOMString'>@XXX TBD@</returns>
      <param name='header'>@XXX TDB@</param>
     </method>
     <attribute name="responseText">
      <p>If the <code><term>readyState</term></code> attribute has a value other
       than 3 (Receiving) or 4 (Loaded), it MUST be the empty string. Otherwise,
       it MUST be the fragment of the entity body received so far (when
       <code><term>readyState</term></code> is 3 (Receiving)) or the entity body
       (when <code><term>readyState</term></code> is 4 (Loaded)), interpreted
       using the character encoding specified in the response, or UTF-8 if no
       character encoding was specified. Invalid bytes MUST be converted to
       U+FFFD REPLACEMENT CHARACTER.</p>
     </attribute>
     <attribute name='responseXML' type='Document'>
      <p>If the <code><term>readyState</term></code> attribute has a value other
       than 4 (Loaded), it MUST be <code>null</code>. Otherwise, if the
       <code>Content-Type</code> header contains a media type (ignoring any
       parameters) that is either <code>text/xml</code>,
       <code>application/xml</code>, or ends in <code>+xml</code>, it MUST be an
       object that implements the <code>Document</code> interface representing
       the parsed document. If <code>Content-Type</code> did not contain such a
       media type, or if the document could not be parsed (due to an XML
       well-formedness error or unsupported character encoding, for instance),
       it MUST be <code>null</code>.</p>
      <ednote>Because of nonsense like
       <code>r.responseXML.getElementsByTagName()</code> this might have to
       return an empty document node instead. It seems to be what
       implementations do in a lot of cases anyway...</ednote>
     </attribute>
     <attribute name='status' type='unsigned short'>
      <p>If the <code>status</code> attribute is not available it MUST raise an
       exception. It MUST be available when <code><term>readyState</term></code>
       is 3 (Receiving) or 4 (Loaded). When available, it MUST represent the
       HTTP status code (typically 200 for a successful connection).</p>
      <exception name='DOMException'>
       <code name='INVALID_STATE_ERR' on='retrieval'>MUST be raised when this
       attribute is accessed when <code><term>readyState</term></code> has an
       inappropriate value.</code>
      </exception>
     </attribute>
     <attribute name='statusText'>
      <p>If the <code>statusText</code> attribute is not available it MUST raise
       an exception. It MUST be available when <code>readyState</code> is 3
       (Receiving) or 4 (Loaded). When available, it MUST represent the HTTP
       status text sent by the server (appears after the status code).</p>
      <exception name='DOMException'>
       <code name='INVALID_STATE_ERR' on='retrieval'>MUST be raised if this
        attribute is accessed when <code><term>readyState</term></code> has an
        inappropriate value.</code>
      </exception>
     </attribute>
    </interface>
   </idl>
  </schema>
  <p>HTTP requests sent from multiple different <code>XMLHttpRequest</code>
   objects in succession SHOULD be pipelined into shared HTTP connections.</p>
 </section>
 <section xml:id="events">
  <title>Events</title>
  <p>These sections describe the various events that can be dispatched on the
   object implementing the <code>XMLHttpRequest</code> interface. For this
   version of the specification only one event is defined.</p>
  <dl>
   <dt><dfn><code>readystatechange</code></dfn></dt>
   <dd>The <code>readystatechange</code> event MUST be dispatched when
    <code><term>readyState</term></code> changes value. It MUST NOT bubble, MUST
    NOT be cancelable and MUST implement the <code>Event</code> interface
    [DOM3EV].</dd>
  </dl>
 </section>
 <section xml:id="bibref" type="appendix">
  <title>References</title>
   <bibliography/>
 </section>
 <section xml:id="acknowledgements" type="appendix">
  <title>Acknowledgements</title>
  <p><em>This section is non-normative</em></p>
  <ul>
   <li>Asbjørn Ulsberg</li>
   <li>Boris Zbarsky</li>
   <li>Björn Höhrmann</li>
   <li>Cameron McCormack</li>
   <li>Christophe Jolif</li>
   <li>Charles McCathieNevile</li>
   <li>Doug Schepers</li>
   <li>Douglas Livingstone</li>
   <li>Gorm Haug Eriksen</li>
   <li>Hallvord R. M. Steen</li>
   <li>Håkon Wium Lie</li>
   <li>Ian Davis</li>
   <li>Ian Hickson</li>
   <li>Ivan Herman</li>
   <li>Jens Lindström</li>
   <li>Jim Deegan</li>
   <li>Jim Ley</li>
   <li>Jonas Sicking</li>
   <li>Julian Reschke</li>
   <li>Karl Dubost</li>
   <li>Maciej Stachowiak</li>
   <li>Marc Hadley</li>
   <li>Mark Nottingham</li>
   <li>Pawel Glowacki</li>
   <li>Robin Berjon</li>
  </ul>
  <p>Special thanks also to the Microsoft employees who first implemented the
   <code>XMLHttpRequest</code> interface, which was first widely deployed by
   the Windows Internet Explorer browser.</p>
  <p>Special thanks also to the WHATWG for drafing a first version of this
   specification in their Web Applications 1.0 document.</p>
  <p>Thanks also to all those who have helped to improve this specification by
   sending suggestions and corrections. (Please, keep bugging us with your
   issues!)</p>
  <p>(By the way, if you contributed to this specification in any way and you
   are not listed in this appendix please e-mail either editor directly.)</p>
 </section>
</specification>
