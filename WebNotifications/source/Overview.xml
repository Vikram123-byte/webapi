<specification 
              xmlns='http://berjon.com/ns/re-spec/' 
              xmlns:rs='http://berjon.com/ns/re-spec/' 
              version='1.0' 
              xml:lang='en'>

  <metadata>
    <title>Web Notifications</title>
    <styling type='W3C' status='ED'/>
    <date year='2010' month='04' day='22'/>
    <editors>
      <person>
        <name>John Gregg</name>
        <email>johnnyg@google.com</email>
        <company>Google</company>
        <company-url>http://www.google.com/</company-url>
      </person>
    </editors>
  </metadata>

  <section xml:id='abstract' type='w3c-abstract'>
    <title>Abstract</title>
    <p>
      This document defines APIs for alerting the user outside of a web page
      by displaying notifications. Notifications are displayed asynchronously
      and do not require user confirmation; events are specified for managing 
      user interactions with notifications. 
    </p>
    <!--
    <ednote>
      <p>
        Last update: $Id: Overview.xml,v 1.5 2010-04-22 18:53:26 jgregg Exp $.
      </p>
    </ednote>
    -->
  </section>

  <section xml:id='sotd' type='w3c-sotd'>
    <title>Status of this Document</title>
    <p>
      This document is an Editor's Draft and is not suitable for purposes other
      than reviewing the specification being developed.
    </p>
  </section>

  <section xml:id='contents' type='toc'>
    <title>Table of Contents</title>

    <?respec-toc?>
  </section>

  <section xml:id='definitions'>
    <title>Definitions</title>

    <ul>
      <li><em>ambient notification</em>: A notification which appears and disappears automatically without user action.</li>
      <li><em>interactive notification</em>: A notification which can receive events from user actions and deliver them to the application which created the notification.</li>
      <li><em>persistent notification</em>: A notification which is displayed until the user explicitly dismisses it.</li>
      <li><em>notification platform</em>: A notification platform is a system outside the user agent which provides desktop notifications.  Examples include Growl on MacOS, NotifyOSD on Linux, and the Windows notification API.</li>
      <li><em>simple notification</em>: A notification which consists only of an icon and one or two lines of text.</li>
      <li><em>user gesture</em>: A script event is considered a user gesture if it directly resulted from the user using an input device. For example, the <code>onclick</code> and <code>onkeypress</code> events are user gestures.  Scripts run by a timeout, or for example an <code>onload</code> event are not user gestures.</li>
      <li><em>web notification</em>: A notification which consists of Web platform content, such as HTML or SVG.</li>
    </ul>
  </section>

  <section xml:id='requirements'>
    <title>Requirements and use cases</title>  
    This specification must meet the following requirements:
    <ul>
      <li>An implementation which uses only the existing notification platforms in major platforms to display notifications must be able to comply with the specification.</li>
      <li>The specification must allow compliant implementations regardless of platform or device.</li>
      <li>The specification must not allow unwanted notifications to be displayed.</li>
      <li>The specification must define an event model for interactive notifications.</li>
      <li>The specification must address security issues.</li>
      <li>The specification should not require any implementation to display persistent notifications.</li>
      <li>The specification should be compatible with other Web technologies, such as HTML and SVG.</li>
    </ul>

    The specification attempts to address the following use cases:
    <ul>
      <li>An application shows a "you've got mail" alert in the form of an ambient notification, with no interaction necessary.</li>
      <li>An application shows "you've got mail" as an alert, and allow the user to easily return to the inbox.</li>
      <li>A calendar application alerts the user for an upcoming meeting, and allows the user to easily specify a "snooze" delay of several possible time periods.</li>
      <li>A system alerts the user "your printer is out of paper".</li>
    </ul>
  </section>
  
  <section xml:id='introduction' normativity='not normative'>
    <title>Introduction</title>
    <p>
      This specification provides an API to generate <em>notifications</em> to
      alert users outside of the web page.  It does not specify exactly how a user
      agent should display these alerts; the best presentation depends on the device
      where the user agent is run.  When this specificiation refers to displaying
      notifications on the "desktop", it generally refers to some static display
      area outside the web page, but may take several forms, including:
      <ul>
        <li>a corner of the user's display,</li>
        <li>an area within the chrome of the user agent,</li>
        <li>the "home" screen of a mobile device,</li>
        <li><em>et al.</em></li>
      </ul>
      This specification does not define exactly how the user agent should display
      the notification, and the API is designed to be flexible with respect to
      presentation options.
    </p>
    
    <section>
      <title>Notification platforms</title>
      <p>
	This specification is designed to be compatible with existing notification platforms
	as much as possible, but also to be platform-independent.  Since the common platforms
	do not provide the same functionality, this spec will indicate what events are guaranteed
	and which are not.
      </p>
      
      <p>
	In general, the event model for notifications is best-effort; while the Notification 
	object offers an "onclick" event, applications may enhance their functionality by
	listening for that event, but <em>must not depend on receiving it</em>,
	in case the underlying notification platform does not provide that capability.
      </p>
    </section>

    <section>
	<title>Security</title>
	
	<p>
	  Notifications should only be presented when the user has indicated they are desired;
	  without this they could create a negative experience for the user.
	</p>

	<p>
	  A user agent must not show any notifications generated by script from a particular
	  origin until the user has granted permission for that origin to show notifications.
	  Furthermore a request for such permission should only be allowed when 
	  initiated by a user gesture.
	</p>
      </section>
  </section>

  <section xml:id='idl-if-Notification'>
    <title>The Notification interface</title>
    <p>
      The Notification interface represents a single alert to be shown to the user. It extends the EventTarget interface defined in [DOMEVENTS].
    </p>
    <schema>
      <title>the Notification interface</title>
      <idl>
        <interface name='Notification' extends='EventTarget'>
	  <method name='show'>
	    <p>
	      Requests the user agent to show the notification to the user. Depending on 
	      desktop space, user idleness, or other factors as determined by the user
	      agent, this may happen immediately or be postponed, but must eventually
	      be done, following the algorithm for queueing a notification below.
	    </p>
	  </method>
	  <method name='cancel'>
	    <p>
	      Requests the user agent to not show this notification. If the notification
	      has already been displayed, the user agent must remove it from the display;
	      if it has not yet be displayed, the user agent must prevent its being
	      displayed.
	    </p>
	  </method>
	  <attribute type='Function' name='onclick'>
	    <p>
	      An event listener function corresponding to the event type "click".  This event
	      listener is must be invoked when the user clicks on a notification.
	    </p>
	    <p>
	      <em>
		This event is not guaranteed if the underlying notification platform does not support receiving
		click events.
	      </em>
	    </p>
	  </attribute>
	  <attribute type='Function' name='ondisplay'>
	    <p>
	      An event listener function corresponding to the event type "display".  This
	      event listener must be invoked after the <code>show()</code> method is called, at the
	      point when the notification actually becomes visible to the user.
	    </p>
	    <p>
	      <em>
		If the underlying notification platform does not show the notification immediately,
		this event may precede the notification becoming visible; however the notification
		will never become visible before this event is dispatched.
	      </em>
	    </p>
	  </attribute>
	  <attribute type='Function' name='onerror'>
	    <p>
	      An event listener function corresponding to the event type "error".  This
	      event listener must be invoked after the <code>show()</code> method is called, if the
	      notification cannot be displayed to the user because of an error.
	    </p>
	  </attribute>
	  <attribute type='Function' name='onclose'>
	    <p>
	      An event listener function corresponding to the event type "close".  This
	      event listener must be invoked after the "display" event, at the point
	      when the alert is dismissed by the user.
	    </p>
	  </attribute>

	  <attribute type='int' name='replaceId'>
	    <p>
	      A value which identifies this notification for replacement by another notification
	      serving the same purpose.  The user agent must not allow two notifications created
	      by the same security origin and having the same <code>replaceId</code> value to be 
	      shown simultaneously.
	    </p>
	  </attribute>

	  <attribute type='string' name='dir'>
	    <p>
	      The <code>dir</code> attribute specifies the directionality of the notification, and
	      has all the properties of the <code>dir</code> attribute as defined in [HTML5]. 
	    </p>
	    <p>
	      Since the notification does not have a parent element, if the notification's directionality
	      state is not <em>ltr</em> or <em>rtl</em>, the directionality shall be the same as
	      the document, or <em>ltr</em> if there is no document.
	    </p>
	  </attribute>
	    
	</interface>
      </idl>
    </schema>
  </section>

  <section xml:id='idl-if-NotificationCenter'>
    <title>The NotificationCenter interface</title>
    <p>
      The NotificationCenter interface exposes the ability for web pages to create
      Notification objects which represent <em>simple notifications</em>, and to manage
      notification permissions.
    </p>
    <schema>
      <title>the NotificationCenter interface</title>
      <idl>
	<interface name='NotificationCenter'>
	  <attribute type='unsigned long' name='permissionLevel'>
	    <p>
	      Has value either <code>PERMISSION_ALLOWED</code>, 
	      <code>PERMISSION_UNKNOWN</code>, or <code>PERMISSION_DENIED</code>, 
	      which indicates the permission level granted to the origin of the 
	      script.	    
	    </p>
	  </attribute>

          <definition-group for='permission values'>
	    <constant type='unsigned long' name='PERMISSION_ALLOWED' value='0' >
	      <p>
		indicates that the user has granted permission to scripts with this origin
		to show notifications.
	      </p>
	    </constant>
            <constant type='unsigned long' name='PERMISSION_UNKNOWN' value='1'>
	      <p>
		indicates that the user has not 
		taken an action regarding notifications for scripts from this origin, but
		unless otherwise specified, user agents must act as if permission has been denied.
	      </p>
	    </constant>
            <constant type='unsigned long' name='PERMISSION_DENIED' value='2'>
	      <p>
		indicates that the user has explicitly 
		blocked scripts with this origin from showing notifications.
	      </p>
	    </constant>
          </definition-group>

	  <method name='requestPermission'>
	    <param name='callback' type='Function'>
	      A callback function to be called when the user responds to the permission request.
	    </param>
	    <p>
	      Requests that the user agent ask the user for permission to show notifications 
	      from scripts.  This method should only be called while handling a user gesture; 
	      in other circumstances the user agent should take no action in response. 
	    </p>

	    <p>
	      This method is asynchronous. The function provided in the <code>callback</code> 
	      parameter will be invoked when the user has responded to the permission request.
	    </p>
	    
	    <p>
	      If the current permission level is <code>PERMISSION_DENIED</code>, 
	      the user agent may take no action in response to <code>requestPermission</code>,
	      and must throw an exception.
	    </p>
	    <exception name='Exception'>
	      <p>
		If the user agent does not initiate a request for permission with the user,
		e.g., because if a permission decision has already been recently made, the 
		user agent must throw an Exception.
	      </p>
	    </exception>
	  </method>

	  <method name='createNotification'>
	    <p>
	      Returns a new text notification object with the provided content.
	    </p>
	    <param name='iconUrl' type='DOMString'>
	      URL of the icon to be shown with this notification.
	      The parameter must be resolved relative to the current document base URL or worker script URL.
	    </param>
	    <param name='title' type='DOMString'>
	      Primary text, or title, of the notification.
	    </param>
	    <param name='body' type='DOMString'>
	      Secondary text, or body, of the notification.
	    </param>
	    <exception name='Exception'>
	      <p>
		If the notifications permission level for the current origin is not <code>PERMISSION_ALLOWED</code>,
		this method will throw a <code>SECURITY_ERR</code>.
	      </p>
	      <p>
		If the URL is invalid or cannot be resolved, a <code>SYNTAX_ERR</code> is raised.
	      </p>
	    </exception>
	    <returns type='Notification'>
	      <p>A notification object representing the new notification.</p>
	    </returns>
	  </method>
	</interface>
      </idl>
    </schema>
  </section>

  <section xml:id='window'>
    <title>Accessing notifications</title>
    <section>
      <title>Accessing from pages</title>
      <p>
	In page context, the NotificationCenter object is accessed from the Navigator object.  [HTML5]
      </p>
      <schema>
	<title>Notifications via Navigator</title>
	<idl>
	  Navigator implements NotificationCenter;
	</idl>
      </schema>
    </section>
    <section>
      <title>Accessing from workers</title>
      <p>
	From worker context, the NotificationCenter object is accessed from the WorkerNavigator object.  [WEBWORKERS]
      </p>
      <schema>
	<title>Notifications via WorkerNavigator</title>
	<idl>
	  WorkerNavigator implements NotificationCenter;
	</idl>
      </schema>
    </section>
  </section>

  <section xml:id='html'>
    <title>Web notifications</title>
    <p>
      In addition to displaying simple notifications, some user agents may use a notification platform that is
      capable of displaying notifications which contain web content, such as HTML or SVG.  This supplemental 
      interface exposes that ability.
    </p>
    <schema>
      <title>supplemental NotificationCenter interface</title>
      <idl>
	<interface name='NotificationCenter' supplemental='true'>
	  <method name='createWebNotification'>
	    <p>
	      Implementation of this method is optional for the <code>NotificationCenter</code>
	      interface; user agents which do not support web content in the presentation of 
	      notifications should leave this method undefined and implement only 
	      <code>createNotification</code>.
	    </p>
	    <returns type='Notification'>
	      <p>A notification object representing the new notification.</p>
	    </returns>
	    <param name='url' type='DOMString'>
	      The URL of a resource which contains content to be shown as the alert.
	      The URL parameter must be resolved relative to the base URL of the document or worker script.
	    </param>
	    <exception name='Exception'>
	      <p>
		If the notifications permission level for the current origin is not <code>PERMISSION_ALLOWED</code>,
		this method will throw a <code>SECURITY_ERR</code>.
	      </p>

	      <p>
		If the URL is invalid or cannot be resolved, a <code>SYNTAX_ERR</code> is raised.
	      </p>
	    </exception>
	  </method>
	</interface>
      </idl>
    </schema>

    <section>
      <title>Unsupported content types</title>
      <p>
	User agents which use an existing notification platform and support only simple notifications may not
	support all types of web content.  These user agents may attempt to extract simple notification content
	from web content such as the <el>title</el> tag of HTML content as the notification.
      </p>
    </section>
  </section>
    
  <section xml:id='algorithms'>
    <title>Queueing and displaying notifications</title>
    <section>
      <title>Queueing notifications</title>
      <p>
	If the device does not allow all notifications to be displayed immediately, the user agent
	should either call to a notifications platform which supports
	queueing as soon as <code>show()</code> is called, or use the following algorithm.
      </p>
      <p>
	When <code>show</code> is called on a notification object by script running in an origin 
	which has <code>PERMISSION_ALLOWED</code> level notification
	permissions, the user agent should run the following algorithm.
      </p>
      <p>
	The user agent must keep a <em>queue of pending notifications</em> and a <em>list of active notifications</em>. 
      </p>
      <ol>
	<li>Get the replacement id of the notification to be shown, and let it be replaceId.</li>
	<li>
	  If replaceId is defined, examine all the notifications in the <em>list of active notifications</em>.
	  If any notification in the list has the same source origin and has replacement id equal to replaceId,
	  do the following steps and then terminate this algorithm.  Let <em>existing</em> be the notification in the list
	  which matches.
	  <ol>
	    <li>Replace <em>existing</em> with the new notification using the <a href="#replacing">replacing a notification</a> algorithm.</li>
	    <li>If the replacement returned error information, stop.</li>
	    <li>Remove <em>existing</em> from the <em>list of active notifications</em>.</li>
	    <li>Add the new notification to the <em>list of active notifications</em>.</li>
	  </ol>
	</li>
	<li>Add the notification to the <em>queue of pending notifications</em>.</li>
	<li>Wait until there is available space on the device.</li>
	<li>Display the first notification in the <em>queue of pending notifications</em> using 
	  the <a href="#displaying">displaying a notification</a> algorithm.</li>
      </ol>
      <p>
	When the available display space changes on the device such that a new notification may be
	displayed, for example due to a previous notification being dismissed, the user agent should
	<a href="#displaying">display</a> the first notification in the queue using the procedure described above.
      </p>
    </section>

    <section xml:id='displaying'>
      <title>Displaying notifications</title>
      <p>
	When a user agent is to <em>display a notification</em>, the user agent should perform the following steps:
	<ol>
	  <li>
	    Fetch the resource given by <code>url</code> (for <code>createWebNotification</code>) or
	    by <code>iconUrl</code> (for <code>createNotification</code>), using the algorithm defined in
	    [HTML5] with the <em>synchronous</em> flag set.
	  </li>
	  <li>
	    If the fetch algorithm returns error information, fire the <code>error</code> event on the notification
	    object and stop executing this algorithm.
	  </li>
	  <li>Fire the <code>display</code> event on the notification object.</li>
	  <li>Show the notification on the device, such as by calling the appropriate notification platform.</li>
	</ol>
      </p>
    </section>

    <section xml:id='replacing'>
      <title>Replacing a notification</title>
      <p>
	When a user agent is to <em>replace a notification</em>, the user agent should perform the following steps.
	Let <em>old</em> be the notification to be replaced by <em>new</em>.
	<ol>
	  <li>
	    Fetch the content or icon resource in <em>new</em> using the algorithm defined in
	    [HTML5] with the <em>synchronous</em> flag set.
	  </li>
	  <li>
	    If the fetch algorithm returns error information, fire the <code>error</code> event on the <em>new</em> notification
	    object and stop executing this algorithm,m returning the error information.  The <em>old</em> notification is not affected.
	  </li>
	  <li>Fire the <code>close</code> event on the <em>old</em> notification object.</li>
	  <li>Fire the <code>display</code> event on the <em>new</em> notification object.</li>
	  <li>If the underlying notification platform supports replacement, replace <em>old</em> with <em>new</em> on the device.</li>
	  <li>If the underlying notification platform does not support replacment, remove <em>old</em> from the device and show <em>new</em> on the device.</li>
	</ol>
      </p>
    </section>
  </section>
  <section xml:id='interactions'>
    <title>Interacting with notifications</title>
    <section>
      <title>Using events</title>
      <p>
	Notification objects dispatch events during their lifecycle, which authors can use
	to generate desired behaviors.
      </p>
      <p>
	The <code>display</code> event occurs when the notification is shown to the user -- 
	this may be at some time after the <code>show()</code> method is called in the case
	of limited display space and a queue.
      </p>

      <p>
	In the following example, this event is used to guarantee that regardless of when
	the notification is shown, it is displayed for only 15 seconds.
      </p>

      <example>
	var notification = window.notifications.createNotification("mail.png", "New Email Received");
	notification.ondisplay = function() { setTimeout(notification.cancel(), 15000); }
	notification.show();
      </example>

      <p>
	The <code>close</code> events occurs when the notification is dismissed by the user.
	Authors may use this event to perform actions when alerts are acknowledged.
      </p>
      <p>
	In the following example, when a meeting reminder notification is acknowledged, the
	application suppresses other forms of reminders.
      </p>

      <example>
	var notification = window.notifications.createWebNotification("/reminder.html?eventId=" + event.id);
	notification.onclose = function() { cancelReminders(event); }
	notification.show();
      </example>
	
    </section>
    <section>
      <title>Using window.opener</title>
      This section deals with Web notifications only.
      <p>
	A web notification is a separate window, and script running within
	that context should be able to communicate to other windows, subject to the
	rules which generally apply to cross-domain communication.
      </p>
      <p>
	Within a web notification, the <code>window.opener</code> property should be
	set to the window which created the notification.  If the notification was
	created by a worker script, <code>window.opener</code> should be <code>null</code>.
      </p>

      <p>
	The following example uses <code>window.opener</code> to return to the application
	which created the notification in response to a click, and then close the notification.
      </p>

      <example>
	notification.html
	---
	New email arrived! 
	&lt;a href="#" onclick="window.opener.focus(); window.close();"&gt;
	  Go to Inbox
	&lt;/a&gt;

	script.js
	---
	var notification = window.notifications.createWebNotification("notification.html");
	notification.show();
      </example>
    </section>
  </section>

  <section>
    <title>References</title>
    <bibliography>
      <bibentry xml:id='DOMEVENTS'>
	<title>Document Object Model (DOM) Level 3 Events Specification</title>
	<link>http://www.w3.org/TR/DOM-Level-3-Events</link>
      </bibentry>
      <bibentry xml:id='HTML5'>
	<title>HTML5: A vocabulary and associated APIs for HTML and XHTML</title>
	<link>http://www.w3.org/TR/html5/</link>
      </bibentry>
      <bibentry xml:id='WEBWORKERS'>
	<title>Web Workers</title>
	<link>http://whatwg.org/ww/</link>
      </bibentry>
    </bibliography>
  </section>

</specification>

