<specification 
              xmlns='http://berjon.com/ns/re-spec/' 
              xmlns:rs='http://berjon.com/ns/re-spec/' 
              version='1.0' 
              xml:lang='en'>

  <metadata>
    <title>Web Notifications</title>
    <styling type='W3C' status='ED'/>
    <date year='2010' month='01' day='25'/>
    <editors>
      <person>
        <name>John Gregg</name>
        <email>johnnyg@google.com</email>
        <company>Google</company>
        <company-url>http://www.google.com/</company-url>
      </person>
    </editors>
  </metadata>

  <section xml:id='abstract' type='w3c-abstract'>
    <title>Abstract</title>
    <p>
      This document defines APIs for alerting the user outside of a web page
      by displaying notifications. Notifications are displayed asynchronously
      and do not require user confirmation; events are specified for managing 
      user interactions with notifications. 
    </p>
    <!--
    <ednote>
      <p>
        Last update: $Id: Overview.xml,v 1.2 2010-01-25 20:14:45 jgregg Exp $.
      </p>
    </ednote>
    -->
  </section>

  <section xml:id='sotd' type='w3c-sotd'>
    <title>Status of this Document</title>
    <p>
      This document is an Editor's Draft and is not suitable for purposes other
      than reviewing the specification being developed.
    </p>
  </section>

  <section xml:id='contents' type='toc'>
    <title>Table of Contents</title>

    <?respec-toc?>
  </section>

  <section xml:id='introduction' normativity='not normative'>
    <title>Introduction</title>

     <p>
        Many web pages benefit from alerting the user of important events passively, 
        even when the user is not interacting with that web page.  Some such sitations include:
        <ul>
          <li>a calendar application which needs to indicate an upcoming event,</li>
          <li>a mail application indicating a new message,</li>
          <li>a photo application indicating that a large upload has completed.</li>
        </ul>
      </p>
      
      <p>
        This specification provides an API to generate <em>notifications</em> to
        alert users outside of the web page.  It does not specify exactly how a user
        agent should display these alerts; the best presentation depends on the device
        where the user agent is run.  When this specificiation refers to displaying
        notifications on the "desktop", it generally refers to some static display
        area outside the web page, but may take several forms, including:
        <ul>
          <li>a corner of the user's display,</li>
          <li>an area within the chrome of the user agent,</li>
          <li>the "home" screen of a mobile device,</li>
          <li><em>et al.</em></li>
        </ul>
        This specification does not define exactly how the user agent should display
        the notification, and the API is designed to be flexible with respect to
        presentation options.
      </p>
      <section>
	<title>Security</title>
	
	<p>
	  Notifications should only be presented when the user has indicated they are desired;
	  without this they could create a negative experience for the user.
	</p>

	<p>
	  A user agent must not show any notifications generated by script from a particular
	  origin until the user has granted permission for that origin to show notifications.
	  Furthermore a request for such permission should only be allowed when 
	  initiated by a user gesture.
	</p>
      </section>

      <section>
	<title>HTML and Text notifications</title>

	<p>
	  Several systems exist for alerting users through notifications.  Many of these systems
	  take as input a string of text and an icon to be displayed. Within the web context,
	  this specification extends the utility of notifications by using HTML content within
	  the notification itself, allowing alerts which are dynamic.
	</p>

	<p>
	  Some user agents may not be compatible with creating passive HTML windows outside of the
	  frame, such as mobile devices, which often support a text alerting system.  For these
	  user agents, the specification provides a text notification system in parallel with the
	  HTML system. 
	</p>
	  
      </section>
  </section>

  <section xml:id='idl-if-Notification'>
    <title>The Notification interface</title>
    <p>
      The Notification interface represents a single alert to be shown to the user.
    </p>
    <schema>
      <title>the Notification interface</title>
      <idl>
        <interface name='Notification' extends='EventTarget'>
	  <method name='show'>
	    <p>
	      Requests the user agent to show the notification to the user. Depending on 
	      desktop space, user idleness, or other factors as determined by the user
	      agent, this may happen immediately or be postponed, but must eventually
	      be done.
	    </p>
	  </method>
	  <method name='cancel'>
	    <p>
	      Requests the user agent to not show this notification. If the notification
	      has already been displayed, the user agent must remove it from the display;
	      if it has not yet be displayed, the user agent must prevent its being
	      displayed.
	    </p>
	  </method>
	  <attribute type='Function' name='ondisplay'>
	    <p>
	      An event listener function corresponding to the event type "display".  This
	      event listener must be invoked after the <code>show()</code> method is called, at the
	      point when the notification actually becomes visible to the user.
	    </p>
	  </attribute>
	  <attribute type='Function' name='onerror'>
	    <p>
	      An event listener function corresponding to the event type "error".  This
	      event listener must be invoked after the <code>show()</code> method is called, if the
	      notification cannot be displayed to the user because of an error.
	    </p>
	  </attribute>
	  <attribute type='Function' name='onclose'>
	    <p>
	      An event listener function corresponding to the event type "error".  This
	      event listener must be invoked after the "display" event, at the point
	      when the alert is dismissed by the user.
	    </p>
	  </attribute>
	</interface>
      </idl>
    </schema>
  </section>

  <section xml:id='idl-if-NotificationCenter'>
    <title>The NotificationCenter interface</title>
    <p>
      The NotificationCenter interface exposes the ability for web pages to create
      Notification objects.
    </p>
    <schema>
      <title>the NotificationCenter interface</title>
      <idl>
	<interface name='NotificationCenter'>
	  <method name='createNotification'>
	    <p>
	      Returns a new text notification object with the provided content.
	    </p>
	    <param name='iconUrl' type='DOMString'>
	      URL of the icon to be shown with this notification.
	    </param>
	    <param name='title' type='DOMString'>
	      Primary text, or title, of the notification.
	    </param>
	    <param name='body' type='DOMString'>
	      Secondary text, or body, of the notification.
	    </param>
	    <exception name='Exception'>
	      <p>
		If the notifications permission level for the current origin is not <code>PERMISSION_ALLOWED</code>,
		this method will throw a <code>SecurityException</code>.
	      </p>
	    </exception>
	    <returns type='Notification'>
	      <p>A notification object representing the new notification.</p>
	    </returns>
	  </method>

	  <method name='createHTMLNotification'>
	    <p>
	      Implementation of this method is optional for the <code>NotificationCenter</code>
	      interface; user agents which do not support HTML content in the presentation of 
	      notifications should leave this method undefined and implement only 
	      <code>createNotification</code>.
	    </p>
	    <returns type='Notification'>
	      <p>A notification object representing the new notification.</p>
	    </returns>
	    <param name='url' type='DOMString'>
	      The URL of a resource which contains HTML content to be shown as the 
	      content of the alert.
	    </param>
	  </method>

          <definition-group for='permission values'>
	    <constant type='unsigned long' name='PERMISSION_ALLOWED' value='0' >
	      <p>
		indicates that the user has granted permission to scripts with this origin
		to show notifications.
	      </p>
	    </constant>
            <constant type='unsigned long' name='PERMISSION_NOT_ALLOWED' value='1'>
	      <p>
		indicates that the user has not 
		taken an action regarding notifications for scripts from this origin, but
		unless otherwise specified, user agents must act as if permission has been denied.
	      </p>
	    </constant>
            <constant type='unsigned long' name='PERMISSION_DENIED' value='2'>
	      <p>
		indicates that the user has explicitly 
		blocked scripts with this origin from showing notifications.
	      </p>
	    </constant>
          </definition-group>

	  <method name='checkPermission'>
	    <p>
	      Returns an integer, either <code>PERMISSION_ALLOWED</code>, 
	      <code>PERMISSION_NOT_ALLOWED</code>, or <code>PERMISSION_DENIED</code>, 
	      which indicates the permission level granted to the origin of the 
	      script.	    
	    </p>
	    <returns type='unsigned long'>
	      <p>a integer representing a permission value</p>
	    </returns>
	  </method>
	  <method name='requestPermission'>
	    <p>
	      Requests that the user agent ask the user for permission to show notifications 
	      from scripts.  This method should only be called while handling a user gesture; 
	      in other circumstances the user agent should take no action in response. 
	    </p>

	    <p>
	      This method is asynchronous. The function provided in the <code>callback</code> 
	      parameter will be invoked when the user has responded to the permission request.
	    </p>
	    
	    <p>
	      If the current permission level is <code>PERMISSION_DENIED</code>, 
	      the user agent may take no action in response to <code>requestPermission</code>,
	      and must throw an exception.
	    </p>
	    <exception name='Exception'>
	      <p>
		If the user agent does not initiate a request for permission with the user,
		e.g., because if a permission decision has already been recently made, the 
		user agent must throw an Exception.
	      </p>
	    </exception>
	  </method>
	</interface>
      </idl>
    </schema>
  </section>

  <section xml:id='window'>
    <title>Accessing notifications</title>
    <section>
      <title>Accessing from pages</title>
      <p>
	In page context, the NotificationCenter object is accessed from DOMWindow.
      </p>
      <schema>
	<title>DOMWindow</title>
	<idl>
	  <interface name='DOMWindow'>
	    ...
	    <attribute type='NotificationCenter' name='notifications' />
	  </interface>
	</idl>
      </schema>
    </section>
    <section>
      <title>Accessing from workers</title>
      <p>
	From worker context, the NotificationCenter object is accessed from the global object, WorkerGlobalScope.
      </p>
      <schema>
	<title>WorkerGlobalScope</title>
	<idl>
	  <interface name='WorkerGlobalScope'>
	    ...
	    <attribute type='NotificationCenter' name='notifications' />
	  </interface>
	</idl>
      </schema>
    </section>
  </section>

  <section xml:id='interactions'>
    <title>Interacting with notifications</title>
    <section>
      <title>Using events</title>
      <p>
	Notification objects dispatch events during their lifecycle, which authors can use
	to generate desired behaviors.
      </p>
      <p>
	The <code>display</code> event occurs when the
	notification is shown to the user -- if there is a pending queue of notifications,
	this may be at some time after the <code>show()</code> method is called.
      </p>

      <p>
	In the following example, this event is used to guarantee that regardless of when
	the notification is shown, it is displayed for only 15 seconds.
      </p>

      <example>
	var notification = window.notifications.createNotification("mail.png", "New Email Received");
	notification.ondisplay = function() { setTimeout(notification.cancel(), 15000); }
	notification.show();
      </example>

      <p>
	The <code>close</code> events occurs when the notification is dismissed by the user.
	Authors may use this event to perform actions when alerts are acknowledged.
      </p>
      <p>
	In the following example, when a meeting reminder notification is acknowledged, the
	application suppresses other forms of reminders.
      </p>

      <example>
	var notification = window.notifications.createHTMLNotification("/reminder.html?eventId=" + event.id);
	notification.onclose = function() { cancelReminders(event); }
	notification.show();
      </example>
	
    </section>
    <section>
      <title>Using window.opener</title>     
      <p>
	An HTML notification is a separate HTML window, and script running within
	that context should be able to communicate to other windows, subject to the
	rules which generally apply to cross-domain communication.
      </p>
      <p>
	Within an HTML notification, the <code>window.opener</code> property should be
	set to the window which created the notification.  If the notification was
	created by a worker script, <code>window.opener</code> should be <code>null</code>.
      </p>

      <p>
	The following example uses <code>window.opener</code> to return to the application
	which created the notification in response to a click, and then close the notification.
      </p>

      <example>
	notification.html
	---
	New email arrived! 
	&lt;a href="#" onclick="window.opener.focus(); window.close();"&gt;
	  Go to Inbox
	&lt;/a&gt;

	script.js
	---
	var notification = window.notifications.createHTMLNotification("notification.html");
	notification.show();
      </example>
    </section>
  </section>
</specification>

